digraph "" {
	node [label="\N"];
	0	[contract_name=WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	1	[contract_name=WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_0(WALLET.Holder) -> Acc[msg.sender]
acc(WALLET.Holder) := REF_\
0(WALLET.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_0(WALLET.Holder) -> Acc[msg.sender]
acc(WALLET.Holder) := REF_0(WALLET.Holder)",
		node_type="NEW VARIABLE",
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	0 -> 1	[key=0,
		edge_type=next,
		label=Next];
	2	[contract_name=WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance += msg.value

IRs:
REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_expression="acc.balance += msg.value",
		node_irs="REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	1 -> 2	[key=0,
		edge_type=next,
		label=Next];
	4	[contract_name=WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: IF

EXPRESSION:
_unlockTime > now

IRs:
TMP_1(bool) = _unlockTime > now
CONDITION TMP_1",
		node_expression="_unlockTime > now",
		node_irs="TMP_1(bool) = _unlockTime > now
CONDITION TMP_1",
		node_type=IF,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	2 -> 4	[key=0,
		edge_type=next,
		label=Next];
	3	[contract_name=WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="LogFile.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	5	[contract_name=WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = _unlockTime

IRs:
REF_3(uint256) -> acc.unlockTime
REF_3 (->acc) := _unlockTime(\
uint256)",
		node_expression="acc.unlockTime = _unlockTime",
		node_irs="REF_3(uint256) -> acc.unlockTime
REF_3 (->acc) := _unlockTime(uint256)",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	4 -> 5	[key=0,
		edge_type=if_true,
		label=True];
	6	[contract_name=WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = now

IRs:
REF_4(uint256) -> acc.unlockTime
REF_4 (->acc) := now(uint256)",
		node_expression="acc.unlockTime = now",
		node_irs="REF_4(uint256) -> acc.unlockTime
REF_4 (->acc) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	4 -> 6	[key=0,
		edge_type=if_false,
		label=False];
	7	[contract_name=WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	5 -> 7	[key=0,
		edge_type=next,
		label=Next];
	6 -> 7	[key=0,
		edge_type=next,
		label=Next];
	7 -> 3	[key=0,
		edge_type=next,
		label=Next];
	8	[contract_name=WALLET,
		function_fullname="Put(uint256)",
		label="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol_WALLET_Put(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	8 -> 0	[key=0,
		edge_type=next,
		label=Next];
	9	[contract_name=WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	10	[contract_name=WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_5(WALLET.Holder) -> Acc[msg.sender]
acc(WALLET.Holder) := REF_\
5(WALLET.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_5(WALLET.Holder) -> Acc[msg.sender]
acc(WALLET.Holder) := REF_5(WALLET.Holder)",
		node_type="NEW VARIABLE",
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	9 -> 10	[key=0,
		edge_type=next,
		label=Next];
	11	[contract_name=WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime

IRs:
REF_6(uint256) -> acc.balance
\
TMP_2(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_3(bool) = REF_7 >= _am
TMP_4(bool) = TMP_2 && TMP_3
REF_8(uint256) \
-> acc.unlockTime
TMP_5(bool) = now > REF_8
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_expression="acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime",
		node_irs="REF_6(uint256) -> acc.balance
TMP_2(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_3(bool) = REF_7 >= _am
TMP_4(bool) = \
TMP_2 && TMP_3
REF_8(uint256) -> acc.unlockTime
TMP_5(bool) = now > REF_8
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_type=IF,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	10 -> 11	[key=0,
		edge_type=next,
		label=Next];
	12	[contract_name=WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_8",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_8",
		node_type=IF,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	11 -> 12	[key=0,
		edge_type=if_true,
		label=True];
	16	[contract_name=WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	11 -> 16	[key=0,
		edge_type=if_false,
		label=False];
	13	[contract_name=WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance -= _am

IRs:
REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_expression="acc.balance -= _am",
		node_irs="REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	12 -> 13	[key=0,
		edge_type=if_true,
		label=True];
	15	[contract_name=WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	12 -> 15	[key=0,
		edge_type=if_false,
		label=False];
	14	[contract_name=WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="LogFile.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	13 -> 14	[key=0,
		edge_type=next,
		label=Next];
	14 -> 15	[key=0,
		edge_type=next,
		label=Next];
	15 -> 16	[key=0,
		edge_type=next,
		label=Next];
	17	[contract_name=WALLET,
		function_fullname="Collect(uint256)",
		label="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol_WALLET_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	17 -> 9	[key=0,
		edge_type=next,
		label=Next];
	18	[contract_name=WALLET,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	19	[contract_name=WALLET,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Put(0)

IRs:
INTERNAL_CALL, WALLET.Put(uint256)(0)",
		node_expression="Put(0)",
		node_irs="INTERNAL_CALL, WALLET.Put(uint256)(0)",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	18 -> 19	[key=0,
		edge_type=next,
		label=Next];
	20	[contract_name=WALLET,
		function_fullname="fallback()",
		label="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol_WALLET_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	20 -> 18	[key=0,
		edge_type=next,
		label=Next];
	21	[contract_name=WALLET,
		function_fullname="WALLET(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	22	[contract_name=WALLET,
		function_fullname="WALLET(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile = Log(log)

IRs:
TMP_11 = CONVERT log to Log
LogFile(Log) := TMP_11(Log)",
		node_expression="LogFile = Log(log)",
		node_irs="TMP_11 = CONVERT log to Log
LogFile(Log) := TMP_11(Log)",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	21 -> 22	[key=0,
		edge_type=next,
		label=Next];
	23	[contract_name=WALLET,
		function_fullname="WALLET(address)",
		label="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol_WALLET_WALLET(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	23 -> 21	[key=0,
		edge_type=next,
		label=Next];
	24	[contract_name=WALLET,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinSum = 1000000000000000000

IRs:
MinSum(uint256) := 1000000000000000000(uint256)",
		node_expression="MinSum = 1000000000000000000",
		node_irs="MinSum(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	25	[contract_name=WALLET,
		function_fullname="slitherConstructorVariables()",
		label="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol_WALLET_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	25 -> 24	[key=0,
		edge_type=next,
		label=Next];
	26	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	27	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	26 -> 27	[key=0,
		edge_type=next,
		label=Next];
	28	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	27 -> 28	[key=0,
		edge_type=next,
		label=Next];
	29	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	28 -> 29	[key=0,
		edge_type=next,
		label=Next];
	30	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	29 -> 30	[key=0,
		edge_type=next,
		label=Next];
	31	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_18 -> LENGTH History
TMP_13(uint256) := REF_18(uint256)
TMP_14(\
uint256) = TMP_13 + 1
REF_18 (->History) := TMP_14(uint256)
REF_19(Log.Message) -> History[TMP_13]
REF_19 (->History) := LastMsg(\
Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_18 -> LENGTH History
TMP_13(uint256) := REF_18(uint256)
TMP_14(uint256) = TMP_13 + 1
REF_18 (->History) := TMP_14(uint256)
REF_\
19(Log.Message) -> History[TMP_13]
REF_19 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	30 -> 31	[key=0,
		edge_type=next,
		label=Next];
	32	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol"];
	32 -> 26	[key=0,
		edge_type=next,
		label=Next];
	33	[contract_name=PERSONAL_BANK,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	34	[contract_name=PERSONAL_BANK,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	33 -> 34	[key=0,
		edge_type=next,
		label=Next];
	35	[contract_name=PERSONAL_BANK,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
revert()()

IRs:
TMP_0(None) = SOLIDITY_CALL revert()()",
		node_expression="revert()()",
		node_irs="TMP_0(None) = SOLIDITY_CALL revert()()",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	34 -> 35	[key=0,
		edge_type=if_true,
		label=True];
	36	[contract_name=PERSONAL_BANK,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	34 -> 36	[key=0,
		edge_type=if_false,
		label=False];
	35 -> 36	[key=0,
		edge_type=next,
		label=Next];
	37	[contract_name=PERSONAL_BANK,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
MinSum = _val

IRs:
MinSum(uint256) := _val(uint256)",
		node_expression="MinSum = _val",
		node_irs="MinSum(uint256) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	36 -> 37	[key=0,
		edge_type=next,
		label=Next];
	38	[contract_name=PERSONAL_BANK,
		function_fullname="SetMinSum(uint256)",
		label="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol_PERSONAL_BANK_SetMinSum(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	38 -> 33	[key=0,
		edge_type=next,
		label=Next];
	39	[contract_name=PERSONAL_BANK,
		function_fullname="SetLogFile(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	40	[contract_name=PERSONAL_BANK,
		function_fullname="SetLogFile(address)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	39 -> 40	[key=0,
		edge_type=next,
		label=Next];
	41	[contract_name=PERSONAL_BANK,
		function_fullname="SetLogFile(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
revert()()

IRs:
TMP_1(None) = SOLIDITY_CALL revert()()",
		node_expression="revert()()",
		node_irs="TMP_1(None) = SOLIDITY_CALL revert()()",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	40 -> 41	[key=0,
		edge_type=if_true,
		label=True];
	42	[contract_name=PERSONAL_BANK,
		function_fullname="SetLogFile(address)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	40 -> 42	[key=0,
		edge_type=if_false,
		label=False];
	41 -> 42	[key=0,
		edge_type=next,
		label=Next];
	43	[contract_name=PERSONAL_BANK,
		function_fullname="SetLogFile(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log = LogFile(_log)

IRs:
TMP_2 = CONVERT _log to LogFile
Log(LogFile) := TMP_2(LogFile)",
		node_expression="Log = LogFile(_log)",
		node_irs="TMP_2 = CONVERT _log to LogFile
Log(LogFile) := TMP_2(LogFile)",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	42 -> 43	[key=0,
		edge_type=next,
		label=Next];
	44	[contract_name=PERSONAL_BANK,
		function_fullname="SetLogFile(address)",
		label="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol_PERSONAL_BANK_SetLogFile(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	44 -> 39	[key=0,
		edge_type=next,
		label=Next];
	45	[contract_name=PERSONAL_BANK,
		function_fullname="Initialized()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	46	[contract_name=PERSONAL_BANK,
		function_fullname="Initialized()",
		label="Node Type: EXPRESSION

EXPRESSION:
intitalized = true

IRs:
intitalized(bool) := True(bool)",
		node_expression="intitalized = true",
		node_irs="intitalized(bool) := True(bool)",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	45 -> 46	[key=0,
		edge_type=next,
		label=Next];
	47	[contract_name=PERSONAL_BANK,
		function_fullname="Initialized()",
		label="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol_PERSONAL_BANK_Initialized()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	47 -> 45	[key=0,
		edge_type=next,
		label=Next];
	48	[contract_name=PERSONAL_BANK,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	49	[contract_name=PERSONAL_BANK,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	48 -> 49	[key=0,
		edge_type=next,
		label=Next];
	50	[contract_name=PERSONAL_BANK,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="Log.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	49 -> 50	[key=0,
		edge_type=next,
		label=Next];
	51	[contract_name=PERSONAL_BANK,
		function_fullname="Deposit()",
		label="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol_PERSONAL_BANK_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	51 -> 48	[key=0,
		edge_type=next,
		label=Next];
	52	[contract_name=PERSONAL_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	53	[contract_name=PERSONAL_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
balances[msg.sender] >= MinSum && balances[msg.sender] >= _am

IRs:
REF_2(uint256) -> balances[msg.sender]
\
TMP_4(bool) = REF_2 >= MinSum
REF_3(uint256) -> balances[msg.sender]
TMP_5(bool) = REF_3 >= _am
TMP_6(bool) = TMP_4 && TMP_5
CONDITION \
TMP_6",
		node_expression="balances[msg.sender] >= MinSum && balances[msg.sender] >= _am",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_4(bool) = REF_2 >= MinSum
REF_3(uint256) -> balances[msg.sender]
TMP_5(bool) = REF_3 >= _\
am
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_type=IF,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	52 -> 53	[key=0,
		edge_type=next,
		label=Next];
	54	[contract_name=PERSONAL_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_8",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_8",
		node_type=IF,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	53 -> 54	[key=0,
		edge_type=if_true,
		label=True];
	58	[contract_name=PERSONAL_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	53 -> 58	[key=0,
		edge_type=if_false,
		label=False];
	55	[contract_name=PERSONAL_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_6(uint256) -> balances[msg.sender]
REF_6(-> balances) = \
REF_6 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_6(uint256) -> balances[msg.sender]
REF_6(-> balances) = REF_6 - _am",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	54 -> 55	[key=0,
		edge_type=if_true,
		label=True];
	57	[contract_name=PERSONAL_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	54 -> 57	[key=0,
		edge_type=if_false,
		label=False];
	56	[contract_name=PERSONAL_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="Log.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	55 -> 56	[key=0,
		edge_type=next,
		label=Next];
	56 -> 57	[key=0,
		edge_type=next,
		label=Next];
	57 -> 58	[key=0,
		edge_type=next,
		label=Next];
	59	[contract_name=PERSONAL_BANK,
		function_fullname="Collect(uint256)",
		label="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol_PERSONAL_BANK_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	59 -> 52	[key=0,
		edge_type=next,
		label=Next];
	60	[contract_name=PERSONAL_BANK,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	61	[contract_name=PERSONAL_BANK,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Deposit()

IRs:
INTERNAL_CALL, PERSONAL_BANK.Deposit()()",
		node_expression="Deposit()",
		node_irs="INTERNAL_CALL, PERSONAL_BANK.Deposit()()",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	60 -> 61	[key=0,
		edge_type=next,
		label=Next];
	62	[contract_name=PERSONAL_BANK,
		function_fullname="fallback()",
		label="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol_PERSONAL_BANK_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	62 -> 60	[key=0,
		edge_type=next,
		label=Next];
	63	[contract_name=PERSONAL_BANK,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinSum = 1000000000000000000

IRs:
MinSum(uint256) := 1000000000000000000(uint256)",
		node_expression="MinSum = 1000000000000000000",
		node_irs="MinSum(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	64	[contract_name=PERSONAL_BANK,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46)

IRs:
TMP_11 = CONVERT 25842329768201807725816329055814639997676617542 \
to LogFile
Log(LogFile) := TMP_11(LogFile)",
		node_expression="Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46)",
		node_irs="TMP_11 = CONVERT 25842329768201807725816329055814639997676617542 to LogFile
Log(LogFile) := TMP_11(LogFile)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	63 -> 64	[key=0,
		edge_type=next,
		label=Next];
	65	[contract_name=PERSONAL_BANK,
		function_fullname="slitherConstructorVariables()",
		label="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol_PERSONAL_BANK_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	65 -> 63	[key=0,
		edge_type=next,
		label=Next];
	66	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	67	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_8(address) -> LastMsg.Sender
REF_8 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_8(address) -> LastMsg.Sender
REF_8 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	66 -> 67	[key=0,
		edge_type=next,
		label=Next];
	68	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_9(uint256) -> LastMsg.Time
REF_9 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_9(uint256) -> LastMsg.Time
REF_9 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	67 -> 68	[key=0,
		edge_type=next,
		label=Next];
	69	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_10(uint256) -> LastMsg.Val
REF_10 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_10(uint256) -> LastMsg.Val
REF_10 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	68 -> 69	[key=0,
		edge_type=next,
		label=Next];
	70	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_11(string) -> LastMsg.Data
REF_11 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_11(string) -> LastMsg.Data
REF_11 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	69 -> 70	[key=0,
		edge_type=next,
		label=Next];
	71	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_13 -> LENGTH History
TMP_13(uint256) := REF_13(uint256)
TMP_14(\
uint256) = TMP_13 + 1
REF_13 (->History) := TMP_14(uint256)
REF_14(LogFile.Message) -> History[TMP_13]
REF_14 (->History) := LastMsg(\
LogFile.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_13 -> LENGTH History
TMP_13(uint256) := REF_13(uint256)
TMP_14(uint256) = TMP_13 + 1
REF_13 (->History) := TMP_14(uint256)
REF_\
14(LogFile.Message) -> History[TMP_13]
REF_14 (->History) := LastMsg(LogFile.Message)",
		node_type=EXPRESSION,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	70 -> 71	[key=0,
		edge_type=next,
		label=Next];
	72	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol_LogFile_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol"];
	72 -> 66	[key=0,
		edge_type=next,
		label=Next];
	73	[contract_name=ETH_VAULT,
		function_fullname="ETH_VAULT(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	74	[contract_name=ETH_VAULT,
		function_fullname="ETH_VAULT(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog = Log(_log)

IRs:
TMP_0 = CONVERT _log to Log
TransferLog(Log) := TMP_0(Log)",
		node_expression="TransferLog = Log(_log)",
		node_irs="TMP_0 = CONVERT _log to Log
TransferLog(Log) := TMP_0(Log)",
		node_type=EXPRESSION,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	73 -> 74	[key=0,
		edge_type=next,
		label=Next];
	75	[contract_name=ETH_VAULT,
		function_fullname="ETH_VAULT(address)",
		label="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol_ETH_VAULT_ETH_VAULT(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	75 -> 73	[key=0,
		edge_type=next,
		label=Next];
	76	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	77	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="Node Type: IF

EXPRESSION:
msg.value > MinDeposit

IRs:
TMP_1(bool) = msg.value > MinDeposit
CONDITION TMP_1",
		node_expression="msg.value > MinDeposit",
		node_irs="TMP_1(bool) = msg.value > MinDeposit
CONDITION TMP_1",
		node_type=IF,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	76 -> 77	[key=0,
		edge_type=next,
		label=Next];
	78	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	77 -> 78	[key=0,
		edge_type=if_true,
		label=True];
	80	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	77 -> 80	[key=0,
		edge_type=if_false,
		label=False];
	79	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,msg.value,Deposit)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(\
Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_expression="TransferLog.AddMessage(msg.sender,msg.value,Deposit)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_type=EXPRESSION,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	78 -> 79	[key=0,
		edge_type=next,
		label=Next];
	79 -> 80	[key=0,
		edge_type=next,
		label=Next];
	81	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol_ETH_VAULT_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	81 -> 76	[key=0,
		edge_type=next,
		label=Next];
	82	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	83	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
_am <= balances[msg.sender]

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_3(bool) = _am <= REF_2
CONDITION \
TMP_3",
		node_expression="_am <= balances[msg.sender]",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_3(bool) = _am <= REF_2
CONDITION TMP_3",
		node_type=IF,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	82 -> 83	[key=0,
		edge_type=next,
		label=Next];
	84	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_5(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_5",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_5(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_5",
		node_type=IF,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	83 -> 84	[key=0,
		edge_type=if_true,
		label=True];
	88	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	83 -> 88	[key=0,
		edge_type=if_false,
		label=False];
	85	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = \
REF_5 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - _am",
		node_type=EXPRESSION,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	84 -> 85	[key=0,
		edge_type=if_true,
		label=True];
	87	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	84 -> 87	[key=0,
		edge_type=if_false,
		label=False];
	86	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,_am,CashOut)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(Log), \
function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_expression="TransferLog.AddMessage(msg.sender,_am,CashOut)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_type=EXPRESSION,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	85 -> 86	[key=0,
		edge_type=next,
		label=Next];
	86 -> 87	[key=0,
		edge_type=next,
		label=Next];
	87 -> 88	[key=0,
		edge_type=next,
		label=Next];
	89	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol_ETH_VAULT_CashOut(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	89 -> 82	[key=0,
		edge_type=next,
		label=Next];
	90	[contract_name=ETH_VAULT,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	91	[contract_name=ETH_VAULT,
		function_fullname="fallback()",
		label="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol_ETH_VAULT_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	91 -> 90	[key=0,
		edge_type=next,
		label=Next];
	92	[contract_name=ETH_VAULT,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinDeposit = 1000000000000000000

IRs:
MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_expression="MinDeposit = 1000000000000000000",
		node_irs="MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	93	[contract_name=ETH_VAULT,
		function_fullname="slitherConstructorVariables()",
		label="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol_ETH_VAULT_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	93 -> 92	[key=0,
		edge_type=next,
		label=Next];
	94	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	95	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	94 -> 95	[key=0,
		edge_type=next,
		label=Next];
	96	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	95 -> 96	[key=0,
		edge_type=next,
		label=Next];
	97	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	96 -> 97	[key=0,
		edge_type=next,
		label=Next];
	98	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	97 -> 98	[key=0,
		edge_type=next,
		label=Next];
	99	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_12 -> LENGTH History
TMP_8(uint256) := REF_12(uint256)
TMP_9(\
uint256) = TMP_8 + 1
REF_12 (->History) := TMP_9(uint256)
REF_13(Log.Message) -> History[TMP_8]
REF_13 (->History) := LastMsg(Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_12 -> LENGTH History
TMP_8(uint256) := REF_12(uint256)
TMP_9(uint256) = TMP_8 + 1
REF_12 (->History) := TMP_9(uint256)
REF_13(\
Log.Message) -> History[TMP_8]
REF_13 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	98 -> 99	[key=0,
		edge_type=next,
		label=Next];
	100	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol"];
	100 -> 94	[key=0,
		edge_type=next,
		label=Next];
	101	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	102	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(! intitalized)

IRs:
TMP_0 = ! intitalized 
TMP_1(None) = SOLIDITY_CALL require(\
bool)(TMP_0)",
		node_expression="require(bool)(! intitalized)",
		node_irs="TMP_0 = ! intitalized 
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	101 -> 102	[key=0,
		edge_type=next,
		label=Next];
	103	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
MinSum = _val

IRs:
MinSum(uint256) := _val(uint256)",
		node_expression="MinSum = _val",
		node_irs="MinSum(uint256) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	102 -> 103	[key=0,
		edge_type=next,
		label=Next];
	104	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="SetMinSum(uint256)",
		label="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol_PRIVATE_ETH_CELL_SetMinSum(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	104 -> 101	[key=0,
		edge_type=next,
		label=Next];
	105	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="SetLogFile(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	106	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="SetLogFile(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(! intitalized)

IRs:
TMP_2 = ! intitalized 
TMP_3(None) = SOLIDITY_CALL require(\
bool)(TMP_2)",
		node_expression="require(bool)(! intitalized)",
		node_irs="TMP_2 = ! intitalized 
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	105 -> 106	[key=0,
		edge_type=next,
		label=Next];
	107	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="SetLogFile(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log = LogFile(_log)

IRs:
TMP_4 = CONVERT _log to LogFile
Log(LogFile) := TMP_4(LogFile)",
		node_expression="Log = LogFile(_log)",
		node_irs="TMP_4 = CONVERT _log to LogFile
Log(LogFile) := TMP_4(LogFile)",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	106 -> 107	[key=0,
		edge_type=next,
		label=Next];
	108	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="SetLogFile(address)",
		label="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol_PRIVATE_ETH_CELL_SetLogFile(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	108 -> 105	[key=0,
		edge_type=next,
		label=Next];
	109	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Initialized()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	110	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Initialized()",
		label="Node Type: EXPRESSION

EXPRESSION:
intitalized = true

IRs:
intitalized(bool) := True(bool)",
		node_expression="intitalized = true",
		node_irs="intitalized(bool) := True(bool)",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	109 -> 110	[key=0,
		edge_type=next,
		label=Next];
	111	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Initialized()",
		label="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol_PRIVATE_ETH_CELL_Initialized()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	111 -> 109	[key=0,
		edge_type=next,
		label=Next];
	112	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	113	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	112 -> 113	[key=0,
		edge_type=next,
		label=Next];
	114	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="Log.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	113 -> 114	[key=0,
		edge_type=next,
		label=Next];
	115	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Deposit()",
		label="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol_PRIVATE_ETH_CELL_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	115 -> 112	[key=0,
		edge_type=next,
		label=Next];
	116	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	117	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
balances[msg.sender] >= MinSum && balances[msg.sender] >= _am

IRs:
REF_2(uint256) -> balances[msg.sender]
\
TMP_6(bool) = REF_2 >= MinSum
REF_3(uint256) -> balances[msg.sender]
TMP_7(bool) = REF_3 >= _am
TMP_8(bool) = TMP_6 && TMP_7
CONDITION \
TMP_8",
		node_expression="balances[msg.sender] >= MinSum && balances[msg.sender] >= _am",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_6(bool) = REF_2 >= MinSum
REF_3(uint256) -> balances[msg.sender]
TMP_7(bool) = REF_3 >= _\
am
TMP_8(bool) = TMP_6 && TMP_7
CONDITION TMP_8",
		node_type=IF,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	116 -> 117	[key=0,
		edge_type=next,
		label=Next];
	118	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_10(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_10",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_10(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_10",
		node_type=IF,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	117 -> 118	[key=0,
		edge_type=if_true,
		label=True];
	122	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	117 -> 122	[key=0,
		edge_type=if_false,
		label=False];
	119	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_6(uint256) -> balances[msg.sender]
REF_6(-> balances) = \
REF_6 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_6(uint256) -> balances[msg.sender]
REF_6(-> balances) = REF_6 - _am",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	118 -> 119	[key=0,
		edge_type=if_true,
		label=True];
	121	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	118 -> 121	[key=0,
		edge_type=if_false,
		label=False];
	120	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="Log.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	119 -> 120	[key=0,
		edge_type=next,
		label=Next];
	120 -> 121	[key=0,
		edge_type=next,
		label=Next];
	121 -> 122	[key=0,
		edge_type=next,
		label=Next];
	123	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="Collect(uint256)",
		label="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol_PRIVATE_ETH_CELL_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	123 -> 116	[key=0,
		edge_type=next,
		label=Next];
	124	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	125	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Deposit()

IRs:
INTERNAL_CALL, PRIVATE_ETH_CELL.Deposit()()",
		node_expression="Deposit()",
		node_irs="INTERNAL_CALL, PRIVATE_ETH_CELL.Deposit()()",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	124 -> 125	[key=0,
		edge_type=next,
		label=Next];
	126	[contract_name=PRIVATE_ETH_CELL,
		function_fullname="fallback()",
		label="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol_PRIVATE_ETH_CELL_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	126 -> 124	[key=0,
		edge_type=next,
		label=Next];
	127	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	128	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_8(address) -> LastMsg.Sender
REF_8 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_8(address) -> LastMsg.Sender
REF_8 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	127 -> 128	[key=0,
		edge_type=next,
		label=Next];
	129	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_9(uint256) -> LastMsg.Time
REF_9 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_9(uint256) -> LastMsg.Time
REF_9 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	128 -> 129	[key=0,
		edge_type=next,
		label=Next];
	130	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_10(uint256) -> LastMsg.Val
REF_10 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_10(uint256) -> LastMsg.Val
REF_10 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	129 -> 130	[key=0,
		edge_type=next,
		label=Next];
	131	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_11(string) -> LastMsg.Data
REF_11 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_11(string) -> LastMsg.Data
REF_11 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	130 -> 131	[key=0,
		edge_type=next,
		label=Next];
	132	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_13 -> LENGTH History
TMP_14(uint256) := REF_13(uint256)
TMP_15(\
uint256) = TMP_14 + 1
REF_13 (->History) := TMP_15(uint256)
REF_14(LogFile.Message) -> History[TMP_14]
REF_14 (->History) := LastMsg(\
LogFile.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_13 -> LENGTH History
TMP_14(uint256) := REF_13(uint256)
TMP_15(uint256) = TMP_14 + 1
REF_13 (->History) := TMP_15(uint256)
REF_\
14(LogFile.Message) -> History[TMP_14]
REF_14 (->History) := LastMsg(LogFile.Message)",
		node_type=EXPRESSION,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	131 -> 132	[key=0,
		edge_type=next,
		label=Next];
	133	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol_LogFile_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol"];
	133 -> 127	[key=0,
		edge_type=next,
		label=Next];
	134	[contract_name=PrivateBank,
		function_fullname="PrivateBank(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	135	[contract_name=PrivateBank,
		function_fullname="PrivateBank(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog = Log(_log)

IRs:
TMP_0 = CONVERT _log to Log
TransferLog(Log) := TMP_0(Log)",
		node_expression="TransferLog = Log(_log)",
		node_irs="TMP_0 = CONVERT _log to Log
TransferLog(Log) := TMP_0(Log)",
		node_type=EXPRESSION,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	134 -> 135	[key=0,
		edge_type=next,
		label=Next];
	136	[contract_name=PrivateBank,
		function_fullname="PrivateBank(address)",
		label="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol_PrivateBank_PrivateBank(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	136 -> 134	[key=0,
		edge_type=next,
		label=Next];
	137	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	138	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="Node Type: IF

EXPRESSION:
msg.value >= MinDeposit

IRs:
TMP_1(bool) = msg.value >= MinDeposit
CONDITION TMP_1",
		node_expression="msg.value >= MinDeposit",
		node_irs="TMP_1(bool) = msg.value >= MinDeposit
CONDITION TMP_1",
		node_type=IF,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	137 -> 138	[key=0,
		edge_type=next,
		label=Next];
	139	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	138 -> 139	[key=0,
		edge_type=if_true,
		label=True];
	141	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	138 -> 141	[key=0,
		edge_type=if_false,
		label=False];
	140	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,msg.value,Deposit)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(\
Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_expression="TransferLog.AddMessage(msg.sender,msg.value,Deposit)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_type=EXPRESSION,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	139 -> 140	[key=0,
		edge_type=next,
		label=Next];
	140 -> 141	[key=0,
		edge_type=next,
		label=Next];
	142	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol_PrivateBank_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	142 -> 137	[key=0,
		edge_type=next,
		label=Next];
	143	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	144	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
_am <= balances[msg.sender]

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_3(bool) = _am <= REF_2
CONDITION \
TMP_3",
		node_expression="_am <= balances[msg.sender]",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_3(bool) = _am <= REF_2
CONDITION TMP_3",
		node_type=IF,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	143 -> 144	[key=0,
		edge_type=next,
		label=Next];
	145	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_5(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_5",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_5(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_5",
		node_type=IF,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	144 -> 145	[key=0,
		edge_type=if_true,
		label=True];
	149	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	144 -> 149	[key=0,
		edge_type=if_false,
		label=False];
	146	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = \
REF_5 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - _am",
		node_type=EXPRESSION,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	145 -> 146	[key=0,
		edge_type=if_true,
		label=True];
	148	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	145 -> 148	[key=0,
		edge_type=if_false,
		label=False];
	147	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,_am,CashOut)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(Log), \
function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_expression="TransferLog.AddMessage(msg.sender,_am,CashOut)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_type=EXPRESSION,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	146 -> 147	[key=0,
		edge_type=next,
		label=Next];
	147 -> 148	[key=0,
		edge_type=next,
		label=Next];
	148 -> 149	[key=0,
		edge_type=next,
		label=Next];
	150	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol_PrivateBank_CashOut(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	150 -> 143	[key=0,
		edge_type=next,
		label=Next];
	151	[contract_name=PrivateBank,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	152	[contract_name=PrivateBank,
		function_fullname="fallback()",
		label="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol_PrivateBank_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	152 -> 151	[key=0,
		edge_type=next,
		label=Next];
	153	[contract_name=PrivateBank,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinDeposit = 1000000000000000000

IRs:
MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_expression="MinDeposit = 1000000000000000000",
		node_irs="MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	154	[contract_name=PrivateBank,
		function_fullname="slitherConstructorVariables()",
		label="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol_PrivateBank_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	154 -> 153	[key=0,
		edge_type=next,
		label=Next];
	155	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	156	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	155 -> 156	[key=0,
		edge_type=next,
		label=Next];
	157	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	156 -> 157	[key=0,
		edge_type=next,
		label=Next];
	158	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	157 -> 158	[key=0,
		edge_type=next,
		label=Next];
	159	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	158 -> 159	[key=0,
		edge_type=next,
		label=Next];
	160	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_12 -> LENGTH History
TMP_8(uint256) := REF_12(uint256)
TMP_9(\
uint256) = TMP_8 + 1
REF_12 (->History) := TMP_9(uint256)
REF_13(Log.Message) -> History[TMP_8]
REF_13 (->History) := LastMsg(Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_12 -> LENGTH History
TMP_8(uint256) := REF_12(uint256)
TMP_9(uint256) = TMP_8 + 1
REF_12 (->History) := TMP_9(uint256)
REF_13(\
Log.Message) -> History[TMP_8]
REF_13 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	159 -> 160	[key=0,
		edge_type=next,
		label=Next];
	161	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol"];
	161 -> 155	[key=0,
		edge_type=next,
		label=Next];
	162	[contract_name=MONEY_BOX,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	163	[contract_name=MONEY_BOX,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	162 -> 163	[key=0,
		edge_type=next,
		label=Next];
	164	[contract_name=MONEY_BOX,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: THROW
",
		node_expression=None,
		node_irs=None,
		node_type=THROW,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	163 -> 164	[key=0,
		edge_type=if_true,
		label=True];
	165	[contract_name=MONEY_BOX,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	163 -> 165	[key=0,
		edge_type=if_false,
		label=False];
	166	[contract_name=MONEY_BOX,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
MinSum = _val

IRs:
MinSum(uint256) := _val(uint256)",
		node_expression="MinSum = _val",
		node_irs="MinSum(uint256) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	165 -> 166	[key=0,
		edge_type=next,
		label=Next];
	167	[contract_name=MONEY_BOX,
		function_fullname="SetMinSum(uint256)",
		label="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol_MONEY_BOX_SetMinSum(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	167 -> 162	[key=0,
		edge_type=next,
		label=Next];
	168	[contract_name=MONEY_BOX,
		function_fullname="SetLogFile(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	169	[contract_name=MONEY_BOX,
		function_fullname="SetLogFile(address)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	168 -> 169	[key=0,
		edge_type=next,
		label=Next];
	170	[contract_name=MONEY_BOX,
		function_fullname="SetLogFile(address)",
		label="Node Type: THROW
",
		node_expression=None,
		node_irs=None,
		node_type=THROW,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	169 -> 170	[key=0,
		edge_type=if_true,
		label=True];
	171	[contract_name=MONEY_BOX,
		function_fullname="SetLogFile(address)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	169 -> 171	[key=0,
		edge_type=if_false,
		label=False];
	172	[contract_name=MONEY_BOX,
		function_fullname="SetLogFile(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile = Log(_log)

IRs:
TMP_0 = CONVERT _log to Log
LogFile(Log) := TMP_0(Log)",
		node_expression="LogFile = Log(_log)",
		node_irs="TMP_0 = CONVERT _log to Log
LogFile(Log) := TMP_0(Log)",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	171 -> 172	[key=0,
		edge_type=next,
		label=Next];
	173	[contract_name=MONEY_BOX,
		function_fullname="SetLogFile(address)",
		label="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol_MONEY_BOX_SetLogFile(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	173 -> 168	[key=0,
		edge_type=next,
		label=Next];
	174	[contract_name=MONEY_BOX,
		function_fullname="Initialized()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	175	[contract_name=MONEY_BOX,
		function_fullname="Initialized()",
		label="Node Type: EXPRESSION

EXPRESSION:
intitalized = true

IRs:
intitalized(bool) := True(bool)",
		node_expression="intitalized = true",
		node_irs="intitalized(bool) := True(bool)",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	174 -> 175	[key=0,
		edge_type=next,
		label=Next];
	176	[contract_name=MONEY_BOX,
		function_fullname="Initialized()",
		label="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol_MONEY_BOX_Initialized()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	176 -> 174	[key=0,
		edge_type=next,
		label=Next];
	177	[contract_name=MONEY_BOX,
		function_fullname="Put(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	178	[contract_name=MONEY_BOX,
		function_fullname="Put(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_0(MONEY_BOX.Holder) -> Acc[msg.sender]
acc(MONEY_BOX.Holder) := \
REF_0(MONEY_BOX.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_0(MONEY_BOX.Holder) -> Acc[msg.sender]
acc(MONEY_BOX.Holder) := REF_0(MONEY_BOX.Holder)",
		node_type="NEW VARIABLE",
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	177 -> 178	[key=0,
		edge_type=next,
		label=Next];
	179	[contract_name=MONEY_BOX,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance += msg.value

IRs:
REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_expression="acc.balance += msg.value",
		node_irs="REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	178 -> 179	[key=0,
		edge_type=next,
		label=Next];
	180	[contract_name=MONEY_BOX,
		function_fullname="Put(uint256)",
		label="Node Type: IF

EXPRESSION:
now + _lockTime > acc.unlockTime

IRs:
TMP_1(uint256) = now + _lockTime
REF_2(uint256) -> acc.unlockTime
\
TMP_2(bool) = TMP_1 > REF_2
CONDITION TMP_2",
		node_expression="now + _lockTime > acc.unlockTime",
		node_irs="TMP_1(uint256) = now + _lockTime
REF_2(uint256) -> acc.unlockTime
TMP_2(bool) = TMP_1 > REF_2
CONDITION TMP_2",
		node_type=IF,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	179 -> 180	[key=0,
		edge_type=next,
		label=Next];
	181	[contract_name=MONEY_BOX,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = now + _lockTime

IRs:
REF_3(uint256) -> acc.unlockTime
TMP_3(uint256) = now + _\
lockTime
REF_3 (->acc) := TMP_3(uint256)",
		node_expression="acc.unlockTime = now + _lockTime",
		node_irs="REF_3(uint256) -> acc.unlockTime
TMP_3(uint256) = now + _lockTime
REF_3 (->acc) := TMP_3(uint256)",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	180 -> 181	[key=0,
		edge_type=if_true,
		label=True];
	182	[contract_name=MONEY_BOX,
		function_fullname="Put(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	180 -> 182	[key=0,
		edge_type=if_false,
		label=False];
	181 -> 182	[key=0,
		edge_type=next,
		label=Next];
	183	[contract_name=MONEY_BOX,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="LogFile.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	182 -> 183	[key=0,
		edge_type=next,
		label=Next];
	184	[contract_name=MONEY_BOX,
		function_fullname="Put(uint256)",
		label="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol_MONEY_BOX_Put(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	184 -> 177	[key=0,
		edge_type=next,
		label=Next];
	185	[contract_name=MONEY_BOX,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	186	[contract_name=MONEY_BOX,
		function_fullname="Collect(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_5(MONEY_BOX.Holder) -> Acc[msg.sender]
acc(MONEY_BOX.Holder) := \
REF_5(MONEY_BOX.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_5(MONEY_BOX.Holder) -> Acc[msg.sender]
acc(MONEY_BOX.Holder) := REF_5(MONEY_BOX.Holder)",
		node_type="NEW VARIABLE",
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	185 -> 186	[key=0,
		edge_type=next,
		label=Next];
	187	[contract_name=MONEY_BOX,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime

IRs:
REF_6(uint256) -> acc.balance
\
TMP_5(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_6(bool) = REF_7 >= _am
TMP_7(bool) = TMP_5 && TMP_6
REF_8(uint256) \
-> acc.unlockTime
TMP_8(bool) = now > REF_8
TMP_9(bool) = TMP_7 && TMP_8
CONDITION TMP_9",
		node_expression="acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime",
		node_irs="REF_6(uint256) -> acc.balance
TMP_5(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_6(bool) = REF_7 >= _am
TMP_7(bool) = \
TMP_5 && TMP_6
REF_8(uint256) -> acc.unlockTime
TMP_8(bool) = now > REF_8
TMP_9(bool) = TMP_7 && TMP_8
CONDITION TMP_9",
		node_type=IF,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	186 -> 187	[key=0,
		edge_type=next,
		label=Next];
	188	[contract_name=MONEY_BOX,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_11(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_11",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_11(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_11",
		node_type=IF,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	187 -> 188	[key=0,
		edge_type=if_true,
		label=True];
	192	[contract_name=MONEY_BOX,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	187 -> 192	[key=0,
		edge_type=if_false,
		label=False];
	189	[contract_name=MONEY_BOX,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance -= _am

IRs:
REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_expression="acc.balance -= _am",
		node_irs="REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	188 -> 189	[key=0,
		edge_type=if_true,
		label=True];
	191	[contract_name=MONEY_BOX,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	188 -> 191	[key=0,
		edge_type=if_false,
		label=False];
	190	[contract_name=MONEY_BOX,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="LogFile.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	189 -> 190	[key=0,
		edge_type=next,
		label=Next];
	190 -> 191	[key=0,
		edge_type=next,
		label=Next];
	191 -> 192	[key=0,
		edge_type=next,
		label=Next];
	193	[contract_name=MONEY_BOX,
		function_fullname="Collect(uint256)",
		label="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol_MONEY_BOX_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	193 -> 185	[key=0,
		edge_type=next,
		label=Next];
	194	[contract_name=MONEY_BOX,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	195	[contract_name=MONEY_BOX,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Put(0)

IRs:
INTERNAL_CALL, MONEY_BOX.Put(uint256)(0)",
		node_expression="Put(0)",
		node_irs="INTERNAL_CALL, MONEY_BOX.Put(uint256)(0)",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	194 -> 195	[key=0,
		edge_type=next,
		label=Next];
	196	[contract_name=MONEY_BOX,
		function_fullname="fallback()",
		label="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol_MONEY_BOX_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	196 -> 194	[key=0,
		edge_type=next,
		label=Next];
	197	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	198	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	197 -> 198	[key=0,
		edge_type=next,
		label=Next];
	199	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	198 -> 199	[key=0,
		edge_type=next,
		label=Next];
	200	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	199 -> 200	[key=0,
		edge_type=next,
		label=Next];
	201	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	200 -> 201	[key=0,
		edge_type=next,
		label=Next];
	202	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_18 -> LENGTH History
TMP_15(uint256) := REF_18(uint256)
TMP_16(\
uint256) = TMP_15 + 1
REF_18 (->History) := TMP_16(uint256)
REF_19(Log.Message) -> History[TMP_15]
REF_19 (->History) := LastMsg(\
Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_18 -> LENGTH History
TMP_15(uint256) := REF_18(uint256)
TMP_16(uint256) = TMP_15 + 1
REF_18 (->History) := TMP_16(uint256)
REF_\
19(Log.Message) -> History[TMP_15]
REF_19 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	201 -> 202	[key=0,
		edge_type=next,
		label=Next];
	203	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol"];
	203 -> 197	[key=0,
		edge_type=next,
		label=Next];
	204	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	205	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	204 -> 205	[key=0,
		edge_type=next,
		label=Next];
	206	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
revert()()

IRs:
TMP_0(None) = SOLIDITY_CALL revert()()",
		node_expression="revert()()",
		node_irs="TMP_0(None) = SOLIDITY_CALL revert()()",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	205 -> 206	[key=0,
		edge_type=if_true,
		label=True];
	207	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	205 -> 207	[key=0,
		edge_type=if_false,
		label=False];
	206 -> 207	[key=0,
		edge_type=next,
		label=Next];
	208	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
MinSum = _val

IRs:
MinSum(uint256) := _val(uint256)",
		node_expression="MinSum = _val",
		node_irs="MinSum(uint256) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	207 -> 208	[key=0,
		edge_type=next,
		label=Next];
	209	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetMinSum(uint256)",
		label="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol_ACCURAL_DEPOSIT_SetMinSum(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	209 -> 204	[key=0,
		edge_type=next,
		label=Next];
	210	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetLogFile(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	211	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetLogFile(address)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	210 -> 211	[key=0,
		edge_type=next,
		label=Next];
	212	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetLogFile(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
revert()()

IRs:
TMP_1(None) = SOLIDITY_CALL revert()()",
		node_expression="revert()()",
		node_irs="TMP_1(None) = SOLIDITY_CALL revert()()",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	211 -> 212	[key=0,
		edge_type=if_true,
		label=True];
	213	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetLogFile(address)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	211 -> 213	[key=0,
		edge_type=if_false,
		label=False];
	212 -> 213	[key=0,
		edge_type=next,
		label=Next];
	214	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetLogFile(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log = LogFile(_log)

IRs:
TMP_2 = CONVERT _log to LogFile
Log(LogFile) := TMP_2(LogFile)",
		node_expression="Log = LogFile(_log)",
		node_irs="TMP_2 = CONVERT _log to LogFile
Log(LogFile) := TMP_2(LogFile)",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	213 -> 214	[key=0,
		edge_type=next,
		label=Next];
	215	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="SetLogFile(address)",
		label="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol_ACCURAL_DEPOSIT_SetLogFile(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	215 -> 210	[key=0,
		edge_type=next,
		label=Next];
	216	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Initialized()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	217	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Initialized()",
		label="Node Type: EXPRESSION

EXPRESSION:
intitalized = true

IRs:
intitalized(bool) := True(bool)",
		node_expression="intitalized = true",
		node_irs="intitalized(bool) := True(bool)",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	216 -> 217	[key=0,
		edge_type=next,
		label=Next];
	218	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Initialized()",
		label="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol_ACCURAL_DEPOSIT_Initialized()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	218 -> 216	[key=0,
		edge_type=next,
		label=Next];
	219	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	220	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	219 -> 220	[key=0,
		edge_type=next,
		label=Next];
	221	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="Log.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	220 -> 221	[key=0,
		edge_type=next,
		label=Next];
	222	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Deposit()",
		label="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol_ACCURAL_DEPOSIT_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	222 -> 219	[key=0,
		edge_type=next,
		label=Next];
	223	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	224	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
balances[msg.sender] >= MinSum && balances[msg.sender] >= _am

IRs:
REF_2(uint256) -> balances[msg.sender]
\
TMP_4(bool) = REF_2 >= MinSum
REF_3(uint256) -> balances[msg.sender]
TMP_5(bool) = REF_3 >= _am
TMP_6(bool) = TMP_4 && TMP_5
CONDITION \
TMP_6",
		node_expression="balances[msg.sender] >= MinSum && balances[msg.sender] >= _am",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_4(bool) = REF_2 >= MinSum
REF_3(uint256) -> balances[msg.sender]
TMP_5(bool) = REF_3 >= _\
am
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_type=IF,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	223 -> 224	[key=0,
		edge_type=next,
		label=Next];
	225	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_8",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_8",
		node_type=IF,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	224 -> 225	[key=0,
		edge_type=if_true,
		label=True];
	229	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	224 -> 229	[key=0,
		edge_type=if_false,
		label=False];
	226	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_6(uint256) -> balances[msg.sender]
REF_6(-> balances) = \
REF_6 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_6(uint256) -> balances[msg.sender]
REF_6(-> balances) = REF_6 - _am",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	225 -> 226	[key=0,
		edge_type=if_true,
		label=True];
	228	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	225 -> 228	[key=0,
		edge_type=if_false,
		label=False];
	227	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="Log.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	226 -> 227	[key=0,
		edge_type=next,
		label=Next];
	227 -> 228	[key=0,
		edge_type=next,
		label=Next];
	228 -> 229	[key=0,
		edge_type=next,
		label=Next];
	230	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="Collect(uint256)",
		label="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol_ACCURAL_DEPOSIT_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	230 -> 223	[key=0,
		edge_type=next,
		label=Next];
	231	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	232	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Deposit()

IRs:
INTERNAL_CALL, ACCURAL_DEPOSIT.Deposit()()",
		node_expression="Deposit()",
		node_irs="INTERNAL_CALL, ACCURAL_DEPOSIT.Deposit()()",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	231 -> 232	[key=0,
		edge_type=next,
		label=Next];
	233	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="fallback()",
		label="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol_ACCURAL_DEPOSIT_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	233 -> 231	[key=0,
		edge_type=next,
		label=Next];
	234	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinSum = 1000000000000000000

IRs:
MinSum(uint256) := 1000000000000000000(uint256)",
		node_expression="MinSum = 1000000000000000000",
		node_irs="MinSum(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	235	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46)

IRs:
TMP_11 = CONVERT 25842329768201807725816329055814639997676617542 \
to LogFile
Log(LogFile) := TMP_11(LogFile)",
		node_expression="Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46)",
		node_irs="TMP_11 = CONVERT 25842329768201807725816329055814639997676617542 to LogFile
Log(LogFile) := TMP_11(LogFile)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	234 -> 235	[key=0,
		edge_type=next,
		label=Next];
	236	[contract_name=ACCURAL_DEPOSIT,
		function_fullname="slitherConstructorVariables()",
		label="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol_ACCURAL_DEPOSIT_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	236 -> 234	[key=0,
		edge_type=next,
		label=Next];
	237	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	238	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_8(address) -> LastMsg.Sender
REF_8 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_8(address) -> LastMsg.Sender
REF_8 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	237 -> 238	[key=0,
		edge_type=next,
		label=Next];
	239	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_9(uint256) -> LastMsg.Time
REF_9 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_9(uint256) -> LastMsg.Time
REF_9 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	238 -> 239	[key=0,
		edge_type=next,
		label=Next];
	240	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_10(uint256) -> LastMsg.Val
REF_10 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_10(uint256) -> LastMsg.Val
REF_10 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	239 -> 240	[key=0,
		edge_type=next,
		label=Next];
	241	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_11(string) -> LastMsg.Data
REF_11 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_11(string) -> LastMsg.Data
REF_11 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	240 -> 241	[key=0,
		edge_type=next,
		label=Next];
	242	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_13 -> LENGTH History
TMP_13(uint256) := REF_13(uint256)
TMP_14(\
uint256) = TMP_13 + 1
REF_13 (->History) := TMP_14(uint256)
REF_14(LogFile.Message) -> History[TMP_13]
REF_14 (->History) := LastMsg(\
LogFile.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_13 -> LENGTH History
TMP_13(uint256) := REF_13(uint256)
TMP_14(uint256) = TMP_13 + 1
REF_13 (->History) := TMP_14(uint256)
REF_\
14(LogFile.Message) -> History[TMP_13]
REF_14 (->History) := LastMsg(LogFile.Message)",
		node_type=EXPRESSION,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	241 -> 242	[key=0,
		edge_type=next,
		label=Next];
	243	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol_LogFile_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol"];
	243 -> 237	[key=0,
		edge_type=next,
		label=Next];
	244	[contract_name=Ownable,
		function_fullname="changeOwner(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	246	[contract_name=Ownable,
		function_fullname="changeOwner(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	244 -> 246	[key=0,
		edge_type=next,
		label=Next];
	245	[contract_name=Ownable,
		function_fullname="changeOwner(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
newOwner = addr

IRs:
newOwner(address) := addr(address)",
		node_expression="newOwner = addr",
		node_irs="newOwner(address) := addr(address)",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	246 -> 245	[key=0,
		edge_type=next,
		label=Next];
	247	[contract_name=Ownable,
		function_fullname="changeOwner(address)",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Ownable_changeOwner(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	247 -> 244	[key=0,
		edge_type=next,
		label=Next];
	248	[contract_name=Ownable,
		function_fullname="confirmOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	249	[contract_name=Ownable,
		function_fullname="confirmOwner()",
		label="Node Type: IF

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_1(bool) = msg.sender == newOwner
CONDITION TMP_1",
		node_expression="msg.sender == newOwner",
		node_irs="TMP_1(bool) = msg.sender == newOwner
CONDITION TMP_1",
		node_type=IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	248 -> 249	[key=0,
		edge_type=next,
		label=Next];
	250	[contract_name=Ownable,
		function_fullname="confirmOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)",
		node_expression="owner = newOwner",
		node_irs="owner(address) := newOwner(address)",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	249 -> 250	[key=0,
		edge_type=if_true,
		label=True];
	251	[contract_name=Ownable,
		function_fullname="confirmOwner()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	249 -> 251	[key=0,
		edge_type=if_false,
		label=False];
	250 -> 251	[key=0,
		edge_type=next,
		label=Next];
	252	[contract_name=Ownable,
		function_fullname="confirmOwner()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Ownable_confirmOwner()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	252 -> 248	[key=0,
		edge_type=next,
		label=Next];
	253	[contract_name=Ownable,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)",
		node_expression="owner = msg.sender",
		node_irs="owner(address) := msg.sender(address)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	254	[contract_name=Ownable,
		function_fullname="slitherConstructorVariables()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Ownable_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	254 -> 253	[key=0,
		edge_type=next,
		label=Next];
	255	[contract_name=Ownable,
		function_fullname="onlyOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	256	[contract_name=Ownable,
		function_fullname="onlyOwner()",
		label="Node Type: IF

EXPRESSION:
owner == msg.sender

IRs:
TMP_2(bool) = owner == msg.sender
CONDITION TMP_2",
		node_expression="owner == msg.sender",
		node_irs="TMP_2(bool) = owner == msg.sender
CONDITION TMP_2",
		node_type=IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	255 -> 256	[key=0,
		edge_type=next,
		label=Next];
	257	[contract_name=Ownable,
		function_fullname="onlyOwner()",
		label="Node Type: _
",
		node_expression=None,
		node_irs=None,
		node_type=_,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	256 -> 257	[key=0,
		edge_type=if_true,
		label=True];
	258	[contract_name=Ownable,
		function_fullname="onlyOwner()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	256 -> 258	[key=0,
		edge_type=if_false,
		label=False];
	257 -> 258	[key=0,
		edge_type=next,
		label=Next];
	259	[contract_name=Ownable,
		function_fullname="onlyOwner()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Ownable_onlyOwner()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	259 -> 255	[key=0,
		edge_type=next,
		label=Next];
	260	[contract_name=Token,
		function_fullname="changeOwner(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	262	[contract_name=Token,
		function_fullname="changeOwner(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	260 -> 262	[key=0,
		edge_type=next,
		label=Next];
	261	[contract_name=Token,
		function_fullname="changeOwner(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
newOwner = addr

IRs:
newOwner(address) := addr(address)",
		node_expression="newOwner = addr",
		node_irs="newOwner(address) := addr(address)",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	262 -> 261	[key=0,
		edge_type=next,
		label=Next];
	263	[contract_name=Token,
		function_fullname="changeOwner(address)",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Token_changeOwner(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	263 -> 260	[key=0,
		edge_type=next,
		label=Next];
	264	[contract_name=Token,
		function_fullname="confirmOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	265	[contract_name=Token,
		function_fullname="confirmOwner()",
		label="Node Type: IF

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_4(bool) = msg.sender == newOwner
CONDITION TMP_4",
		node_expression="msg.sender == newOwner",
		node_irs="TMP_4(bool) = msg.sender == newOwner
CONDITION TMP_4",
		node_type=IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	264 -> 265	[key=0,
		edge_type=next,
		label=Next];
	266	[contract_name=Token,
		function_fullname="confirmOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)",
		node_expression="owner = newOwner",
		node_irs="owner(address) := newOwner(address)",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	265 -> 266	[key=0,
		edge_type=if_true,
		label=True];
	267	[contract_name=Token,
		function_fullname="confirmOwner()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	265 -> 267	[key=0,
		edge_type=if_false,
		label=False];
	266 -> 267	[key=0,
		edge_type=next,
		label=Next];
	268	[contract_name=Token,
		function_fullname="confirmOwner()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Token_confirmOwner()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	268 -> 264	[key=0,
		edge_type=next,
		label=Next];
	269	[contract_name=Token,
		function_fullname="WithdrawToken(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	271	[contract_name=Token,
		function_fullname="WithdrawToken(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	269 -> 271	[key=0,
		edge_type=next,
		label=Next];
	270	[contract_name=Token,
		function_fullname="WithdrawToken(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
token.call(bytes4(sha3()(transfer(address,uint256))),to,amount)

IRs:
TMP_5(bytes32) = SOLIDITY_\
CALL sha3()(transfer(address,uint256))
TMP_6 = CONVERT TMP_5 to bytes4
TMP_7(bool) = LOW_LEVEL_CALL, dest:token, function:call, \
arguments:['TMP_6', 'to', 'amount']  ",
		node_expression="token.call(bytes4(sha3()(transfer(address,uint256))),to,amount)",
		node_irs="TMP_5(bytes32) = SOLIDITY_CALL sha3()(transfer(address,uint256))
TMP_6 = CONVERT TMP_5 to bytes4
TMP_7(bool) = LOW_LEVEL_CALL, dest:\
token, function:call, arguments:['TMP_6', 'to', 'amount']  ",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	271 -> 270	[key=0,
		edge_type=next,
		label=Next];
	272	[contract_name=Token,
		function_fullname="WithdrawToken(address,uint256,address)",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Token_WithdrawToken(address,uint256,address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	272 -> 269	[key=0,
		edge_type=next,
		label=Next];
	273	[contract_name=Token,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)",
		node_expression="owner = msg.sender",
		node_irs="owner(address) := msg.sender(address)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	274	[contract_name=Token,
		function_fullname="slitherConstructorVariables()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Token_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	274 -> 273	[key=0,
		edge_type=next,
		label=Next];
	275	[contract_name=Token,
		function_fullname="onlyOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	276	[contract_name=Token,
		function_fullname="onlyOwner()",
		label="Node Type: IF

EXPRESSION:
owner == msg.sender

IRs:
TMP_9(bool) = owner == msg.sender
CONDITION TMP_9",
		node_expression="owner == msg.sender",
		node_irs="TMP_9(bool) = owner == msg.sender
CONDITION TMP_9",
		node_type=IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	275 -> 276	[key=0,
		edge_type=next,
		label=Next];
	277	[contract_name=Token,
		function_fullname="onlyOwner()",
		label="Node Type: _
",
		node_expression=None,
		node_irs=None,
		node_type=_,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	276 -> 277	[key=0,
		edge_type=if_true,
		label=True];
	278	[contract_name=Token,
		function_fullname="onlyOwner()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	276 -> 278	[key=0,
		edge_type=if_false,
		label=False];
	277 -> 278	[key=0,
		edge_type=next,
		label=Next];
	279	[contract_name=Token,
		function_fullname="onlyOwner()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Token_onlyOwner()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	279 -> 275	[key=0,
		edge_type=next,
		label=Next];
	280	[contract_name=TokenBank,
		function_fullname="WithdrawToken(address,uint256,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	282	[contract_name=TokenBank,
		function_fullname="WithdrawToken(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	280 -> 282	[key=0,
		edge_type=next,
		label=Next];
	281	[contract_name=TokenBank,
		function_fullname="WithdrawToken(address,uint256,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
token.call(bytes4(sha3()(transfer(address,uint256))),to,amount)

IRs:
TMP_10(bytes32) = SOLIDITY_\
CALL sha3()(transfer(address,uint256))
TMP_11 = CONVERT TMP_10 to bytes4
TMP_12(bool) = LOW_LEVEL_CALL, dest:token, function:call, \
arguments:['TMP_11', 'to', 'amount']  ",
		node_expression="token.call(bytes4(sha3()(transfer(address,uint256))),to,amount)",
		node_irs="TMP_10(bytes32) = SOLIDITY_CALL sha3()(transfer(address,uint256))
TMP_11 = CONVERT TMP_10 to bytes4
TMP_12(bool) = LOW_LEVEL_CALL, \
dest:token, function:call, arguments:['TMP_11', 'to', 'amount']  ",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	282 -> 281	[key=0,
		edge_type=next,
		label=Next];
	283	[contract_name=TokenBank,
		function_fullname="WithdrawToken(address,uint256,address)",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank_WithdrawToken(address,uint256,address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	283 -> 280	[key=0,
		edge_type=next,
		label=Next];
	284	[contract_name=TokenBank,
		function_fullname="changeOwner(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	286	[contract_name=TokenBank,
		function_fullname="changeOwner(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	284 -> 286	[key=0,
		edge_type=next,
		label=Next];
	285	[contract_name=TokenBank,
		function_fullname="changeOwner(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
newOwner = addr

IRs:
newOwner(address) := addr(address)",
		node_expression="newOwner = addr",
		node_irs="newOwner(address) := addr(address)",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	286 -> 285	[key=0,
		edge_type=next,
		label=Next];
	287	[contract_name=TokenBank,
		function_fullname="changeOwner(address)",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank_changeOwner(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	287 -> 284	[key=0,
		edge_type=next,
		label=Next];
	288	[contract_name=TokenBank,
		function_fullname="confirmOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	289	[contract_name=TokenBank,
		function_fullname="confirmOwner()",
		label="Node Type: IF

EXPRESSION:
msg.sender == newOwner

IRs:
TMP_15(bool) = msg.sender == newOwner
CONDITION TMP_15",
		node_expression="msg.sender == newOwner",
		node_irs="TMP_15(bool) = msg.sender == newOwner
CONDITION TMP_15",
		node_type=IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	288 -> 289	[key=0,
		edge_type=next,
		label=Next];
	290	[contract_name=TokenBank,
		function_fullname="confirmOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)",
		node_expression="owner = newOwner",
		node_irs="owner(address) := newOwner(address)",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	289 -> 290	[key=0,
		edge_type=if_true,
		label=True];
	291	[contract_name=TokenBank,
		function_fullname="confirmOwner()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	289 -> 291	[key=0,
		edge_type=if_false,
		label=False];
	290 -> 291	[key=0,
		edge_type=next,
		label=Next];
	292	[contract_name=TokenBank,
		function_fullname="confirmOwner()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank_confirmOwner()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	292 -> 288	[key=0,
		edge_type=next,
		label=Next];
	293	[contract_name=TokenBank,
		function_fullname="initTokenBank()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	294	[contract_name=TokenBank,
		function_fullname="initTokenBank()",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)",
		node_expression="owner = msg.sender",
		node_irs="owner(address) := msg.sender(address)",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	293 -> 294	[key=0,
		edge_type=next,
		label=Next];
	295	[contract_name=TokenBank,
		function_fullname="initTokenBank()",
		label="Node Type: EXPRESSION

EXPRESSION:
MinDeposit = 1000000000000000000

IRs:
MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_expression="MinDeposit = 1000000000000000000",
		node_irs="MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	294 -> 295	[key=0,
		edge_type=next,
		label=Next];
	296	[contract_name=TokenBank,
		function_fullname="initTokenBank()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank_initTokenBank()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	296 -> 293	[key=0,
		edge_type=next,
		label=Next];
	297	[contract_name=TokenBank,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	298	[contract_name=TokenBank,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Deposit()

IRs:
INTERNAL_CALL, TokenBank.Deposit()()",
		node_expression="Deposit()",
		node_irs="INTERNAL_CALL, TokenBank.Deposit()()",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	297 -> 298	[key=0,
		edge_type=next,
		label=Next];
	299	[contract_name=TokenBank,
		function_fullname="fallback()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	299 -> 297	[key=0,
		edge_type=next,
		label=Next];
	300	[contract_name=TokenBank,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	301	[contract_name=TokenBank,
		function_fullname="Deposit()",
		label="Node Type: IF

EXPRESSION:
msg.value > MinDeposit

IRs:
TMP_17(bool) = msg.value > MinDeposit
CONDITION TMP_17",
		node_expression="msg.value > MinDeposit",
		node_irs="TMP_17(bool) = msg.value > MinDeposit
CONDITION TMP_17",
		node_type=IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	300 -> 301	[key=0,
		edge_type=next,
		label=Next];
	302	[contract_name=TokenBank,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
Holders[msg.sender] += msg.value

IRs:
REF_2(uint256) -> Holders[msg.sender]
REF_2(-> Holders) = \
REF_2 + msg.value",
		node_expression="Holders[msg.sender] += msg.value",
		node_irs="REF_2(uint256) -> Holders[msg.sender]
REF_2(-> Holders) = REF_2 + msg.value",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	301 -> 302	[key=0,
		edge_type=if_true,
		label=True];
	303	[contract_name=TokenBank,
		function_fullname="Deposit()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	301 -> 303	[key=0,
		edge_type=if_false,
		label=False];
	302 -> 303	[key=0,
		edge_type=next,
		label=Next];
	304	[contract_name=TokenBank,
		function_fullname="Deposit()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	304 -> 300	[key=0,
		edge_type=next,
		label=Next];
	305	[contract_name=TokenBank,
		function_fullname="WitdrawTokenToHolder(address,address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	310	[contract_name=TokenBank,
		function_fullname="WitdrawTokenToHolder(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	305 -> 310	[key=0,
		edge_type=next,
		label=Next];
	306	[contract_name=TokenBank,
		function_fullname="WitdrawTokenToHolder(address,address,uint256)",
		label="Node Type: IF

EXPRESSION:
Holders[_to] > 0

IRs:
REF_3(uint256) -> Holders[_to]
TMP_18(bool) = REF_3 > 0
CONDITION TMP_18",
		node_expression="Holders[_to] > 0",
		node_irs="REF_3(uint256) -> Holders[_to]
TMP_18(bool) = REF_3 > 0
CONDITION TMP_18",
		node_type=IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	307	[contract_name=TokenBank,
		function_fullname="WitdrawTokenToHolder(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Holders[_to] = 0

IRs:
REF_4(uint256) -> Holders[_to]
REF_4 (->Holders) := 0(uint256)",
		node_expression="Holders[_to] = 0",
		node_irs="REF_4(uint256) -> Holders[_to]
REF_4 (->Holders) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	306 -> 307	[key=0,
		edge_type=if_true,
		label=True];
	309	[contract_name=TokenBank,
		function_fullname="WitdrawTokenToHolder(address,address,uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	306 -> 309	[key=0,
		edge_type=if_false,
		label=False];
	308	[contract_name=TokenBank,
		function_fullname="WitdrawTokenToHolder(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
WithdrawToken(_token,_amount,_to)

IRs:
INTERNAL_CALL, Token.WithdrawToken(address,uint256,address)(_\
token,_amount,_to)",
		node_expression="WithdrawToken(_token,_amount,_to)",
		node_irs="INTERNAL_CALL, Token.WithdrawToken(address,uint256,address)(_token,_amount,_to)",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	307 -> 308	[key=0,
		edge_type=next,
		label=Next];
	308 -> 309	[key=0,
		edge_type=next,
		label=Next];
	310 -> 306	[key=0,
		edge_type=next,
		label=Next];
	311	[contract_name=TokenBank,
		function_fullname="WitdrawTokenToHolder(address,address,uint256)",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank_WitdrawTokenToHolder(address,address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	311 -> 305	[key=0,
		edge_type=next,
		label=Next];
	312	[contract_name=TokenBank,
		function_fullname="WithdrawToHolder(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	318	[contract_name=TokenBank,
		function_fullname="WithdrawToHolder(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()",
		node_expression="onlyOwner()",
		node_irs="MODIFIER_CALL, Ownable.onlyOwner()()",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	312 -> 318	[key=0,
		edge_type=next,
		label=Next];
	313	[contract_name=TokenBank,
		function_fullname="WithdrawToHolder(address,uint256)",
		label="Node Type: IF

EXPRESSION:
Holders[_addr] > 0

IRs:
REF_5(uint256) -> Holders[_addr]
TMP_21(bool) = REF_5 > 0
CONDITION TMP_21",
		node_expression="Holders[_addr] > 0",
		node_irs="REF_5(uint256) -> Holders[_addr]
TMP_21(bool) = REF_5 > 0
CONDITION TMP_21",
		node_type=IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	314	[contract_name=TokenBank,
		function_fullname="WithdrawToHolder(address,uint256)",
		label="Node Type: IF

EXPRESSION:
_addr.call.value(_wei)()

IRs:
TMP_23(bool) = LOW_LEVEL_CALL, dest:_addr, function:call, arguments:[] \
value:_wei 
CONDITION TMP_23",
		node_expression="_addr.call.value(_wei)()",
		node_irs="TMP_23(bool) = LOW_LEVEL_CALL, dest:_addr, function:call, arguments:[] value:_wei 
CONDITION TMP_23",
		node_type=IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	313 -> 314	[key=0,
		edge_type=if_true,
		label=True];
	317	[contract_name=TokenBank,
		function_fullname="WithdrawToHolder(address,uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	313 -> 317	[key=0,
		edge_type=if_false,
		label=False];
	315	[contract_name=TokenBank,
		function_fullname="WithdrawToHolder(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Holders[_addr] -= _wei

IRs:
REF_8(uint256) -> Holders[_addr]
REF_8(-> Holders) = REF_8 - _wei",
		node_expression="Holders[_addr] -= _wei",
		node_irs="REF_8(uint256) -> Holders[_addr]
REF_8(-> Holders) = REF_8 - _wei",
		node_type=EXPRESSION,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	314 -> 315	[key=0,
		edge_type=if_true,
		label=True];
	316	[contract_name=TokenBank,
		function_fullname="WithdrawToHolder(address,uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	314 -> 316	[key=0,
		edge_type=if_false,
		label=False];
	315 -> 316	[key=0,
		edge_type=next,
		label=Next];
	316 -> 317	[key=0,
		edge_type=next,
		label=Next];
	318 -> 313	[key=0,
		edge_type=next,
		label=Next];
	319	[contract_name=TokenBank,
		function_fullname="WithdrawToHolder(address,uint256)",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank_WithdrawToHolder(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	319 -> 312	[key=0,
		edge_type=next,
		label=Next];
	320	[contract_name=TokenBank,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)",
		node_expression="owner = msg.sender",
		node_irs="owner(address) := msg.sender(address)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	321	[contract_name=TokenBank,
		function_fullname="slitherConstructorVariables()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	321 -> 320	[key=0,
		edge_type=next,
		label=Next];
	322	[contract_name=TokenBank,
		function_fullname="onlyOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	323	[contract_name=TokenBank,
		function_fullname="onlyOwner()",
		label="Node Type: IF

EXPRESSION:
owner == msg.sender

IRs:
TMP_25(bool) = owner == msg.sender
CONDITION TMP_25",
		node_expression="owner == msg.sender",
		node_irs="TMP_25(bool) = owner == msg.sender
CONDITION TMP_25",
		node_type=IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	322 -> 323	[key=0,
		edge_type=next,
		label=Next];
	324	[contract_name=TokenBank,
		function_fullname="onlyOwner()",
		label="Node Type: _
",
		node_expression=None,
		node_irs=None,
		node_type=_,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	323 -> 324	[key=0,
		edge_type=if_true,
		label=True];
	325	[contract_name=TokenBank,
		function_fullname="onlyOwner()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	323 -> 325	[key=0,
		edge_type=if_false,
		label=False];
	324 -> 325	[key=0,
		edge_type=next,
		label=Next];
	326	[contract_name=TokenBank,
		function_fullname="onlyOwner()",
		label="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank_onlyOwner()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol"];
	326 -> 322	[key=0,
		edge_type=next,
		label=Next];
	327	[contract_name=Reentrancy_cross_function,
		function_fullname="transfer(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrancy_cross_function.sol"];
	328	[contract_name=Reentrancy_cross_function,
		function_fullname="transfer(address,uint256)",
		label="Node Type: IF

EXPRESSION:
userBalances[msg.sender] >= amount

IRs:
REF_0(uint256) -> userBalances[msg.sender]
TMP_0(bool) = REF_\
0 >= amount
CONDITION TMP_0",
		node_expression="userBalances[msg.sender] >= amount",
		node_irs="REF_0(uint256) -> userBalances[msg.sender]
TMP_0(bool) = REF_0 >= amount
CONDITION TMP_0",
		node_type=IF,
		source_file="reentrancy_cross_function.sol"];
	327 -> 328	[key=0,
		edge_type=next,
		label=Next];
	329	[contract_name=Reentrancy_cross_function,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
userBalances[to] += amount

IRs:
REF_1(uint256) -> userBalances[to]
REF_1(-> userBalances) = \
REF_1 + amount",
		node_expression="userBalances[to] += amount",
		node_irs="REF_1(uint256) -> userBalances[to]
REF_1(-> userBalances) = REF_1 + amount",
		node_type=EXPRESSION,
		source_file="reentrancy_cross_function.sol"];
	328 -> 329	[key=0,
		edge_type=if_true,
		label=True];
	331	[contract_name=Reentrancy_cross_function,
		function_fullname="transfer(address,uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="reentrancy_cross_function.sol"];
	328 -> 331	[key=0,
		edge_type=if_false,
		label=False];
	330	[contract_name=Reentrancy_cross_function,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
userBalances[msg.sender] -= amount

IRs:
REF_2(uint256) -> userBalances[msg.sender]
REF_2(-> \
userBalances) = REF_2 - amount",
		node_expression="userBalances[msg.sender] -= amount",
		node_irs="REF_2(uint256) -> userBalances[msg.sender]
REF_2(-> userBalances) = REF_2 - amount",
		node_type=EXPRESSION,
		source_file="reentrancy_cross_function.sol"];
	329 -> 330	[key=0,
		edge_type=next,
		label=Next];
	330 -> 331	[key=0,
		edge_type=next,
		label=Next];
	332	[contract_name=Reentrancy_cross_function,
		function_fullname="transfer(address,uint256)",
		label="reentrancy_cross_function.sol_Reentrancy_cross_function_transfer(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrancy_cross_function.sol"];
	332 -> 327	[key=0,
		edge_type=next,
		label=Next];
	333	[contract_name=Reentrancy_cross_function,
		function_fullname="withdrawBalance()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrancy_cross_function.sol"];
	334	[contract_name=Reentrancy_cross_function,
		function_fullname="withdrawBalance()",
		label="Node Type: NEW VARIABLE

EXPRESSION:
amountToWithdraw = userBalances[msg.sender]

IRs:
REF_3(uint256) -> userBalances[msg.sender]
\
amountToWithdraw(uint256) := REF_3(uint256)",
		node_expression="amountToWithdraw = userBalances[msg.sender]",
		node_irs="REF_3(uint256) -> userBalances[msg.sender]
amountToWithdraw(uint256) := REF_3(uint256)",
		node_type="NEW VARIABLE",
		source_file="reentrancy_cross_function.sol"];
	333 -> 334	[key=0,
		edge_type=next,
		label=Next];
	335	[contract_name=Reentrancy_cross_function,
		function_fullname="withdrawBalance()",
		label="Node Type: NEW VARIABLE
",
		node_expression=None,
		node_irs=None,
		node_type="NEW VARIABLE",
		source_file="reentrancy_cross_function.sol"];
	334 -> 335	[key=0,
		edge_type=next,
		label=Next];
	336	[contract_name=Reentrancy_cross_function,
		function_fullname="withdrawBalance()",
		label="Node Type: EXPRESSION

EXPRESSION:
(success) = msg.sender.call.value(amountToWithdraw)()

IRs:
TMP_2(bool) = LOW_LEVEL_CALL, dest:\
msg.sender, function:call, arguments:[''] value:amountToWithdraw 
success(bool) := TMP_2(bool)",
		node_expression="(success) = msg.sender.call.value(amountToWithdraw)()",
		node_irs="TMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[''] value:amountToWithdraw 
success(bool) := TMP_2(bool)",
		node_type=EXPRESSION,
		source_file="reentrancy_cross_function.sol"];
	335 -> 336	[key=0,
		edge_type=next,
		label=Next];
	337	[contract_name=Reentrancy_cross_function,
		function_fullname="withdrawBalance()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(success)

IRs:
TMP_3(None) = SOLIDITY_CALL require(bool)(success)",
		node_expression="require(bool)(success)",
		node_irs="TMP_3(None) = SOLIDITY_CALL require(bool)(success)",
		node_type=EXPRESSION,
		source_file="reentrancy_cross_function.sol"];
	336 -> 337	[key=0,
		edge_type=next,
		label=Next];
	338	[contract_name=Reentrancy_cross_function,
		function_fullname="withdrawBalance()",
		label="Node Type: EXPRESSION

EXPRESSION:
userBalances[msg.sender] = 0

IRs:
REF_6(uint256) -> userBalances[msg.sender]
REF_6 (->userBalances) := \
0(uint256)",
		node_expression="userBalances[msg.sender] = 0",
		node_irs="REF_6(uint256) -> userBalances[msg.sender]
REF_6 (->userBalances) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="reentrancy_cross_function.sol"];
	337 -> 338	[key=0,
		edge_type=next,
		label=Next];
	339	[contract_name=Reentrancy_cross_function,
		function_fullname="withdrawBalance()",
		label="reentrancy_cross_function.sol_Reentrancy_cross_function_withdrawBalance()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrancy_cross_function.sol"];
	339 -> 333	[key=0,
		edge_type=next,
		label=Next];
	340	[contract_name=BANK_SAFE,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	341	[contract_name=BANK_SAFE,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	340 -> 341	[key=0,
		edge_type=next,
		label=Next];
	342	[contract_name=BANK_SAFE,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: THROW
",
		node_expression=None,
		node_irs=None,
		node_type=THROW,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	341 -> 342	[key=0,
		edge_type=if_true,
		label=True];
	343	[contract_name=BANK_SAFE,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	341 -> 343	[key=0,
		edge_type=if_false,
		label=False];
	344	[contract_name=BANK_SAFE,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
MinSum = _val

IRs:
MinSum(uint256) := _val(uint256)",
		node_expression="MinSum = _val",
		node_irs="MinSum(uint256) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	343 -> 344	[key=0,
		edge_type=next,
		label=Next];
	345	[contract_name=BANK_SAFE,
		function_fullname="SetMinSum(uint256)",
		label="0x561eac93c92360949ab1f1403323e6db345cbf31.sol_BANK_SAFE_SetMinSum(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	345 -> 340	[key=0,
		edge_type=next,
		label=Next];
	346	[contract_name=BANK_SAFE,
		function_fullname="SetLogFile(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	347	[contract_name=BANK_SAFE,
		function_fullname="SetLogFile(address)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	346 -> 347	[key=0,
		edge_type=next,
		label=Next];
	348	[contract_name=BANK_SAFE,
		function_fullname="SetLogFile(address)",
		label="Node Type: THROW
",
		node_expression=None,
		node_irs=None,
		node_type=THROW,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	347 -> 348	[key=0,
		edge_type=if_true,
		label=True];
	349	[contract_name=BANK_SAFE,
		function_fullname="SetLogFile(address)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	347 -> 349	[key=0,
		edge_type=if_false,
		label=False];
	350	[contract_name=BANK_SAFE,
		function_fullname="SetLogFile(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log = LogFile(_log)

IRs:
TMP_0 = CONVERT _log to LogFile
Log(LogFile) := TMP_0(LogFile)",
		node_expression="Log = LogFile(_log)",
		node_irs="TMP_0 = CONVERT _log to LogFile
Log(LogFile) := TMP_0(LogFile)",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	349 -> 350	[key=0,
		edge_type=next,
		label=Next];
	351	[contract_name=BANK_SAFE,
		function_fullname="SetLogFile(address)",
		label="0x561eac93c92360949ab1f1403323e6db345cbf31.sol_BANK_SAFE_SetLogFile(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	351 -> 346	[key=0,
		edge_type=next,
		label=Next];
	352	[contract_name=BANK_SAFE,
		function_fullname="Initialized()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	353	[contract_name=BANK_SAFE,
		function_fullname="Initialized()",
		label="Node Type: EXPRESSION

EXPRESSION:
intitalized = true

IRs:
intitalized(bool) := True(bool)",
		node_expression="intitalized = true",
		node_irs="intitalized(bool) := True(bool)",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	352 -> 353	[key=0,
		edge_type=next,
		label=Next];
	354	[contract_name=BANK_SAFE,
		function_fullname="Initialized()",
		label="0x561eac93c92360949ab1f1403323e6db345cbf31.sol_BANK_SAFE_Initialized()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	354 -> 352	[key=0,
		edge_type=next,
		label=Next];
	355	[contract_name=BANK_SAFE,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	356	[contract_name=BANK_SAFE,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	355 -> 356	[key=0,
		edge_type=next,
		label=Next];
	357	[contract_name=BANK_SAFE,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="Log.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	356 -> 357	[key=0,
		edge_type=next,
		label=Next];
	358	[contract_name=BANK_SAFE,
		function_fullname="Deposit()",
		label="0x561eac93c92360949ab1f1403323e6db345cbf31.sol_BANK_SAFE_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	358 -> 355	[key=0,
		edge_type=next,
		label=Next];
	359	[contract_name=BANK_SAFE,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	360	[contract_name=BANK_SAFE,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
balances[msg.sender] >= MinSum && balances[msg.sender] >= _am

IRs:
REF_2(uint256) -> balances[msg.sender]
\
TMP_2(bool) = REF_2 >= MinSum
REF_3(uint256) -> balances[msg.sender]
TMP_3(bool) = REF_3 >= _am
TMP_4(bool) = TMP_2 && TMP_3
CONDITION \
TMP_4",
		node_expression="balances[msg.sender] >= MinSum && balances[msg.sender] >= _am",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_2(bool) = REF_2 >= MinSum
REF_3(uint256) -> balances[msg.sender]
TMP_3(bool) = REF_3 >= _\
am
TMP_4(bool) = TMP_2 && TMP_3
CONDITION TMP_4",
		node_type=IF,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	359 -> 360	[key=0,
		edge_type=next,
		label=Next];
	361	[contract_name=BANK_SAFE,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_6(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_6",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_6(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_6",
		node_type=IF,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	360 -> 361	[key=0,
		edge_type=if_true,
		label=True];
	365	[contract_name=BANK_SAFE,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	360 -> 365	[key=0,
		edge_type=if_false,
		label=False];
	362	[contract_name=BANK_SAFE,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_6(uint256) -> balances[msg.sender]
REF_6(-> balances) = \
REF_6 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_6(uint256) -> balances[msg.sender]
REF_6(-> balances) = REF_6 - _am",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	361 -> 362	[key=0,
		edge_type=if_true,
		label=True];
	364	[contract_name=BANK_SAFE,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	361 -> 364	[key=0,
		edge_type=if_false,
		label=False];
	363	[contract_name=BANK_SAFE,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="Log.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	362 -> 363	[key=0,
		edge_type=next,
		label=Next];
	363 -> 364	[key=0,
		edge_type=next,
		label=Next];
	364 -> 365	[key=0,
		edge_type=next,
		label=Next];
	366	[contract_name=BANK_SAFE,
		function_fullname="Collect(uint256)",
		label="0x561eac93c92360949ab1f1403323e6db345cbf31.sol_BANK_SAFE_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	366 -> 359	[key=0,
		edge_type=next,
		label=Next];
	367	[contract_name=BANK_SAFE,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	368	[contract_name=BANK_SAFE,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Deposit()

IRs:
INTERNAL_CALL, BANK_SAFE.Deposit()()",
		node_expression="Deposit()",
		node_irs="INTERNAL_CALL, BANK_SAFE.Deposit()()",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	367 -> 368	[key=0,
		edge_type=next,
		label=Next];
	369	[contract_name=BANK_SAFE,
		function_fullname="fallback()",
		label="0x561eac93c92360949ab1f1403323e6db345cbf31.sol_BANK_SAFE_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	369 -> 367	[key=0,
		edge_type=next,
		label=Next];
	370	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	371	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_8(address) -> LastMsg.Sender
REF_8 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_8(address) -> LastMsg.Sender
REF_8 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	370 -> 371	[key=0,
		edge_type=next,
		label=Next];
	372	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_9(uint256) -> LastMsg.Time
REF_9 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_9(uint256) -> LastMsg.Time
REF_9 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	371 -> 372	[key=0,
		edge_type=next,
		label=Next];
	373	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_10(uint256) -> LastMsg.Val
REF_10 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_10(uint256) -> LastMsg.Val
REF_10 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	372 -> 373	[key=0,
		edge_type=next,
		label=Next];
	374	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_11(string) -> LastMsg.Data
REF_11 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_11(string) -> LastMsg.Data
REF_11 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	373 -> 374	[key=0,
		edge_type=next,
		label=Next];
	375	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_13 -> LENGTH History
TMP_10(uint256) := REF_13(uint256)
TMP_11(\
uint256) = TMP_10 + 1
REF_13 (->History) := TMP_11(uint256)
REF_14(LogFile.Message) -> History[TMP_10]
REF_14 (->History) := LastMsg(\
LogFile.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_13 -> LENGTH History
TMP_10(uint256) := REF_13(uint256)
TMP_11(uint256) = TMP_10 + 1
REF_13 (->History) := TMP_11(uint256)
REF_\
14(LogFile.Message) -> History[TMP_10]
REF_14 (->History) := LastMsg(LogFile.Message)",
		node_type=EXPRESSION,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	374 -> 375	[key=0,
		edge_type=next,
		label=Next];
	376	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x561eac93c92360949ab1f1403323e6db345cbf31.sol_LogFile_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x561eac93c92360949ab1f1403323e6db345cbf31.sol"];
	376 -> 370	[key=0,
		edge_type=next,
		label=Next];
	377	[contract_name=DEP_BANK,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	378	[contract_name=DEP_BANK,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	377 -> 378	[key=0,
		edge_type=next,
		label=Next];
	379	[contract_name=DEP_BANK,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: THROW
",
		node_expression=None,
		node_irs=None,
		node_type=THROW,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	378 -> 379	[key=0,
		edge_type=if_true,
		label=True];
	380	[contract_name=DEP_BANK,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	378 -> 380	[key=0,
		edge_type=if_false,
		label=False];
	381	[contract_name=DEP_BANK,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
MinSum = _val

IRs:
MinSum(uint256) := _val(uint256)",
		node_expression="MinSum = _val",
		node_irs="MinSum(uint256) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	380 -> 381	[key=0,
		edge_type=next,
		label=Next];
	382	[contract_name=DEP_BANK,
		function_fullname="SetMinSum(uint256)",
		label="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol_DEP_BANK_SetMinSum(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	382 -> 377	[key=0,
		edge_type=next,
		label=Next];
	383	[contract_name=DEP_BANK,
		function_fullname="SetLogFile(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	384	[contract_name=DEP_BANK,
		function_fullname="SetLogFile(address)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	383 -> 384	[key=0,
		edge_type=next,
		label=Next];
	385	[contract_name=DEP_BANK,
		function_fullname="SetLogFile(address)",
		label="Node Type: THROW
",
		node_expression=None,
		node_irs=None,
		node_type=THROW,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	384 -> 385	[key=0,
		edge_type=if_true,
		label=True];
	386	[contract_name=DEP_BANK,
		function_fullname="SetLogFile(address)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	384 -> 386	[key=0,
		edge_type=if_false,
		label=False];
	387	[contract_name=DEP_BANK,
		function_fullname="SetLogFile(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log = LogFile(_log)

IRs:
TMP_0 = CONVERT _log to LogFile
Log(LogFile) := TMP_0(LogFile)",
		node_expression="Log = LogFile(_log)",
		node_irs="TMP_0 = CONVERT _log to LogFile
Log(LogFile) := TMP_0(LogFile)",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	386 -> 387	[key=0,
		edge_type=next,
		label=Next];
	388	[contract_name=DEP_BANK,
		function_fullname="SetLogFile(address)",
		label="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol_DEP_BANK_SetLogFile(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	388 -> 383	[key=0,
		edge_type=next,
		label=Next];
	389	[contract_name=DEP_BANK,
		function_fullname="Initialized()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	390	[contract_name=DEP_BANK,
		function_fullname="Initialized()",
		label="Node Type: EXPRESSION

EXPRESSION:
intitalized = true

IRs:
intitalized(bool) := True(bool)",
		node_expression="intitalized = true",
		node_irs="intitalized(bool) := True(bool)",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	389 -> 390	[key=0,
		edge_type=next,
		label=Next];
	391	[contract_name=DEP_BANK,
		function_fullname="Initialized()",
		label="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol_DEP_BANK_Initialized()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	391 -> 389	[key=0,
		edge_type=next,
		label=Next];
	392	[contract_name=DEP_BANK,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	393	[contract_name=DEP_BANK,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	392 -> 393	[key=0,
		edge_type=next,
		label=Next];
	394	[contract_name=DEP_BANK,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="Log.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	393 -> 394	[key=0,
		edge_type=next,
		label=Next];
	395	[contract_name=DEP_BANK,
		function_fullname="Deposit()",
		label="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol_DEP_BANK_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	395 -> 392	[key=0,
		edge_type=next,
		label=Next];
	396	[contract_name=DEP_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	397	[contract_name=DEP_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
balances[msg.sender] >= MinSum && balances[msg.sender] >= _am

IRs:
REF_2(uint256) -> balances[msg.sender]
\
TMP_2(bool) = REF_2 >= MinSum
REF_3(uint256) -> balances[msg.sender]
TMP_3(bool) = REF_3 >= _am
TMP_4(bool) = TMP_2 && TMP_3
CONDITION \
TMP_4",
		node_expression="balances[msg.sender] >= MinSum && balances[msg.sender] >= _am",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_2(bool) = REF_2 >= MinSum
REF_3(uint256) -> balances[msg.sender]
TMP_3(bool) = REF_3 >= _\
am
TMP_4(bool) = TMP_2 && TMP_3
CONDITION TMP_4",
		node_type=IF,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	396 -> 397	[key=0,
		edge_type=next,
		label=Next];
	398	[contract_name=DEP_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_6(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_6",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_6(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_6",
		node_type=IF,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	397 -> 398	[key=0,
		edge_type=if_true,
		label=True];
	402	[contract_name=DEP_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	397 -> 402	[key=0,
		edge_type=if_false,
		label=False];
	399	[contract_name=DEP_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_6(uint256) -> balances[msg.sender]
REF_6(-> balances) = \
REF_6 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_6(uint256) -> balances[msg.sender]
REF_6(-> balances) = REF_6 - _am",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	398 -> 399	[key=0,
		edge_type=if_true,
		label=True];
	401	[contract_name=DEP_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	398 -> 401	[key=0,
		edge_type=if_false,
		label=False];
	400	[contract_name=DEP_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="Log.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	399 -> 400	[key=0,
		edge_type=next,
		label=Next];
	400 -> 401	[key=0,
		edge_type=next,
		label=Next];
	401 -> 402	[key=0,
		edge_type=next,
		label=Next];
	403	[contract_name=DEP_BANK,
		function_fullname="Collect(uint256)",
		label="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol_DEP_BANK_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	403 -> 396	[key=0,
		edge_type=next,
		label=Next];
	404	[contract_name=DEP_BANK,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	405	[contract_name=DEP_BANK,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Deposit()

IRs:
INTERNAL_CALL, DEP_BANK.Deposit()()",
		node_expression="Deposit()",
		node_irs="INTERNAL_CALL, DEP_BANK.Deposit()()",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	404 -> 405	[key=0,
		edge_type=next,
		label=Next];
	406	[contract_name=DEP_BANK,
		function_fullname="fallback()",
		label="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol_DEP_BANK_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	406 -> 404	[key=0,
		edge_type=next,
		label=Next];
	407	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	408	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_8(address) -> LastMsg.Sender
REF_8 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_8(address) -> LastMsg.Sender
REF_8 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	407 -> 408	[key=0,
		edge_type=next,
		label=Next];
	409	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_9(uint256) -> LastMsg.Time
REF_9 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_9(uint256) -> LastMsg.Time
REF_9 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	408 -> 409	[key=0,
		edge_type=next,
		label=Next];
	410	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_10(uint256) -> LastMsg.Val
REF_10 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_10(uint256) -> LastMsg.Val
REF_10 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	409 -> 410	[key=0,
		edge_type=next,
		label=Next];
	411	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_11(string) -> LastMsg.Data
REF_11 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_11(string) -> LastMsg.Data
REF_11 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	410 -> 411	[key=0,
		edge_type=next,
		label=Next];
	412	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_13 -> LENGTH History
TMP_10(uint256) := REF_13(uint256)
TMP_11(\
uint256) = TMP_10 + 1
REF_13 (->History) := TMP_11(uint256)
REF_14(LogFile.Message) -> History[TMP_10]
REF_14 (->History) := LastMsg(\
LogFile.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_13 -> LENGTH History
TMP_10(uint256) := REF_13(uint256)
TMP_11(uint256) = TMP_10 + 1
REF_13 (->History) := TMP_11(uint256)
REF_\
14(LogFile.Message) -> History[TMP_10]
REF_14 (->History) := LastMsg(LogFile.Message)",
		node_type=EXPRESSION,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	411 -> 412	[key=0,
		edge_type=next,
		label=Next];
	413	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol_LogFile_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol"];
	413 -> 407	[key=0,
		edge_type=next,
		label=Next];
	414	[contract_name=Reentrance,
		function_fullname="donate(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrance.sol"];
	415	[contract_name=Reentrance,
		function_fullname="donate(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[_to] += msg.value

IRs:
REF_0(uint256) -> balances[_to]
REF_0(-> balances) = REF_0 + \
msg.value",
		node_expression="balances[_to] += msg.value",
		node_irs="REF_0(uint256) -> balances[_to]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="reentrance.sol"];
	414 -> 415	[key=0,
		edge_type=next,
		label=Next];
	416	[contract_name=Reentrance,
		function_fullname="donate(address)",
		label="reentrance.sol_Reentrance_donate(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrance.sol"];
	416 -> 414	[key=0,
		edge_type=next,
		label=Next];
	417	[contract_name=Reentrance,
		function_fullname="balanceOf(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrance.sol"];
	418	[contract_name=Reentrance,
		function_fullname="balanceOf(address)",
		label="Node Type: RETURN

EXPRESSION:
balances[_who]

IRs:
REF_1(uint256) -> balances[_who]
RETURN REF_1",
		node_expression="balances[_who]",
		node_irs="REF_1(uint256) -> balances[_who]
RETURN REF_1",
		node_type=RETURN,
		source_file="reentrance.sol"];
	417 -> 418	[key=0,
		edge_type=next,
		label=Next];
	419	[contract_name=Reentrance,
		function_fullname="balanceOf(address)",
		label="reentrance.sol_Reentrance_balanceOf(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrance.sol"];
	419 -> 417	[key=0,
		edge_type=next,
		label=Next];
	420	[contract_name=Reentrance,
		function_fullname="withdraw(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrance.sol"];
	421	[contract_name=Reentrance,
		function_fullname="withdraw(uint256)",
		label="Node Type: IF

EXPRESSION:
balances[msg.sender] >= _amount

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_2 >= _\
amount
CONDITION TMP_0",
		node_expression="balances[msg.sender] >= _amount",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_2 >= _amount
CONDITION TMP_0",
		node_type=IF,
		source_file="reentrance.sol"];
	420 -> 421	[key=0,
		edge_type=next,
		label=Next];
	422	[contract_name=Reentrance,
		function_fullname="withdraw(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_amount)()

IRs:
TMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, \
arguments:[] value:_amount 
CONDITION TMP_2",
		node_expression="msg.sender.call.value(_amount)()",
		node_irs="TMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_amount 
CONDITION TMP_2",
		node_type=IF,
		source_file="reentrance.sol"];
	421 -> 422	[key=0,
		edge_type=if_true,
		label=True];
	426	[contract_name=Reentrance,
		function_fullname="withdraw(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="reentrance.sol"];
	421 -> 426	[key=0,
		edge_type=if_false,
		label=False];
	423	[contract_name=Reentrance,
		function_fullname="withdraw(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_amount
",
		node_expression=_amount,
		node_irs=None,
		node_type=EXPRESSION,
		source_file="reentrance.sol"];
	422 -> 423	[key=0,
		edge_type=if_true,
		label=True];
	424	[contract_name=Reentrance,
		function_fullname="withdraw(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="reentrance.sol"];
	422 -> 424	[key=0,
		edge_type=if_false,
		label=False];
	423 -> 424	[key=0,
		edge_type=next,
		label=Next];
	425	[contract_name=Reentrance,
		function_fullname="withdraw(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _amount

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = \
REF_5 - _amount",
		node_expression="balances[msg.sender] -= _amount",
		node_irs="REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - _amount",
		node_type=EXPRESSION,
		source_file="reentrance.sol"];
	424 -> 425	[key=0,
		edge_type=next,
		label=Next];
	425 -> 426	[key=0,
		edge_type=next,
		label=Next];
	427	[contract_name=Reentrance,
		function_fullname="withdraw(uint256)",
		label="reentrance.sol_Reentrance_withdraw(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrance.sol"];
	427 -> 420	[key=0,
		edge_type=next,
		label=Next];
	428	[contract_name=Reentrance,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrance.sol"];
	429	[contract_name=Reentrance,
		function_fullname="fallback()",
		label="reentrance.sol_Reentrance_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrance.sol"];
	429 -> 428	[key=0,
		edge_type=next,
		label=Next];
	430	[contract_name=W_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	431	[contract_name=W_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_0(W_WALLET.Holder) -> Acc[msg.sender]
acc(W_WALLET.Holder) := \
REF_0(W_WALLET.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_0(W_WALLET.Holder) -> Acc[msg.sender]
acc(W_WALLET.Holder) := REF_0(W_WALLET.Holder)",
		node_type="NEW VARIABLE",
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	430 -> 431	[key=0,
		edge_type=next,
		label=Next];
	432	[contract_name=W_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance += msg.value

IRs:
REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_expression="acc.balance += msg.value",
		node_irs="REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	431 -> 432	[key=0,
		edge_type=next,
		label=Next];
	435	[contract_name=W_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: IF

EXPRESSION:
_unlockTime > now

IRs:
TMP_1(bool) = _unlockTime > now
CONDITION TMP_1",
		node_expression="_unlockTime > now",
		node_irs="TMP_1(bool) = _unlockTime > now
CONDITION TMP_1",
		node_type=IF,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	432 -> 435	[key=0,
		edge_type=next,
		label=Next];
	433	[contract_name=W_WALLET,
		function_fullname="Put(uint256)",
		label="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol_W_WALLET_Put(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	433 -> 430	[key=0,
		edge_type=next,
		label=Next];
	434	[contract_name=W_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="LogFile.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	436	[contract_name=W_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = _unlockTime

IRs:
REF_3(uint256) -> acc.unlockTime
REF_3 (->acc) := _unlockTime(\
uint256)",
		node_expression="acc.unlockTime = _unlockTime",
		node_irs="REF_3(uint256) -> acc.unlockTime
REF_3 (->acc) := _unlockTime(uint256)",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	435 -> 436	[key=0,
		edge_type=if_true,
		label=True];
	437	[contract_name=W_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = now

IRs:
REF_4(uint256) -> acc.unlockTime
REF_4 (->acc) := now(uint256)",
		node_expression="acc.unlockTime = now",
		node_irs="REF_4(uint256) -> acc.unlockTime
REF_4 (->acc) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	435 -> 437	[key=0,
		edge_type=if_false,
		label=False];
	438	[contract_name=W_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	436 -> 438	[key=0,
		edge_type=next,
		label=Next];
	437 -> 438	[key=0,
		edge_type=next,
		label=Next];
	438 -> 434	[key=0,
		edge_type=next,
		label=Next];
	439	[contract_name=W_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	440	[contract_name=W_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_5(W_WALLET.Holder) -> Acc[msg.sender]
acc(W_WALLET.Holder) := \
REF_5(W_WALLET.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_5(W_WALLET.Holder) -> Acc[msg.sender]
acc(W_WALLET.Holder) := REF_5(W_WALLET.Holder)",
		node_type="NEW VARIABLE",
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	439 -> 440	[key=0,
		edge_type=next,
		label=Next];
	441	[contract_name=W_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime

IRs:
REF_6(uint256) -> acc.balance
\
TMP_2(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_3(bool) = REF_7 >= _am
TMP_4(bool) = TMP_2 && TMP_3
REF_8(uint256) \
-> acc.unlockTime
TMP_5(bool) = now > REF_8
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_expression="acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime",
		node_irs="REF_6(uint256) -> acc.balance
TMP_2(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_3(bool) = REF_7 >= _am
TMP_4(bool) = \
TMP_2 && TMP_3
REF_8(uint256) -> acc.unlockTime
TMP_5(bool) = now > REF_8
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_type=IF,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	440 -> 441	[key=0,
		edge_type=next,
		label=Next];
	442	[contract_name=W_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_8",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_8",
		node_type=IF,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	441 -> 442	[key=0,
		edge_type=if_true,
		label=True];
	446	[contract_name=W_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	441 -> 446	[key=0,
		edge_type=if_false,
		label=False];
	443	[contract_name=W_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance -= _am

IRs:
REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_expression="acc.balance -= _am",
		node_irs="REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	442 -> 443	[key=0,
		edge_type=if_true,
		label=True];
	445	[contract_name=W_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	442 -> 445	[key=0,
		edge_type=if_false,
		label=False];
	444	[contract_name=W_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="LogFile.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	443 -> 444	[key=0,
		edge_type=next,
		label=Next];
	444 -> 445	[key=0,
		edge_type=next,
		label=Next];
	445 -> 446	[key=0,
		edge_type=next,
		label=Next];
	447	[contract_name=W_WALLET,
		function_fullname="Collect(uint256)",
		label="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol_W_WALLET_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	447 -> 439	[key=0,
		edge_type=next,
		label=Next];
	448	[contract_name=W_WALLET,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	449	[contract_name=W_WALLET,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Put(0)

IRs:
INTERNAL_CALL, W_WALLET.Put(uint256)(0)",
		node_expression="Put(0)",
		node_irs="INTERNAL_CALL, W_WALLET.Put(uint256)(0)",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	448 -> 449	[key=0,
		edge_type=next,
		label=Next];
	450	[contract_name=W_WALLET,
		function_fullname="fallback()",
		label="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol_W_WALLET_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	450 -> 448	[key=0,
		edge_type=next,
		label=Next];
	451	[contract_name=W_WALLET,
		function_fullname="W_WALLET(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	452	[contract_name=W_WALLET,
		function_fullname="W_WALLET(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile = Log(log)

IRs:
TMP_11 = CONVERT log to Log
LogFile(Log) := TMP_11(Log)",
		node_expression="LogFile = Log(log)",
		node_irs="TMP_11 = CONVERT log to Log
LogFile(Log) := TMP_11(Log)",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	451 -> 452	[key=0,
		edge_type=next,
		label=Next];
	453	[contract_name=W_WALLET,
		function_fullname="W_WALLET(address)",
		label="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol_W_WALLET_W_WALLET(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	453 -> 451	[key=0,
		edge_type=next,
		label=Next];
	454	[contract_name=W_WALLET,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinSum = 1000000000000000000

IRs:
MinSum(uint256) := 1000000000000000000(uint256)",
		node_expression="MinSum = 1000000000000000000",
		node_irs="MinSum(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	455	[contract_name=W_WALLET,
		function_fullname="slitherConstructorVariables()",
		label="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol_W_WALLET_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	455 -> 454	[key=0,
		edge_type=next,
		label=Next];
	456	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	457	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	456 -> 457	[key=0,
		edge_type=next,
		label=Next];
	458	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	457 -> 458	[key=0,
		edge_type=next,
		label=Next];
	459	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	458 -> 459	[key=0,
		edge_type=next,
		label=Next];
	460	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	459 -> 460	[key=0,
		edge_type=next,
		label=Next];
	461	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_18 -> LENGTH History
TMP_13(uint256) := REF_18(uint256)
TMP_14(\
uint256) = TMP_13 + 1
REF_18 (->History) := TMP_14(uint256)
REF_19(Log.Message) -> History[TMP_13]
REF_19 (->History) := LastMsg(\
Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_18 -> LENGTH History
TMP_13(uint256) := REF_18(uint256)
TMP_14(uint256) = TMP_13 + 1
REF_18 (->History) := TMP_14(uint256)
REF_\
19(Log.Message) -> History[TMP_13]
REF_19 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	460 -> 461	[key=0,
		edge_type=next,
		label=Next];
	462	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol"];
	462 -> 456	[key=0,
		edge_type=next,
		label=Next];
	463	[contract_name=Reentrancy_insecure,
		function_fullname="withdrawBalance()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrancy_insecure.sol"];
	464	[contract_name=Reentrancy_insecure,
		function_fullname="withdrawBalance()",
		label="Node Type: NEW VARIABLE

EXPRESSION:
amountToWithdraw = userBalances[msg.sender]

IRs:
REF_0(uint256) -> userBalances[msg.sender]
\
amountToWithdraw(uint256) := REF_0(uint256)",
		node_expression="amountToWithdraw = userBalances[msg.sender]",
		node_irs="REF_0(uint256) -> userBalances[msg.sender]
amountToWithdraw(uint256) := REF_0(uint256)",
		node_type="NEW VARIABLE",
		source_file="reentrancy_insecure.sol"];
	463 -> 464	[key=0,
		edge_type=next,
		label=Next];
	465	[contract_name=Reentrancy_insecure,
		function_fullname="withdrawBalance()",
		label="Node Type: NEW VARIABLE
",
		node_expression=None,
		node_irs=None,
		node_type="NEW VARIABLE",
		source_file="reentrancy_insecure.sol"];
	464 -> 465	[key=0,
		edge_type=next,
		label=Next];
	466	[contract_name=Reentrancy_insecure,
		function_fullname="withdrawBalance()",
		label="Node Type: EXPRESSION

EXPRESSION:
(success) = msg.sender.call.value(amountToWithdraw)()

IRs:
TMP_1(bool) = LOW_LEVEL_CALL, dest:\
msg.sender, function:call, arguments:[''] value:amountToWithdraw 
success(bool) := TMP_1(bool)",
		node_expression="(success) = msg.sender.call.value(amountToWithdraw)()",
		node_irs="TMP_1(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[''] value:amountToWithdraw 
success(bool) := TMP_1(bool)",
		node_type=EXPRESSION,
		source_file="reentrancy_insecure.sol"];
	465 -> 466	[key=0,
		edge_type=next,
		label=Next];
	467	[contract_name=Reentrancy_insecure,
		function_fullname="withdrawBalance()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(success)

IRs:
TMP_2(None) = SOLIDITY_CALL require(bool)(success)",
		node_expression="require(bool)(success)",
		node_irs="TMP_2(None) = SOLIDITY_CALL require(bool)(success)",
		node_type=EXPRESSION,
		source_file="reentrancy_insecure.sol"];
	466 -> 467	[key=0,
		edge_type=next,
		label=Next];
	468	[contract_name=Reentrancy_insecure,
		function_fullname="withdrawBalance()",
		label="Node Type: EXPRESSION

EXPRESSION:
userBalances[msg.sender] = 0

IRs:
REF_3(uint256) -> userBalances[msg.sender]
REF_3 (->userBalances) := \
0(uint256)",
		node_expression="userBalances[msg.sender] = 0",
		node_irs="REF_3(uint256) -> userBalances[msg.sender]
REF_3 (->userBalances) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="reentrancy_insecure.sol"];
	467 -> 468	[key=0,
		edge_type=next,
		label=Next];
	469	[contract_name=Reentrancy_insecure,
		function_fullname="withdrawBalance()",
		label="reentrancy_insecure.sol_Reentrancy_insecure_withdrawBalance()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrancy_insecure.sol"];
	469 -> 463	[key=0,
		edge_type=next,
		label=Next];
	470	[contract_name=EtherStore,
		function_fullname="depositFunds()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="etherstore.sol"];
	471	[contract_name=EtherStore,
		function_fullname="depositFunds()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="etherstore.sol"];
	470 -> 471	[key=0,
		edge_type=next,
		label=Next];
	472	[contract_name=EtherStore,
		function_fullname="depositFunds()",
		label="etherstore.sol_EtherStore_depositFunds()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="etherstore.sol"];
	472 -> 470	[key=0,
		edge_type=next,
		label=Next];
	473	[contract_name=EtherStore,
		function_fullname="withdrawFunds(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="etherstore.sol"];
	474	[contract_name=EtherStore,
		function_fullname="withdrawFunds(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(balances[msg.sender] >= _weiToWithdraw)

IRs:
REF_1(uint256) -> balances[msg.sender]
\
TMP_0(bool) = REF_1 >= _weiToWithdraw
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)",
		node_expression="require(bool)(balances[msg.sender] >= _weiToWithdraw)",
		node_irs="REF_1(uint256) -> balances[msg.sender]
TMP_0(bool) = REF_1 >= _weiToWithdraw
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)",
		node_type=EXPRESSION,
		source_file="etherstore.sol"];
	473 -> 474	[key=0,
		edge_type=next,
		label=Next];
	475	[contract_name=EtherStore,
		function_fullname="withdrawFunds(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(_weiToWithdraw <= withdrawalLimit)

IRs:
TMP_2(bool) = _weiToWithdraw <= withdrawalLimit
\
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)",
		node_expression="require(bool)(_weiToWithdraw <= withdrawalLimit)",
		node_irs="TMP_2(bool) = _weiToWithdraw <= withdrawalLimit
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)",
		node_type=EXPRESSION,
		source_file="etherstore.sol"];
	474 -> 475	[key=0,
		edge_type=next,
		label=Next];
	476	[contract_name=EtherStore,
		function_fullname="withdrawFunds(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(now >= lastWithdrawTime[msg.sender] + 604800)

IRs:
REF_2(uint256) -> lastWithdrawTime[\
msg.sender]
TMP_4(uint256) = REF_2 + 604800
TMP_5(bool) = now >= TMP_4
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)",
		node_expression="require(bool)(now >= lastWithdrawTime[msg.sender] + 604800)",
		node_irs="REF_2(uint256) -> lastWithdrawTime[msg.sender]
TMP_4(uint256) = REF_2 + 604800
TMP_5(bool) = now >= TMP_4
TMP_6(None) = SOLIDITY_\
CALL require(bool)(TMP_5)",
		node_type=EXPRESSION,
		source_file="etherstore.sol"];
	475 -> 476	[key=0,
		edge_type=next,
		label=Next];
	477	[contract_name=EtherStore,
		function_fullname="withdrawFunds(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(msg.sender.call.value(_weiToWithdraw)())

IRs:
TMP_8(bool) = LOW_LEVEL_CALL, dest:\
msg.sender, function:call, arguments:[] value:_weiToWithdraw 
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)",
		node_expression="require(bool)(msg.sender.call.value(_weiToWithdraw)())",
		node_irs="TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_weiToWithdraw 
TMP_9(None) = SOLIDITY_CALL require(\
bool)(TMP_8)",
		node_type=EXPRESSION,
		source_file="etherstore.sol"];
	476 -> 477	[key=0,
		edge_type=next,
		label=Next];
	478	[contract_name=EtherStore,
		function_fullname="withdrawFunds(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _weiToWithdraw

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> \
balances) = REF_5 - _weiToWithdraw",
		node_expression="balances[msg.sender] -= _weiToWithdraw",
		node_irs="REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - _weiToWithdraw",
		node_type=EXPRESSION,
		source_file="etherstore.sol"];
	477 -> 478	[key=0,
		edge_type=next,
		label=Next];
	479	[contract_name=EtherStore,
		function_fullname="withdrawFunds(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
lastWithdrawTime[msg.sender] = now

IRs:
REF_6(uint256) -> lastWithdrawTime[msg.sender]
REF_6 (\
->lastWithdrawTime) := now(uint256)",
		node_expression="lastWithdrawTime[msg.sender] = now",
		node_irs="REF_6(uint256) -> lastWithdrawTime[msg.sender]
REF_6 (->lastWithdrawTime) := now(uint256)",
		node_type=EXPRESSION,
		source_file="etherstore.sol"];
	478 -> 479	[key=0,
		edge_type=next,
		label=Next];
	480	[contract_name=EtherStore,
		function_fullname="withdrawFunds(uint256)",
		label="etherstore.sol_EtherStore_withdrawFunds(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="etherstore.sol"];
	480 -> 473	[key=0,
		edge_type=next,
		label=Next];
	481	[contract_name=EtherStore,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
withdrawalLimit = 1000000000000000000

IRs:
withdrawalLimit(uint256) := 1000000000000000000(\
uint256)",
		node_expression="withdrawalLimit = 1000000000000000000",
		node_irs="withdrawalLimit(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="etherstore.sol"];
	482	[contract_name=EtherStore,
		function_fullname="slitherConstructorVariables()",
		label="etherstore.sol_EtherStore_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="etherstore.sol"];
	482 -> 481	[key=0,
		edge_type=next,
		label=Next];
	483	[contract_name=ModifierEntrancy,
		function_fullname="airDrop()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="modifier_reentrancy.sol"];
	485	[contract_name=ModifierEntrancy,
		function_fullname="airDrop()",
		label="Node Type: EXPRESSION

EXPRESSION:
hasNoBalance()

IRs:
MODIFIER_CALL, ModifierEntrancy.hasNoBalance()()",
		node_expression="hasNoBalance()",
		node_irs="MODIFIER_CALL, ModifierEntrancy.hasNoBalance()()",
		node_type=EXPRESSION,
		source_file="modifier_reentrancy.sol"];
	483 -> 485	[key=0,
		edge_type=next,
		label=Next];
	484	[contract_name=ModifierEntrancy,
		function_fullname="airDrop()",
		label="Node Type: EXPRESSION

EXPRESSION:
tokenBalance[msg.sender] += 20

IRs:
REF_0(uint256) -> tokenBalance[msg.sender]
REF_0(-> tokenBalance) = \
REF_0 + 20",
		node_expression="tokenBalance[msg.sender] += 20",
		node_irs="REF_0(uint256) -> tokenBalance[msg.sender]
REF_0(-> tokenBalance) = REF_0 + 20",
		node_type=EXPRESSION,
		source_file="modifier_reentrancy.sol"];
	486	[contract_name=ModifierEntrancy,
		function_fullname="airDrop()",
		label="Node Type: EXPRESSION

EXPRESSION:
supportsToken()

IRs:
MODIFIER_CALL, ModifierEntrancy.supportsToken()()",
		node_expression="supportsToken()",
		node_irs="MODIFIER_CALL, ModifierEntrancy.supportsToken()()",
		node_type=EXPRESSION,
		source_file="modifier_reentrancy.sol"];
	485 -> 486	[key=0,
		edge_type=next,
		label=Next];
	486 -> 484	[key=0,
		edge_type=next,
		label=Next];
	487	[contract_name=ModifierEntrancy,
		function_fullname="airDrop()",
		label="modifier_reentrancy.sol_ModifierEntrancy_airDrop()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="modifier_reentrancy.sol"];
	487 -> 483	[key=0,
		edge_type=next,
		label=Next];
	488	[contract_name=ModifierEntrancy,
		function_fullname="slitherConstructorConstantVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
name = Nu Token

IRs:
name(string) := Nu Token(string)",
		node_expression="name = Nu Token",
		node_irs="name(string) := Nu Token(string)",
		node_type=OTHER_ENTRYPOINT,
		source_file="modifier_reentrancy.sol"];
	489	[contract_name=ModifierEntrancy,
		function_fullname="slitherConstructorConstantVariables()",
		label="modifier_reentrancy.sol_ModifierEntrancy_slitherConstructorConstantVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="modifier_reentrancy.sol"];
	489 -> 488	[key=0,
		edge_type=next,
		label=Next];
	490	[contract_name=ModifierEntrancy,
		function_fullname="supportsToken()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="modifier_reentrancy.sol"];
	491	[contract_name=ModifierEntrancy,
		function_fullname="supportsToken()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(keccak256()(abi.encodePacked(Nu Token)) == Bank(msg.sender).supportsToken())

IRs:
\
TMP_2(bytes) = SOLIDITY_CALL abi.encodePacked()(Nu Token)
TMP_3(bytes32) = SOLIDITY_CALL keccak256()(TMP_2)
TMP_4 = CONVERT msg.sender \
to Bank
TMP_5(bytes32) = HIGH_LEVEL_CALL, dest:TMP_4(Bank), function:supportsToken, arguments:[]  
TMP_6(bool) = TMP_3 == TMP_5
\
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)",
		node_expression="require(bool)(keccak256()(abi.encodePacked(Nu Token)) == Bank(msg.sender).supportsToken())",
		node_irs="TMP_2(bytes) = SOLIDITY_CALL abi.encodePacked()(Nu Token)
TMP_3(bytes32) = SOLIDITY_CALL keccak256()(TMP_2)
TMP_4 = CONVERT msg.sender \
to Bank
TMP_5(bytes32) = HIGH_LEVEL_CALL, dest:TMP_4(Bank), function:supportsToken, arguments:[]  
TMP_6(bool) = TMP_3 == TMP_5
\
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)",
		node_type=EXPRESSION,
		source_file="modifier_reentrancy.sol"];
	490 -> 491	[key=0,
		edge_type=next,
		label=Next];
	492	[contract_name=ModifierEntrancy,
		function_fullname="supportsToken()",
		label="Node Type: _
",
		node_expression=None,
		node_irs=None,
		node_type=_,
		source_file="modifier_reentrancy.sol"];
	491 -> 492	[key=0,
		edge_type=next,
		label=Next];
	493	[contract_name=ModifierEntrancy,
		function_fullname="supportsToken()",
		label="modifier_reentrancy.sol_ModifierEntrancy_supportsToken()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="modifier_reentrancy.sol"];
	493 -> 490	[key=0,
		edge_type=next,
		label=Next];
	494	[contract_name=ModifierEntrancy,
		function_fullname="hasNoBalance()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="modifier_reentrancy.sol"];
	495	[contract_name=ModifierEntrancy,
		function_fullname="hasNoBalance()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tokenBalance[msg.sender] == 0)

IRs:
REF_3(uint256) -> tokenBalance[msg.sender]
\
TMP_8(bool) = REF_3 == 0
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)",
		node_expression="require(bool)(tokenBalance[msg.sender] == 0)",
		node_irs="REF_3(uint256) -> tokenBalance[msg.sender]
TMP_8(bool) = REF_3 == 0
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)",
		node_type=EXPRESSION,
		source_file="modifier_reentrancy.sol"];
	494 -> 495	[key=0,
		edge_type=next,
		label=Next];
	496	[contract_name=ModifierEntrancy,
		function_fullname="hasNoBalance()",
		label="Node Type: _
",
		node_expression=None,
		node_irs=None,
		node_type=_,
		source_file="modifier_reentrancy.sol"];
	495 -> 496	[key=0,
		edge_type=next,
		label=Next];
	497	[contract_name=ModifierEntrancy,
		function_fullname="hasNoBalance()",
		label="modifier_reentrancy.sol_ModifierEntrancy_hasNoBalance()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="modifier_reentrancy.sol"];
	497 -> 494	[key=0,
		edge_type=next,
		label=Next];
	498	[contract_name=Bank,
		function_fullname="supportsToken()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="modifier_reentrancy.sol"];
	499	[contract_name=Bank,
		function_fullname="supportsToken()",
		label="Node Type: RETURN

EXPRESSION:
(keccak256()(abi.encodePacked(Nu Token)))

IRs:
TMP_10(bytes) = SOLIDITY_CALL abi.encodePacked()(\
Nu Token)
TMP_11(bytes32) = SOLIDITY_CALL keccak256()(TMP_10)
RETURN TMP_11",
		node_expression="(keccak256()(abi.encodePacked(Nu Token)))",
		node_irs="TMP_10(bytes) = SOLIDITY_CALL abi.encodePacked()(Nu Token)
TMP_11(bytes32) = SOLIDITY_CALL keccak256()(TMP_10)
RETURN TMP_11",
		node_type=RETURN,
		source_file="modifier_reentrancy.sol"];
	498 -> 499	[key=0,
		edge_type=next,
		label=Next];
	500	[contract_name=Bank,
		function_fullname="supportsToken()",
		label="modifier_reentrancy.sol_Bank_supportsToken()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="modifier_reentrancy.sol"];
	500 -> 498	[key=0,
		edge_type=next,
		label=Next];
	501	[contract_name=attack,
		function_fullname="supportsToken()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="modifier_reentrancy.sol"];
	502	[contract_name=attack,
		function_fullname="supportsToken()",
		label="Node Type: IF

EXPRESSION:
! hasBeenCalled

IRs:
TMP_12 = ! hasBeenCalled 
CONDITION TMP_12",
		node_expression="! hasBeenCalled",
		node_irs="TMP_12 = ! hasBeenCalled 
CONDITION TMP_12",
		node_type=IF,
		source_file="modifier_reentrancy.sol"];
	501 -> 502	[key=0,
		edge_type=next,
		label=Next];
	503	[contract_name=attack,
		function_fullname="supportsToken()",
		label="Node Type: EXPRESSION

EXPRESSION:
hasBeenCalled = true

IRs:
hasBeenCalled(bool) := True(bool)",
		node_expression="hasBeenCalled = true",
		node_irs="hasBeenCalled(bool) := True(bool)",
		node_type=EXPRESSION,
		source_file="modifier_reentrancy.sol"];
	502 -> 503	[key=0,
		edge_type=if_true,
		label=True];
	505	[contract_name=attack,
		function_fullname="supportsToken()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="modifier_reentrancy.sol"];
	502 -> 505	[key=0,
		edge_type=if_false,
		label=False];
	504	[contract_name=attack,
		function_fullname="supportsToken()",
		label="Node Type: EXPRESSION

EXPRESSION:
ModifierEntrancy(msg.sender).airDrop()

IRs:
TMP_13 = CONVERT msg.sender to ModifierEntrancy
\
HIGH_LEVEL_CALL, dest:TMP_13(ModifierEntrancy), function:airDrop, arguments:[]  ",
		node_expression="ModifierEntrancy(msg.sender).airDrop()",
		node_irs="TMP_13 = CONVERT msg.sender to ModifierEntrancy
HIGH_LEVEL_CALL, dest:TMP_13(ModifierEntrancy), function:airDrop, arguments:[]  ",
		node_type=EXPRESSION,
		source_file="modifier_reentrancy.sol"];
	503 -> 504	[key=0,
		edge_type=next,
		label=Next];
	504 -> 505	[key=0,
		edge_type=next,
		label=Next];
	506	[contract_name=attack,
		function_fullname="supportsToken()",
		label="Node Type: RETURN

EXPRESSION:
(keccak256()(abi.encodePacked(Nu Token)))

IRs:
TMP_15(bytes) = SOLIDITY_CALL abi.encodePacked()(\
Nu Token)
TMP_16(bytes32) = SOLIDITY_CALL keccak256()(TMP_15)
RETURN TMP_16",
		node_expression="(keccak256()(abi.encodePacked(Nu Token)))",
		node_irs="TMP_15(bytes) = SOLIDITY_CALL abi.encodePacked()(Nu Token)
TMP_16(bytes32) = SOLIDITY_CALL keccak256()(TMP_15)
RETURN TMP_16",
		node_type=RETURN,
		source_file="modifier_reentrancy.sol"];
	505 -> 506	[key=0,
		edge_type=next,
		label=Next];
	507	[contract_name=attack,
		function_fullname="supportsToken()",
		label="modifier_reentrancy.sol_attack_supportsToken()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="modifier_reentrancy.sol"];
	507 -> 501	[key=0,
		edge_type=next,
		label=Next];
	508	[contract_name=attack,
		function_fullname="call(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="modifier_reentrancy.sol"];
	509	[contract_name=attack,
		function_fullname="call(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
ModifierEntrancy(token).airDrop()

IRs:
TMP_17 = CONVERT token to ModifierEntrancy
HIGH_LEVEL_\
CALL, dest:TMP_17(ModifierEntrancy), function:airDrop, arguments:[]  ",
		node_expression="ModifierEntrancy(token).airDrop()",
		node_irs="TMP_17 = CONVERT token to ModifierEntrancy
HIGH_LEVEL_CALL, dest:TMP_17(ModifierEntrancy), function:airDrop, arguments:[]  ",
		node_type=EXPRESSION,
		source_file="modifier_reentrancy.sol"];
	508 -> 509	[key=0,
		edge_type=next,
		label=Next];
	510	[contract_name=attack,
		function_fullname="call(address)",
		label="modifier_reentrancy.sol_attack_call(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="modifier_reentrancy.sol"];
	510 -> 508	[key=0,
		edge_type=next,
		label=Next];
	511	[contract_name=U_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	512	[contract_name=U_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_0(U_BANK.Holder) -> Acc[msg.sender]
acc(U_BANK.Holder) := REF_\
0(U_BANK.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_0(U_BANK.Holder) -> Acc[msg.sender]
acc(U_BANK.Holder) := REF_0(U_BANK.Holder)",
		node_type="NEW VARIABLE",
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	511 -> 512	[key=0,
		edge_type=next,
		label=Next];
	513	[contract_name=U_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance += msg.value

IRs:
REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_expression="acc.balance += msg.value",
		node_irs="REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	512 -> 513	[key=0,
		edge_type=next,
		label=Next];
	515	[contract_name=U_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: IF

EXPRESSION:
_unlockTime > now

IRs:
TMP_1(bool) = _unlockTime > now
CONDITION TMP_1",
		node_expression="_unlockTime > now",
		node_irs="TMP_1(bool) = _unlockTime > now
CONDITION TMP_1",
		node_type=IF,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	513 -> 515	[key=0,
		edge_type=next,
		label=Next];
	514	[contract_name=U_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="LogFile.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	516	[contract_name=U_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = _unlockTime

IRs:
REF_3(uint256) -> acc.unlockTime
REF_3 (->acc) := _unlockTime(\
uint256)",
		node_expression="acc.unlockTime = _unlockTime",
		node_irs="REF_3(uint256) -> acc.unlockTime
REF_3 (->acc) := _unlockTime(uint256)",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	515 -> 516	[key=0,
		edge_type=if_true,
		label=True];
	517	[contract_name=U_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = now

IRs:
REF_4(uint256) -> acc.unlockTime
REF_4 (->acc) := now(uint256)",
		node_expression="acc.unlockTime = now",
		node_irs="REF_4(uint256) -> acc.unlockTime
REF_4 (->acc) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	515 -> 517	[key=0,
		edge_type=if_false,
		label=False];
	518	[contract_name=U_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	516 -> 518	[key=0,
		edge_type=next,
		label=Next];
	517 -> 518	[key=0,
		edge_type=next,
		label=Next];
	518 -> 514	[key=0,
		edge_type=next,
		label=Next];
	519	[contract_name=U_BANK,
		function_fullname="Put(uint256)",
		label="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol_U_BANK_Put(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	519 -> 511	[key=0,
		edge_type=next,
		label=Next];
	520	[contract_name=U_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	521	[contract_name=U_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_5(U_BANK.Holder) -> Acc[msg.sender]
acc(U_BANK.Holder) := REF_\
5(U_BANK.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_5(U_BANK.Holder) -> Acc[msg.sender]
acc(U_BANK.Holder) := REF_5(U_BANK.Holder)",
		node_type="NEW VARIABLE",
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	520 -> 521	[key=0,
		edge_type=next,
		label=Next];
	522	[contract_name=U_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime

IRs:
REF_6(uint256) -> acc.balance
\
TMP_2(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_3(bool) = REF_7 >= _am
TMP_4(bool) = TMP_2 && TMP_3
REF_8(uint256) \
-> acc.unlockTime
TMP_5(bool) = now > REF_8
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_expression="acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime",
		node_irs="REF_6(uint256) -> acc.balance
TMP_2(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_3(bool) = REF_7 >= _am
TMP_4(bool) = \
TMP_2 && TMP_3
REF_8(uint256) -> acc.unlockTime
TMP_5(bool) = now > REF_8
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_type=IF,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	521 -> 522	[key=0,
		edge_type=next,
		label=Next];
	523	[contract_name=U_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_8",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_8",
		node_type=IF,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	522 -> 523	[key=0,
		edge_type=if_true,
		label=True];
	527	[contract_name=U_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	522 -> 527	[key=0,
		edge_type=if_false,
		label=False];
	524	[contract_name=U_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance -= _am

IRs:
REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_expression="acc.balance -= _am",
		node_irs="REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	523 -> 524	[key=0,
		edge_type=if_true,
		label=True];
	526	[contract_name=U_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	523 -> 526	[key=0,
		edge_type=if_false,
		label=False];
	525	[contract_name=U_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="LogFile.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	524 -> 525	[key=0,
		edge_type=next,
		label=Next];
	525 -> 526	[key=0,
		edge_type=next,
		label=Next];
	526 -> 527	[key=0,
		edge_type=next,
		label=Next];
	528	[contract_name=U_BANK,
		function_fullname="Collect(uint256)",
		label="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol_U_BANK_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	528 -> 520	[key=0,
		edge_type=next,
		label=Next];
	529	[contract_name=U_BANK,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	530	[contract_name=U_BANK,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Put(0)

IRs:
INTERNAL_CALL, U_BANK.Put(uint256)(0)",
		node_expression="Put(0)",
		node_irs="INTERNAL_CALL, U_BANK.Put(uint256)(0)",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	529 -> 530	[key=0,
		edge_type=next,
		label=Next];
	531	[contract_name=U_BANK,
		function_fullname="fallback()",
		label="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol_U_BANK_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	531 -> 529	[key=0,
		edge_type=next,
		label=Next];
	532	[contract_name=U_BANK,
		function_fullname="U_BANK(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	533	[contract_name=U_BANK,
		function_fullname="U_BANK(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile = Log(log)

IRs:
TMP_11 = CONVERT log to Log
LogFile(Log) := TMP_11(Log)",
		node_expression="LogFile = Log(log)",
		node_irs="TMP_11 = CONVERT log to Log
LogFile(Log) := TMP_11(Log)",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	532 -> 533	[key=0,
		edge_type=next,
		label=Next];
	534	[contract_name=U_BANK,
		function_fullname="U_BANK(address)",
		label="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol_U_BANK_U_BANK(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	534 -> 532	[key=0,
		edge_type=next,
		label=Next];
	535	[contract_name=U_BANK,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinSum = 2000000000000000000

IRs:
MinSum(uint256) := 2000000000000000000(uint256)",
		node_expression="MinSum = 2000000000000000000",
		node_irs="MinSum(uint256) := 2000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	536	[contract_name=U_BANK,
		function_fullname="slitherConstructorVariables()",
		label="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol_U_BANK_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	536 -> 535	[key=0,
		edge_type=next,
		label=Next];
	537	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	538	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	537 -> 538	[key=0,
		edge_type=next,
		label=Next];
	539	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	538 -> 539	[key=0,
		edge_type=next,
		label=Next];
	540	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	539 -> 540	[key=0,
		edge_type=next,
		label=Next];
	541	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	540 -> 541	[key=0,
		edge_type=next,
		label=Next];
	542	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_18 -> LENGTH History
TMP_13(uint256) := REF_18(uint256)
TMP_14(\
uint256) = TMP_13 + 1
REF_18 (->History) := TMP_14(uint256)
REF_19(Log.Message) -> History[TMP_13]
REF_19 (->History) := LastMsg(\
Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_18 -> LENGTH History
TMP_13(uint256) := REF_18(uint256)
TMP_14(uint256) = TMP_13 + 1
REF_18 (->History) := TMP_14(uint256)
REF_\
19(Log.Message) -> History[TMP_13]
REF_19 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	541 -> 542	[key=0,
		edge_type=next,
		label=Next];
	543	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol"];
	543 -> 537	[key=0,
		edge_type=next,
		label=Next];
	544	[contract_name=Private_Bank,
		function_fullname="Private_Bank(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	545	[contract_name=Private_Bank,
		function_fullname="Private_Bank(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog = Log(_log)

IRs:
TMP_0 = CONVERT _log to Log
TransferLog(Log) := TMP_0(Log)",
		node_expression="TransferLog = Log(_log)",
		node_irs="TMP_0 = CONVERT _log to Log
TransferLog(Log) := TMP_0(Log)",
		node_type=EXPRESSION,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	544 -> 545	[key=0,
		edge_type=next,
		label=Next];
	546	[contract_name=Private_Bank,
		function_fullname="Private_Bank(address)",
		label="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol_Private_Bank_Private_Bank(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	546 -> 544	[key=0,
		edge_type=next,
		label=Next];
	547	[contract_name=Private_Bank,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	548	[contract_name=Private_Bank,
		function_fullname="Deposit()",
		label="Node Type: IF

EXPRESSION:
msg.value > MinDeposit

IRs:
TMP_1(bool) = msg.value > MinDeposit
CONDITION TMP_1",
		node_expression="msg.value > MinDeposit",
		node_irs="TMP_1(bool) = msg.value > MinDeposit
CONDITION TMP_1",
		node_type=IF,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	547 -> 548	[key=0,
		edge_type=next,
		label=Next];
	549	[contract_name=Private_Bank,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	548 -> 549	[key=0,
		edge_type=if_true,
		label=True];
	551	[contract_name=Private_Bank,
		function_fullname="Deposit()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	548 -> 551	[key=0,
		edge_type=if_false,
		label=False];
	550	[contract_name=Private_Bank,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,msg.value,Deposit)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(\
Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_expression="TransferLog.AddMessage(msg.sender,msg.value,Deposit)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_type=EXPRESSION,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	549 -> 550	[key=0,
		edge_type=next,
		label=Next];
	550 -> 551	[key=0,
		edge_type=next,
		label=Next];
	552	[contract_name=Private_Bank,
		function_fullname="Deposit()",
		label="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol_Private_Bank_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	552 -> 547	[key=0,
		edge_type=next,
		label=Next];
	553	[contract_name=Private_Bank,
		function_fullname="CashOut(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	554	[contract_name=Private_Bank,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
_am <= balances[msg.sender]

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_3(bool) = _am <= REF_2
CONDITION \
TMP_3",
		node_expression="_am <= balances[msg.sender]",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_3(bool) = _am <= REF_2
CONDITION TMP_3",
		node_type=IF,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	553 -> 554	[key=0,
		edge_type=next,
		label=Next];
	555	[contract_name=Private_Bank,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_5(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_5",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_5(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_5",
		node_type=IF,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	554 -> 555	[key=0,
		edge_type=if_true,
		label=True];
	559	[contract_name=Private_Bank,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	554 -> 559	[key=0,
		edge_type=if_false,
		label=False];
	556	[contract_name=Private_Bank,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = \
REF_5 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - _am",
		node_type=EXPRESSION,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	555 -> 556	[key=0,
		edge_type=if_true,
		label=True];
	558	[contract_name=Private_Bank,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	555 -> 558	[key=0,
		edge_type=if_false,
		label=False];
	557	[contract_name=Private_Bank,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,_am,CashOut)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(Log), \
function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_expression="TransferLog.AddMessage(msg.sender,_am,CashOut)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_type=EXPRESSION,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	556 -> 557	[key=0,
		edge_type=next,
		label=Next];
	557 -> 558	[key=0,
		edge_type=next,
		label=Next];
	558 -> 559	[key=0,
		edge_type=next,
		label=Next];
	560	[contract_name=Private_Bank,
		function_fullname="CashOut(uint256)",
		label="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol_Private_Bank_CashOut(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	560 -> 553	[key=0,
		edge_type=next,
		label=Next];
	561	[contract_name=Private_Bank,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	562	[contract_name=Private_Bank,
		function_fullname="fallback()",
		label="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol_Private_Bank_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	562 -> 561	[key=0,
		edge_type=next,
		label=Next];
	563	[contract_name=Private_Bank,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinDeposit = 1000000000000000000

IRs:
MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_expression="MinDeposit = 1000000000000000000",
		node_irs="MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	564	[contract_name=Private_Bank,
		function_fullname="slitherConstructorVariables()",
		label="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol_Private_Bank_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	564 -> 563	[key=0,
		edge_type=next,
		label=Next];
	565	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	566	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	565 -> 566	[key=0,
		edge_type=next,
		label=Next];
	567	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	566 -> 567	[key=0,
		edge_type=next,
		label=Next];
	568	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	567 -> 568	[key=0,
		edge_type=next,
		label=Next];
	569	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	568 -> 569	[key=0,
		edge_type=next,
		label=Next];
	570	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_12 -> LENGTH History
TMP_8(uint256) := REF_12(uint256)
TMP_9(\
uint256) = TMP_8 + 1
REF_12 (->History) := TMP_9(uint256)
REF_13(Log.Message) -> History[TMP_8]
REF_13 (->History) := LastMsg(Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_12 -> LENGTH History
TMP_8(uint256) := REF_12(uint256)
TMP_9(uint256) = TMP_8 + 1
REF_12 (->History) := TMP_9(uint256)
REF_13(\
Log.Message) -> History[TMP_8]
REF_13 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	569 -> 570	[key=0,
		edge_type=next,
		label=Next];
	571	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol"];
	571 -> 565	[key=0,
		edge_type=next,
		label=Next];
	572	[contract_name=EtherBank,
		function_fullname="getBalance(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="etherbank.sol"];
	573	[contract_name=EtherBank,
		function_fullname="getBalance(address)",
		label="Node Type: RETURN

EXPRESSION:
userBalances[user]

IRs:
REF_0(uint256) -> userBalances[user]
RETURN REF_0",
		node_expression="userBalances[user]",
		node_irs="REF_0(uint256) -> userBalances[user]
RETURN REF_0",
		node_type=RETURN,
		source_file="etherbank.sol"];
	572 -> 573	[key=0,
		edge_type=next,
		label=Next];
	574	[contract_name=EtherBank,
		function_fullname="getBalance(address)",
		label="etherbank.sol_EtherBank_getBalance(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="etherbank.sol"];
	574 -> 572	[key=0,
		edge_type=next,
		label=Next];
	575	[contract_name=EtherBank,
		function_fullname="addToBalance()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="etherbank.sol"];
	576	[contract_name=EtherBank,
		function_fullname="addToBalance()",
		label="Node Type: EXPRESSION

EXPRESSION:
userBalances[msg.sender] += msg.value

IRs:
REF_1(uint256) -> userBalances[msg.sender]
REF_1(\
-> userBalances) = REF_1 + msg.value",
		node_expression="userBalances[msg.sender] += msg.value",
		node_irs="REF_1(uint256) -> userBalances[msg.sender]
REF_1(-> userBalances) = REF_1 + msg.value",
		node_type=EXPRESSION,
		source_file="etherbank.sol"];
	575 -> 576	[key=0,
		edge_type=next,
		label=Next];
	577	[contract_name=EtherBank,
		function_fullname="addToBalance()",
		label="etherbank.sol_EtherBank_addToBalance()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="etherbank.sol"];
	577 -> 575	[key=0,
		edge_type=next,
		label=Next];
	578	[contract_name=EtherBank,
		function_fullname="withdrawBalance()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="etherbank.sol"];
	579	[contract_name=EtherBank,
		function_fullname="withdrawBalance()",
		label="Node Type: NEW VARIABLE

EXPRESSION:
amountToWithdraw = userBalances[msg.sender]

IRs:
REF_2(uint256) -> userBalances[msg.sender]
\
amountToWithdraw(uint256) := REF_2(uint256)",
		node_expression="amountToWithdraw = userBalances[msg.sender]",
		node_irs="REF_2(uint256) -> userBalances[msg.sender]
amountToWithdraw(uint256) := REF_2(uint256)",
		node_type="NEW VARIABLE",
		source_file="etherbank.sol"];
	578 -> 579	[key=0,
		edge_type=next,
		label=Next];
	580	[contract_name=EtherBank,
		function_fullname="withdrawBalance()",
		label="Node Type: IF

EXPRESSION:
! (msg.sender.call.value(amountToWithdraw)())

IRs:
TMP_1(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:\
call, arguments:[] value:amountToWithdraw 
TMP_2 = ! TMP_1 
CONDITION TMP_2",
		node_expression="! (msg.sender.call.value(amountToWithdraw)())",
		node_irs="TMP_1(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amountToWithdraw 
TMP_2 = ! TMP_1 
CONDITION TMP_\
2",
		node_type=IF,
		source_file="etherbank.sol"];
	579 -> 580	[key=0,
		edge_type=next,
		label=Next];
	581	[contract_name=EtherBank,
		function_fullname="withdrawBalance()",
		label="Node Type: THROW
",
		node_expression=None,
		node_irs=None,
		node_type=THROW,
		source_file="etherbank.sol"];
	580 -> 581	[key=0,
		edge_type=if_true,
		label=True];
	582	[contract_name=EtherBank,
		function_fullname="withdrawBalance()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="etherbank.sol"];
	580 -> 582	[key=0,
		edge_type=if_false,
		label=False];
	583	[contract_name=EtherBank,
		function_fullname="withdrawBalance()",
		label="Node Type: EXPRESSION

EXPRESSION:
userBalances[msg.sender] = 0

IRs:
REF_5(uint256) -> userBalances[msg.sender]
REF_5 (->userBalances) := \
0(uint256)",
		node_expression="userBalances[msg.sender] = 0",
		node_irs="REF_5(uint256) -> userBalances[msg.sender]
REF_5 (->userBalances) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="etherbank.sol"];
	582 -> 583	[key=0,
		edge_type=next,
		label=Next];
	584	[contract_name=EtherBank,
		function_fullname="withdrawBalance()",
		label="etherbank.sol_EtherBank_withdrawBalance()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="etherbank.sol"];
	584 -> 578	[key=0,
		edge_type=next,
		label=Next];
	585	[contract_name=Reentrance,
		function_fullname="getBalance(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrancy_simple.sol"];
	586	[contract_name=Reentrance,
		function_fullname="getBalance(address)",
		label="Node Type: RETURN

EXPRESSION:
userBalance[u]

IRs:
REF_0(uint256) -> userBalance[u]
RETURN REF_0",
		node_expression="userBalance[u]",
		node_irs="REF_0(uint256) -> userBalance[u]
RETURN REF_0",
		node_type=RETURN,
		source_file="reentrancy_simple.sol"];
	585 -> 586	[key=0,
		edge_type=next,
		label=Next];
	587	[contract_name=Reentrance,
		function_fullname="getBalance(address)",
		label="reentrancy_simple.sol_Reentrance_getBalance(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrancy_simple.sol"];
	587 -> 585	[key=0,
		edge_type=next,
		label=Next];
	588	[contract_name=Reentrance,
		function_fullname="addToBalance()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrancy_simple.sol"];
	589	[contract_name=Reentrance,
		function_fullname="addToBalance()",
		label="Node Type: EXPRESSION

EXPRESSION:
userBalance[msg.sender] += msg.value

IRs:
REF_1(uint256) -> userBalance[msg.sender]
REF_1(-> \
userBalance) = REF_1 + msg.value",
		node_expression="userBalance[msg.sender] += msg.value",
		node_irs="REF_1(uint256) -> userBalance[msg.sender]
REF_1(-> userBalance) = REF_1 + msg.value",
		node_type=EXPRESSION,
		source_file="reentrancy_simple.sol"];
	588 -> 589	[key=0,
		edge_type=next,
		label=Next];
	590	[contract_name=Reentrance,
		function_fullname="addToBalance()",
		label="reentrancy_simple.sol_Reentrance_addToBalance()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrancy_simple.sol"];
	590 -> 588	[key=0,
		edge_type=next,
		label=Next];
	591	[contract_name=Reentrance,
		function_fullname="withdrawBalance()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrancy_simple.sol"];
	592	[contract_name=Reentrance,
		function_fullname="withdrawBalance()",
		label="Node Type: IF

EXPRESSION:
! (msg.sender.call.value(userBalance[msg.sender])())

IRs:
REF_4(uint256) -> userBalance[msg.sender]
\
TMP_1(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:REF_4 
TMP_2 = ! TMP_1 
CONDITION TMP_2",
		node_expression="! (msg.sender.call.value(userBalance[msg.sender])())",
		node_irs="REF_4(uint256) -> userBalance[msg.sender]
TMP_1(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:REF_4 
\
TMP_2 = ! TMP_1 
CONDITION TMP_2",
		node_type=IF,
		source_file="reentrancy_simple.sol"];
	591 -> 592	[key=0,
		edge_type=next,
		label=Next];
	593	[contract_name=Reentrance,
		function_fullname="withdrawBalance()",
		label="Node Type: THROW
",
		node_expression=None,
		node_irs=None,
		node_type=THROW,
		source_file="reentrancy_simple.sol"];
	592 -> 593	[key=0,
		edge_type=if_true,
		label=True];
	594	[contract_name=Reentrance,
		function_fullname="withdrawBalance()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="reentrancy_simple.sol"];
	592 -> 594	[key=0,
		edge_type=if_false,
		label=False];
	595	[contract_name=Reentrance,
		function_fullname="withdrawBalance()",
		label="Node Type: EXPRESSION

EXPRESSION:
userBalance[msg.sender] = 0

IRs:
REF_5(uint256) -> userBalance[msg.sender]
REF_5 (->userBalance) := \
0(uint256)",
		node_expression="userBalance[msg.sender] = 0",
		node_irs="REF_5(uint256) -> userBalance[msg.sender]
REF_5 (->userBalance) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="reentrancy_simple.sol"];
	594 -> 595	[key=0,
		edge_type=next,
		label=Next];
	596	[contract_name=Reentrance,
		function_fullname="withdrawBalance()",
		label="reentrancy_simple.sol_Reentrance_withdrawBalance()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrancy_simple.sol"];
	596 -> 591	[key=0,
		edge_type=next,
		label=Next];
	597	[contract_name=ReentrancyDAO,
		function_fullname="withdrawAll()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrancy_dao.sol"];
	598	[contract_name=ReentrancyDAO,
		function_fullname="withdrawAll()",
		label="Node Type: NEW VARIABLE

EXPRESSION:
oCredit = credit[msg.sender]

IRs:
REF_0(uint256) -> credit[msg.sender]
oCredit(uint256) := \
REF_0(uint256)",
		node_expression="oCredit = credit[msg.sender]",
		node_irs="REF_0(uint256) -> credit[msg.sender]
oCredit(uint256) := REF_0(uint256)",
		node_type="NEW VARIABLE",
		source_file="reentrancy_dao.sol"];
	597 -> 598	[key=0,
		edge_type=next,
		label=Next];
	599	[contract_name=ReentrancyDAO,
		function_fullname="withdrawAll()",
		label="Node Type: IF

EXPRESSION:
oCredit > 0

IRs:
TMP_0(bool) = oCredit > 0
CONDITION TMP_0",
		node_expression="oCredit > 0",
		node_irs="TMP_0(bool) = oCredit > 0
CONDITION TMP_0",
		node_type=IF,
		source_file="reentrancy_dao.sol"];
	598 -> 599	[key=0,
		edge_type=next,
		label=Next];
	600	[contract_name=ReentrancyDAO,
		function_fullname="withdrawAll()",
		label="Node Type: EXPRESSION

EXPRESSION:
balance -= oCredit

IRs:
balance(uint256) = balance - oCredit",
		node_expression="balance -= oCredit",
		node_irs="balance(uint256) = balance - oCredit",
		node_type=EXPRESSION,
		source_file="reentrancy_dao.sol"];
	599 -> 600	[key=0,
		edge_type=if_true,
		label=True];
	604	[contract_name=ReentrancyDAO,
		function_fullname="withdrawAll()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="reentrancy_dao.sol"];
	599 -> 604	[key=0,
		edge_type=if_false,
		label=False];
	601	[contract_name=ReentrancyDAO,
		function_fullname="withdrawAll()",
		label="Node Type: NEW VARIABLE

EXPRESSION:
callResult = msg.sender.call.value(oCredit)()

IRs:
TMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, \
function:call, arguments:[] value:oCredit 
callResult(bool) := TMP_2(bool)",
		node_expression="callResult = msg.sender.call.value(oCredit)()",
		node_irs="TMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:oCredit 
callResult(bool) := TMP_2(bool)",
		node_type="NEW VARIABLE",
		source_file="reentrancy_dao.sol"];
	600 -> 601	[key=0,
		edge_type=next,
		label=Next];
	602	[contract_name=ReentrancyDAO,
		function_fullname="withdrawAll()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(callResult)

IRs:
TMP_3(None) = SOLIDITY_CALL require(bool)(callResult)",
		node_expression="require(bool)(callResult)",
		node_irs="TMP_3(None) = SOLIDITY_CALL require(bool)(callResult)",
		node_type=EXPRESSION,
		source_file="reentrancy_dao.sol"];
	601 -> 602	[key=0,
		edge_type=next,
		label=Next];
	603	[contract_name=ReentrancyDAO,
		function_fullname="withdrawAll()",
		label="Node Type: EXPRESSION

EXPRESSION:
credit[msg.sender] = 0

IRs:
REF_3(uint256) -> credit[msg.sender]
REF_3 (->credit) := 0(uint256)",
		node_expression="credit[msg.sender] = 0",
		node_irs="REF_3(uint256) -> credit[msg.sender]
REF_3 (->credit) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="reentrancy_dao.sol"];
	602 -> 603	[key=0,
		edge_type=next,
		label=Next];
	603 -> 604	[key=0,
		edge_type=next,
		label=Next];
	605	[contract_name=ReentrancyDAO,
		function_fullname="withdrawAll()",
		label="reentrancy_dao.sol_ReentrancyDAO_withdrawAll()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrancy_dao.sol"];
	605 -> 597	[key=0,
		edge_type=next,
		label=Next];
	606	[contract_name=ReentrancyDAO,
		function_fullname="deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrancy_dao.sol"];
	607	[contract_name=ReentrancyDAO,
		function_fullname="deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
credit[msg.sender] += msg.value

IRs:
REF_4(uint256) -> credit[msg.sender]
REF_4(-> credit) = \
REF_4 + msg.value",
		node_expression="credit[msg.sender] += msg.value",
		node_irs="REF_4(uint256) -> credit[msg.sender]
REF_4(-> credit) = REF_4 + msg.value",
		node_type=EXPRESSION,
		source_file="reentrancy_dao.sol"];
	606 -> 607	[key=0,
		edge_type=next,
		label=Next];
	608	[contract_name=ReentrancyDAO,
		function_fullname="deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balance += msg.value

IRs:
balance(uint256) = balance + msg.value",
		node_expression="balance += msg.value",
		node_irs="balance(uint256) = balance + msg.value",
		node_type=EXPRESSION,
		source_file="reentrancy_dao.sol"];
	607 -> 608	[key=0,
		edge_type=next,
		label=Next];
	609	[contract_name=ReentrancyDAO,
		function_fullname="deposit()",
		label="reentrancy_dao.sol_ReentrancyDAO_deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrancy_dao.sol"];
	609 -> 606	[key=0,
		edge_type=next,
		label=Next];
	610	[contract_name=PrivateDeposit,
		function_fullname="PrivateDeposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	611	[contract_name=PrivateDeposit,
		function_fullname="PrivateDeposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)",
		node_expression="owner = msg.sender",
		node_irs="owner(address) := msg.sender(address)",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	610 -> 611	[key=0,
		edge_type=next,
		label=Next];
	612	[contract_name=PrivateDeposit,
		function_fullname="PrivateDeposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog = new Log()

IRs:
TMP_1 = new Log() 
TransferLog(Log) := TMP_1(Log)",
		node_expression="TransferLog = new Log()",
		node_irs="TMP_1 = new Log() 
TransferLog(Log) := TMP_1(Log)",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	611 -> 612	[key=0,
		edge_type=next,
		label=Next];
	613	[contract_name=PrivateDeposit,
		function_fullname="PrivateDeposit()",
		label="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol_PrivateDeposit_PrivateDeposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	613 -> 610	[key=0,
		edge_type=next,
		label=Next];
	614	[contract_name=PrivateDeposit,
		function_fullname="setLog(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	616	[contract_name=PrivateDeposit,
		function_fullname="setLog(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, PrivateDeposit.onlyOwner()()",
		node_expression="onlyOwner()",
		node_irs="MODIFIER_CALL, PrivateDeposit.onlyOwner()()",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	614 -> 616	[key=0,
		edge_type=next,
		label=Next];
	615	[contract_name=PrivateDeposit,
		function_fullname="setLog(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog = Log(_lib)

IRs:
TMP_2 = CONVERT _lib to Log
TransferLog(Log) := TMP_2(Log)",
		node_expression="TransferLog = Log(_lib)",
		node_irs="TMP_2 = CONVERT _lib to Log
TransferLog(Log) := TMP_2(Log)",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	616 -> 615	[key=0,
		edge_type=next,
		label=Next];
	617	[contract_name=PrivateDeposit,
		function_fullname="setLog(address)",
		label="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol_PrivateDeposit_setLog(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	617 -> 614	[key=0,
		edge_type=next,
		label=Next];
	618	[contract_name=PrivateDeposit,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	619	[contract_name=PrivateDeposit,
		function_fullname="Deposit()",
		label="Node Type: IF

EXPRESSION:
msg.value >= MinDeposit

IRs:
TMP_4(bool) = msg.value >= MinDeposit
CONDITION TMP_4",
		node_expression="msg.value >= MinDeposit",
		node_irs="TMP_4(bool) = msg.value >= MinDeposit
CONDITION TMP_4",
		node_type=IF,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	618 -> 619	[key=0,
		edge_type=next,
		label=Next];
	620	[contract_name=PrivateDeposit,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	619 -> 620	[key=0,
		edge_type=if_true,
		label=True];
	622	[contract_name=PrivateDeposit,
		function_fullname="Deposit()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	619 -> 622	[key=0,
		edge_type=if_false,
		label=False];
	621	[contract_name=PrivateDeposit,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,msg.value,Deposit)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(\
Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_expression="TransferLog.AddMessage(msg.sender,msg.value,Deposit)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	620 -> 621	[key=0,
		edge_type=next,
		label=Next];
	621 -> 622	[key=0,
		edge_type=next,
		label=Next];
	623	[contract_name=PrivateDeposit,
		function_fullname="Deposit()",
		label="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol_PrivateDeposit_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	623 -> 618	[key=0,
		edge_type=next,
		label=Next];
	624	[contract_name=PrivateDeposit,
		function_fullname="CashOut(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	625	[contract_name=PrivateDeposit,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
_am <= balances[msg.sender]

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_6(bool) = _am <= REF_2
CONDITION \
TMP_6",
		node_expression="_am <= balances[msg.sender]",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_6(bool) = _am <= REF_2
CONDITION TMP_6",
		node_type=IF,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	624 -> 625	[key=0,
		edge_type=next,
		label=Next];
	626	[contract_name=PrivateDeposit,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_8",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_8",
		node_type=IF,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	625 -> 626	[key=0,
		edge_type=if_true,
		label=True];
	630	[contract_name=PrivateDeposit,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	625 -> 630	[key=0,
		edge_type=if_false,
		label=False];
	627	[contract_name=PrivateDeposit,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = \
REF_5 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - _am",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	626 -> 627	[key=0,
		edge_type=if_true,
		label=True];
	629	[contract_name=PrivateDeposit,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	626 -> 629	[key=0,
		edge_type=if_false,
		label=False];
	628	[contract_name=PrivateDeposit,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,_am,CashOut)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(Log), \
function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_expression="TransferLog.AddMessage(msg.sender,_am,CashOut)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	627 -> 628	[key=0,
		edge_type=next,
		label=Next];
	628 -> 629	[key=0,
		edge_type=next,
		label=Next];
	629 -> 630	[key=0,
		edge_type=next,
		label=Next];
	631	[contract_name=PrivateDeposit,
		function_fullname="CashOut(uint256)",
		label="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol_PrivateDeposit_CashOut(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	631 -> 624	[key=0,
		edge_type=next,
		label=Next];
	632	[contract_name=PrivateDeposit,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	633	[contract_name=PrivateDeposit,
		function_fullname="fallback()",
		label="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol_PrivateDeposit_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	633 -> 632	[key=0,
		edge_type=next,
		label=Next];
	634	[contract_name=PrivateDeposit,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinDeposit = 1000000000000000000

IRs:
MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_expression="MinDeposit = 1000000000000000000",
		node_irs="MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	635	[contract_name=PrivateDeposit,
		function_fullname="slitherConstructorVariables()",
		label="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol_PrivateDeposit_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	635 -> 634	[key=0,
		edge_type=next,
		label=Next];
	636	[contract_name=PrivateDeposit,
		function_fullname="onlyOwner()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	637	[contract_name=PrivateDeposit,
		function_fullname="onlyOwner()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(tx.origin == owner)

IRs:
TMP_10(bool) = tx.origin == owner
TMP_11(None) = SOLIDITY_\
CALL require(bool)(TMP_10)",
		node_expression="require(bool)(tx.origin == owner)",
		node_irs="TMP_10(bool) = tx.origin == owner
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	636 -> 637	[key=0,
		edge_type=next,
		label=Next];
	638	[contract_name=PrivateDeposit,
		function_fullname="onlyOwner()",
		label="Node Type: _
",
		node_expression=None,
		node_irs=None,
		node_type=_,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	637 -> 638	[key=0,
		edge_type=next,
		label=Next];
	639	[contract_name=PrivateDeposit,
		function_fullname="onlyOwner()",
		label="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol_PrivateDeposit_onlyOwner()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	639 -> 636	[key=0,
		edge_type=next,
		label=Next];
	640	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	641	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	640 -> 641	[key=0,
		edge_type=next,
		label=Next];
	642	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	641 -> 642	[key=0,
		edge_type=next,
		label=Next];
	643	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	642 -> 643	[key=0,
		edge_type=next,
		label=Next];
	644	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	643 -> 644	[key=0,
		edge_type=next,
		label=Next];
	645	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_12 -> LENGTH History
TMP_13(uint256) := REF_12(uint256)
TMP_14(\
uint256) = TMP_13 + 1
REF_12 (->History) := TMP_14(uint256)
REF_13(Log.Message) -> History[TMP_13]
REF_13 (->History) := LastMsg(\
Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_12 -> LENGTH History
TMP_13(uint256) := REF_12(uint256)
TMP_14(uint256) = TMP_13 + 1
REF_12 (->History) := TMP_14(uint256)
REF_\
13(Log.Message) -> History[TMP_13]
REF_13 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	644 -> 645	[key=0,
		edge_type=next,
		label=Next];
	646	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol"];
	646 -> 640	[key=0,
		edge_type=next,
		label=Next];
	647	[contract_name=X_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	648	[contract_name=X_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_0(X_WALLET.Holder) -> Acc[msg.sender]
acc(X_WALLET.Holder) := \
REF_0(X_WALLET.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_0(X_WALLET.Holder) -> Acc[msg.sender]
acc(X_WALLET.Holder) := REF_0(X_WALLET.Holder)",
		node_type="NEW VARIABLE",
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	647 -> 648	[key=0,
		edge_type=next,
		label=Next];
	649	[contract_name=X_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance += msg.value

IRs:
REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_expression="acc.balance += msg.value",
		node_irs="REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	648 -> 649	[key=0,
		edge_type=next,
		label=Next];
	651	[contract_name=X_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: IF

EXPRESSION:
_unlockTime > now

IRs:
TMP_1(bool) = _unlockTime > now
CONDITION TMP_1",
		node_expression="_unlockTime > now",
		node_irs="TMP_1(bool) = _unlockTime > now
CONDITION TMP_1",
		node_type=IF,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	649 -> 651	[key=0,
		edge_type=next,
		label=Next];
	650	[contract_name=X_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="LogFile.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	652	[contract_name=X_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = _unlockTime

IRs:
REF_3(uint256) -> acc.unlockTime
REF_3 (->acc) := _unlockTime(\
uint256)",
		node_expression="acc.unlockTime = _unlockTime",
		node_irs="REF_3(uint256) -> acc.unlockTime
REF_3 (->acc) := _unlockTime(uint256)",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	651 -> 652	[key=0,
		edge_type=if_true,
		label=True];
	653	[contract_name=X_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = now

IRs:
REF_4(uint256) -> acc.unlockTime
REF_4 (->acc) := now(uint256)",
		node_expression="acc.unlockTime = now",
		node_irs="REF_4(uint256) -> acc.unlockTime
REF_4 (->acc) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	651 -> 653	[key=0,
		edge_type=if_false,
		label=False];
	654	[contract_name=X_WALLET,
		function_fullname="Put(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	652 -> 654	[key=0,
		edge_type=next,
		label=Next];
	653 -> 654	[key=0,
		edge_type=next,
		label=Next];
	654 -> 650	[key=0,
		edge_type=next,
		label=Next];
	655	[contract_name=X_WALLET,
		function_fullname="Put(uint256)",
		label="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol_X_WALLET_Put(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	655 -> 647	[key=0,
		edge_type=next,
		label=Next];
	656	[contract_name=X_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	657	[contract_name=X_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_5(X_WALLET.Holder) -> Acc[msg.sender]
acc(X_WALLET.Holder) := \
REF_5(X_WALLET.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_5(X_WALLET.Holder) -> Acc[msg.sender]
acc(X_WALLET.Holder) := REF_5(X_WALLET.Holder)",
		node_type="NEW VARIABLE",
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	656 -> 657	[key=0,
		edge_type=next,
		label=Next];
	658	[contract_name=X_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime

IRs:
REF_6(uint256) -> acc.balance
\
TMP_2(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_3(bool) = REF_7 >= _am
TMP_4(bool) = TMP_2 && TMP_3
REF_8(uint256) \
-> acc.unlockTime
TMP_5(bool) = now > REF_8
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_expression="acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime",
		node_irs="REF_6(uint256) -> acc.balance
TMP_2(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_3(bool) = REF_7 >= _am
TMP_4(bool) = \
TMP_2 && TMP_3
REF_8(uint256) -> acc.unlockTime
TMP_5(bool) = now > REF_8
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_type=IF,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	657 -> 658	[key=0,
		edge_type=next,
		label=Next];
	659	[contract_name=X_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_8",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_8",
		node_type=IF,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	658 -> 659	[key=0,
		edge_type=if_true,
		label=True];
	663	[contract_name=X_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	658 -> 663	[key=0,
		edge_type=if_false,
		label=False];
	660	[contract_name=X_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance -= _am

IRs:
REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_expression="acc.balance -= _am",
		node_irs="REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	659 -> 660	[key=0,
		edge_type=if_true,
		label=True];
	662	[contract_name=X_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	659 -> 662	[key=0,
		edge_type=if_false,
		label=False];
	661	[contract_name=X_WALLET,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="LogFile.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	660 -> 661	[key=0,
		edge_type=next,
		label=Next];
	661 -> 662	[key=0,
		edge_type=next,
		label=Next];
	662 -> 663	[key=0,
		edge_type=next,
		label=Next];
	664	[contract_name=X_WALLET,
		function_fullname="Collect(uint256)",
		label="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol_X_WALLET_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	664 -> 656	[key=0,
		edge_type=next,
		label=Next];
	665	[contract_name=X_WALLET,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	666	[contract_name=X_WALLET,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Put(0)

IRs:
INTERNAL_CALL, X_WALLET.Put(uint256)(0)",
		node_expression="Put(0)",
		node_irs="INTERNAL_CALL, X_WALLET.Put(uint256)(0)",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	665 -> 666	[key=0,
		edge_type=next,
		label=Next];
	667	[contract_name=X_WALLET,
		function_fullname="fallback()",
		label="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol_X_WALLET_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	667 -> 665	[key=0,
		edge_type=next,
		label=Next];
	668	[contract_name=X_WALLET,
		function_fullname="X_WALLET(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	669	[contract_name=X_WALLET,
		function_fullname="X_WALLET(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile = Log(log)

IRs:
TMP_11 = CONVERT log to Log
LogFile(Log) := TMP_11(Log)",
		node_expression="LogFile = Log(log)",
		node_irs="TMP_11 = CONVERT log to Log
LogFile(Log) := TMP_11(Log)",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	668 -> 669	[key=0,
		edge_type=next,
		label=Next];
	670	[contract_name=X_WALLET,
		function_fullname="X_WALLET(address)",
		label="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol_X_WALLET_X_WALLET(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	670 -> 668	[key=0,
		edge_type=next,
		label=Next];
	671	[contract_name=X_WALLET,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinSum = 1000000000000000000

IRs:
MinSum(uint256) := 1000000000000000000(uint256)",
		node_expression="MinSum = 1000000000000000000",
		node_irs="MinSum(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	672	[contract_name=X_WALLET,
		function_fullname="slitherConstructorVariables()",
		label="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol_X_WALLET_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	672 -> 671	[key=0,
		edge_type=next,
		label=Next];
	673	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	674	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	673 -> 674	[key=0,
		edge_type=next,
		label=Next];
	675	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	674 -> 675	[key=0,
		edge_type=next,
		label=Next];
	676	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	675 -> 676	[key=0,
		edge_type=next,
		label=Next];
	677	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	676 -> 677	[key=0,
		edge_type=next,
		label=Next];
	678	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_18 -> LENGTH History
TMP_13(uint256) := REF_18(uint256)
TMP_14(\
uint256) = TMP_13 + 1
REF_18 (->History) := TMP_14(uint256)
REF_19(Log.Message) -> History[TMP_13]
REF_19 (->History) := LastMsg(\
Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_18 -> LENGTH History
TMP_13(uint256) := REF_18(uint256)
TMP_14(uint256) = TMP_13 + 1
REF_18 (->History) := TMP_14(uint256)
REF_\
19(Log.Message) -> History[TMP_13]
REF_19 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	677 -> 678	[key=0,
		edge_type=next,
		label=Next];
	679	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol"];
	679 -> 673	[key=0,
		edge_type=next,
		label=Next];
	680	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	681	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	680 -> 681	[key=0,
		edge_type=next,
		label=Next];
	682	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: THROW
",
		node_expression=None,
		node_irs=None,
		node_type=THROW,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	681 -> 682	[key=0,
		edge_type=if_true,
		label=True];
	683	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	681 -> 683	[key=0,
		edge_type=if_false,
		label=False];
	684	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetMinSum(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
MinSum = _val

IRs:
MinSum(uint256) := _val(uint256)",
		node_expression="MinSum = _val",
		node_irs="MinSum(uint256) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	683 -> 684	[key=0,
		edge_type=next,
		label=Next];
	685	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetMinSum(uint256)",
		label="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol_PENNY_BY_PENNY_SetMinSum(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	685 -> 680	[key=0,
		edge_type=next,
		label=Next];
	686	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetLogFile(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	687	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetLogFile(address)",
		label="Node Type: IF

EXPRESSION:
intitalized

IRs:
CONDITION intitalized",
		node_expression=intitalized,
		node_irs="CONDITION intitalized",
		node_type=IF,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	686 -> 687	[key=0,
		edge_type=next,
		label=Next];
	688	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetLogFile(address)",
		label="Node Type: THROW
",
		node_expression=None,
		node_irs=None,
		node_type=THROW,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	687 -> 688	[key=0,
		edge_type=if_true,
		label=True];
	689	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetLogFile(address)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	687 -> 689	[key=0,
		edge_type=if_false,
		label=False];
	690	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetLogFile(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log = LogFile(_log)

IRs:
TMP_0 = CONVERT _log to LogFile
Log(LogFile) := TMP_0(LogFile)",
		node_expression="Log = LogFile(_log)",
		node_irs="TMP_0 = CONVERT _log to LogFile
Log(LogFile) := TMP_0(LogFile)",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	689 -> 690	[key=0,
		edge_type=next,
		label=Next];
	691	[contract_name=PENNY_BY_PENNY,
		function_fullname="SetLogFile(address)",
		label="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol_PENNY_BY_PENNY_SetLogFile(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	691 -> 686	[key=0,
		edge_type=next,
		label=Next];
	692	[contract_name=PENNY_BY_PENNY,
		function_fullname="Initialized()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	693	[contract_name=PENNY_BY_PENNY,
		function_fullname="Initialized()",
		label="Node Type: EXPRESSION

EXPRESSION:
intitalized = true

IRs:
intitalized(bool) := True(bool)",
		node_expression="intitalized = true",
		node_irs="intitalized(bool) := True(bool)",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	692 -> 693	[key=0,
		edge_type=next,
		label=Next];
	694	[contract_name=PENNY_BY_PENNY,
		function_fullname="Initialized()",
		label="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol_PENNY_BY_PENNY_Initialized()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	694 -> 692	[key=0,
		edge_type=next,
		label=Next];
	695	[contract_name=PENNY_BY_PENNY,
		function_fullname="Put(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	696	[contract_name=PENNY_BY_PENNY,
		function_fullname="Put(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_0(PENNY_BY_PENNY.Holder) -> Acc[msg.sender]
acc(PENNY_BY_PENNY.Holder) := \
REF_0(PENNY_BY_PENNY.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_0(PENNY_BY_PENNY.Holder) -> Acc[msg.sender]
acc(PENNY_BY_PENNY.Holder) := REF_0(PENNY_BY_PENNY.Holder)",
		node_type="NEW VARIABLE",
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	695 -> 696	[key=0,
		edge_type=next,
		label=Next];
	697	[contract_name=PENNY_BY_PENNY,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance += msg.value

IRs:
REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_expression="acc.balance += msg.value",
		node_irs="REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	696 -> 697	[key=0,
		edge_type=next,
		label=Next];
	698	[contract_name=PENNY_BY_PENNY,
		function_fullname="Put(uint256)",
		label="Node Type: IF

EXPRESSION:
now + _lockTime > acc.unlockTime

IRs:
TMP_1(uint256) = now + _lockTime
REF_2(uint256) -> acc.unlockTime
\
TMP_2(bool) = TMP_1 > REF_2
CONDITION TMP_2",
		node_expression="now + _lockTime > acc.unlockTime",
		node_irs="TMP_1(uint256) = now + _lockTime
REF_2(uint256) -> acc.unlockTime
TMP_2(bool) = TMP_1 > REF_2
CONDITION TMP_2",
		node_type=IF,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	697 -> 698	[key=0,
		edge_type=next,
		label=Next];
	699	[contract_name=PENNY_BY_PENNY,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = now + _lockTime

IRs:
REF_3(uint256) -> acc.unlockTime
TMP_3(uint256) = now + _\
lockTime
REF_3 (->acc) := TMP_3(uint256)",
		node_expression="acc.unlockTime = now + _lockTime",
		node_irs="REF_3(uint256) -> acc.unlockTime
TMP_3(uint256) = now + _lockTime
REF_3 (->acc) := TMP_3(uint256)",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	698 -> 699	[key=0,
		edge_type=if_true,
		label=True];
	700	[contract_name=PENNY_BY_PENNY,
		function_fullname="Put(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	698 -> 700	[key=0,
		edge_type=if_false,
		label=False];
	699 -> 700	[key=0,
		edge_type=next,
		label=Next];
	701	[contract_name=PENNY_BY_PENNY,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="Log.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	700 -> 701	[key=0,
		edge_type=next,
		label=Next];
	702	[contract_name=PENNY_BY_PENNY,
		function_fullname="Put(uint256)",
		label="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol_PENNY_BY_PENNY_Put(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	702 -> 695	[key=0,
		edge_type=next,
		label=Next];
	703	[contract_name=PENNY_BY_PENNY,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	704	[contract_name=PENNY_BY_PENNY,
		function_fullname="Collect(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_5(PENNY_BY_PENNY.Holder) -> Acc[msg.sender]
acc(PENNY_BY_PENNY.Holder) := \
REF_5(PENNY_BY_PENNY.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_5(PENNY_BY_PENNY.Holder) -> Acc[msg.sender]
acc(PENNY_BY_PENNY.Holder) := REF_5(PENNY_BY_PENNY.Holder)",
		node_type="NEW VARIABLE",
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	703 -> 704	[key=0,
		edge_type=next,
		label=Next];
	705	[contract_name=PENNY_BY_PENNY,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime

IRs:
REF_6(uint256) -> acc.balance
\
TMP_5(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_6(bool) = REF_7 >= _am
TMP_7(bool) = TMP_5 && TMP_6
REF_8(uint256) \
-> acc.unlockTime
TMP_8(bool) = now > REF_8
TMP_9(bool) = TMP_7 && TMP_8
CONDITION TMP_9",
		node_expression="acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime",
		node_irs="REF_6(uint256) -> acc.balance
TMP_5(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_6(bool) = REF_7 >= _am
TMP_7(bool) = \
TMP_5 && TMP_6
REF_8(uint256) -> acc.unlockTime
TMP_8(bool) = now > REF_8
TMP_9(bool) = TMP_7 && TMP_8
CONDITION TMP_9",
		node_type=IF,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	704 -> 705	[key=0,
		edge_type=next,
		label=Next];
	706	[contract_name=PENNY_BY_PENNY,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_11(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_11",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_11(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_11",
		node_type=IF,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	705 -> 706	[key=0,
		edge_type=if_true,
		label=True];
	710	[contract_name=PENNY_BY_PENNY,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	705 -> 710	[key=0,
		edge_type=if_false,
		label=False];
	707	[contract_name=PENNY_BY_PENNY,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance -= _am

IRs:
REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_expression="acc.balance -= _am",
		node_irs="REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	706 -> 707	[key=0,
		edge_type=if_true,
		label=True];
	709	[contract_name=PENNY_BY_PENNY,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	706 -> 709	[key=0,
		edge_type=if_false,
		label=False];
	708	[contract_name=PENNY_BY_PENNY,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Log.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, \
arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="Log.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:Log(LogFile), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	707 -> 708	[key=0,
		edge_type=next,
		label=Next];
	708 -> 709	[key=0,
		edge_type=next,
		label=Next];
	709 -> 710	[key=0,
		edge_type=next,
		label=Next];
	711	[contract_name=PENNY_BY_PENNY,
		function_fullname="Collect(uint256)",
		label="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol_PENNY_BY_PENNY_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	711 -> 703	[key=0,
		edge_type=next,
		label=Next];
	712	[contract_name=PENNY_BY_PENNY,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	713	[contract_name=PENNY_BY_PENNY,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Put(0)

IRs:
INTERNAL_CALL, PENNY_BY_PENNY.Put(uint256)(0)",
		node_expression="Put(0)",
		node_irs="INTERNAL_CALL, PENNY_BY_PENNY.Put(uint256)(0)",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	712 -> 713	[key=0,
		edge_type=next,
		label=Next];
	714	[contract_name=PENNY_BY_PENNY,
		function_fullname="fallback()",
		label="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol_PENNY_BY_PENNY_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	714 -> 712	[key=0,
		edge_type=next,
		label=Next];
	715	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	716	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	715 -> 716	[key=0,
		edge_type=next,
		label=Next];
	717	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	716 -> 717	[key=0,
		edge_type=next,
		label=Next];
	718	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	717 -> 718	[key=0,
		edge_type=next,
		label=Next];
	719	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	718 -> 719	[key=0,
		edge_type=next,
		label=Next];
	720	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_18 -> LENGTH History
TMP_15(uint256) := REF_18(uint256)
TMP_16(\
uint256) = TMP_15 + 1
REF_18 (->History) := TMP_16(uint256)
REF_19(LogFile.Message) -> History[TMP_15]
REF_19 (->History) := LastMsg(\
LogFile.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_18 -> LENGTH History
TMP_15(uint256) := REF_18(uint256)
TMP_16(uint256) = TMP_15 + 1
REF_18 (->History) := TMP_16(uint256)
REF_\
19(LogFile.Message) -> History[TMP_15]
REF_19 (->History) := LastMsg(LogFile.Message)",
		node_type=EXPRESSION,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	719 -> 720	[key=0,
		edge_type=next,
		label=Next];
	721	[contract_name=LogFile,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol_LogFile_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol"];
	721 -> 715	[key=0,
		edge_type=next,
		label=Next];
	722	[contract_name=MY_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	723	[contract_name=MY_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_0(MY_BANK.Holder) -> Acc[msg.sender]
acc(MY_BANK.Holder) := \
REF_0(MY_BANK.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_0(MY_BANK.Holder) -> Acc[msg.sender]
acc(MY_BANK.Holder) := REF_0(MY_BANK.Holder)",
		node_type="NEW VARIABLE",
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	722 -> 723	[key=0,
		edge_type=next,
		label=Next];
	724	[contract_name=MY_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance += msg.value

IRs:
REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_expression="acc.balance += msg.value",
		node_irs="REF_1(uint256) -> acc.balance
REF_1(-> acc) = REF_1 + msg.value",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	723 -> 724	[key=0,
		edge_type=next,
		label=Next];
	727	[contract_name=MY_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: IF

EXPRESSION:
_unlockTime > now

IRs:
TMP_1(bool) = _unlockTime > now
CONDITION TMP_1",
		node_expression="_unlockTime > now",
		node_irs="TMP_1(bool) = _unlockTime > now
CONDITION TMP_1",
		node_type=IF,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	724 -> 727	[key=0,
		edge_type=next,
		label=Next];
	725	[contract_name=MY_BANK,
		function_fullname="Put(uint256)",
		label="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol_MY_BANK_Put(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	725 -> 722	[key=0,
		edge_type=next,
		label=Next];
	726	[contract_name=MY_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,msg.value,Put)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_expression="LogFile.AddMessage(msg.sender,msg.value,Put)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Put']  ",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	728	[contract_name=MY_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = _unlockTime

IRs:
REF_3(uint256) -> acc.unlockTime
REF_3 (->acc) := _unlockTime(\
uint256)",
		node_expression="acc.unlockTime = _unlockTime",
		node_irs="REF_3(uint256) -> acc.unlockTime
REF_3 (->acc) := _unlockTime(uint256)",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	727 -> 728	[key=0,
		edge_type=if_true,
		label=True];
	729	[contract_name=MY_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.unlockTime = now

IRs:
REF_4(uint256) -> acc.unlockTime
REF_4 (->acc) := now(uint256)",
		node_expression="acc.unlockTime = now",
		node_irs="REF_4(uint256) -> acc.unlockTime
REF_4 (->acc) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	727 -> 729	[key=0,
		edge_type=if_false,
		label=False];
	730	[contract_name=MY_BANK,
		function_fullname="Put(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	728 -> 730	[key=0,
		edge_type=next,
		label=Next];
	729 -> 730	[key=0,
		edge_type=next,
		label=Next];
	730 -> 726	[key=0,
		edge_type=next,
		label=Next];
	731	[contract_name=MY_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	732	[contract_name=MY_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
acc = Acc[msg.sender]

IRs:
REF_5(MY_BANK.Holder) -> Acc[msg.sender]
acc(MY_BANK.Holder) := \
REF_5(MY_BANK.Holder)",
		node_expression="acc = Acc[msg.sender]",
		node_irs="REF_5(MY_BANK.Holder) -> Acc[msg.sender]
acc(MY_BANK.Holder) := REF_5(MY_BANK.Holder)",
		node_type="NEW VARIABLE",
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	731 -> 732	[key=0,
		edge_type=next,
		label=Next];
	733	[contract_name=MY_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime

IRs:
REF_6(uint256) -> acc.balance
\
TMP_2(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_3(bool) = REF_7 >= _am
TMP_4(bool) = TMP_2 && TMP_3
REF_8(uint256) \
-> acc.unlockTime
TMP_5(bool) = now > REF_8
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_expression="acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime",
		node_irs="REF_6(uint256) -> acc.balance
TMP_2(bool) = REF_6 >= MinSum
REF_7(uint256) -> acc.balance
TMP_3(bool) = REF_7 >= _am
TMP_4(bool) = \
TMP_2 && TMP_3
REF_8(uint256) -> acc.unlockTime
TMP_5(bool) = now > REF_8
TMP_6(bool) = TMP_4 && TMP_5
CONDITION TMP_6",
		node_type=IF,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	732 -> 733	[key=0,
		edge_type=next,
		label=Next];
	734	[contract_name=MY_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_8",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_8(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_8",
		node_type=IF,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	733 -> 734	[key=0,
		edge_type=if_true,
		label=True];
	738	[contract_name=MY_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	733 -> 738	[key=0,
		edge_type=if_false,
		label=False];
	735	[contract_name=MY_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
acc.balance -= _am

IRs:
REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_expression="acc.balance -= _am",
		node_irs="REF_11(uint256) -> acc.balance
REF_11(-> acc) = REF_11 - _am",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	734 -> 735	[key=0,
		edge_type=if_true,
		label=True];
	737	[contract_name=MY_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	734 -> 737	[key=0,
		edge_type=if_false,
		label=False];
	736	[contract_name=MY_BANK,
		function_fullname="Collect(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile.AddMessage(msg.sender,_am,Collect)

IRs:
HIGH_LEVEL_CALL, dest:LogFile(Log), function:\
AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_expression="LogFile.AddMessage(msg.sender,_am,Collect)",
		node_irs="HIGH_LEVEL_CALL, dest:LogFile(Log), function:AddMessage, arguments:['msg.sender', '_am', 'Collect']  ",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	735 -> 736	[key=0,
		edge_type=next,
		label=Next];
	736 -> 737	[key=0,
		edge_type=next,
		label=Next];
	737 -> 738	[key=0,
		edge_type=next,
		label=Next];
	739	[contract_name=MY_BANK,
		function_fullname="Collect(uint256)",
		label="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol_MY_BANK_Collect(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	739 -> 731	[key=0,
		edge_type=next,
		label=Next];
	740	[contract_name=MY_BANK,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	741	[contract_name=MY_BANK,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
Put(0)

IRs:
INTERNAL_CALL, MY_BANK.Put(uint256)(0)",
		node_expression="Put(0)",
		node_irs="INTERNAL_CALL, MY_BANK.Put(uint256)(0)",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	740 -> 741	[key=0,
		edge_type=next,
		label=Next];
	742	[contract_name=MY_BANK,
		function_fullname="fallback()",
		label="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol_MY_BANK_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	742 -> 740	[key=0,
		edge_type=next,
		label=Next];
	743	[contract_name=MY_BANK,
		function_fullname="MY_BANK(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	744	[contract_name=MY_BANK,
		function_fullname="MY_BANK(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
LogFile = Log(log)

IRs:
TMP_11 = CONVERT log to Log
LogFile(Log) := TMP_11(Log)",
		node_expression="LogFile = Log(log)",
		node_irs="TMP_11 = CONVERT log to Log
LogFile(Log) := TMP_11(Log)",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	743 -> 744	[key=0,
		edge_type=next,
		label=Next];
	745	[contract_name=MY_BANK,
		function_fullname="MY_BANK(address)",
		label="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol_MY_BANK_MY_BANK(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	745 -> 743	[key=0,
		edge_type=next,
		label=Next];
	746	[contract_name=MY_BANK,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinSum = 1000000000000000000

IRs:
MinSum(uint256) := 1000000000000000000(uint256)",
		node_expression="MinSum = 1000000000000000000",
		node_irs="MinSum(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	747	[contract_name=MY_BANK,
		function_fullname="slitherConstructorVariables()",
		label="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol_MY_BANK_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	747 -> 746	[key=0,
		edge_type=next,
		label=Next];
	748	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	749	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_13(address) -> LastMsg.Sender
REF_13 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	748 -> 749	[key=0,
		edge_type=next,
		label=Next];
	750	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_14(uint256) -> LastMsg.Time
REF_14 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	749 -> 750	[key=0,
		edge_type=next,
		label=Next];
	751	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_15(uint256) -> LastMsg.Val
REF_15 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	750 -> 751	[key=0,
		edge_type=next,
		label=Next];
	752	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_16(string) -> LastMsg.Data
REF_16 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	751 -> 752	[key=0,
		edge_type=next,
		label=Next];
	753	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_18 -> LENGTH History
TMP_13(uint256) := REF_18(uint256)
TMP_14(\
uint256) = TMP_13 + 1
REF_18 (->History) := TMP_14(uint256)
REF_19(Log.Message) -> History[TMP_13]
REF_19 (->History) := LastMsg(\
Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_18 -> LENGTH History
TMP_13(uint256) := REF_18(uint256)
TMP_14(uint256) = TMP_13 + 1
REF_18 (->History) := TMP_14(uint256)
REF_\
19(Log.Message) -> History[TMP_13]
REF_19 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	752 -> 753	[key=0,
		edge_type=next,
		label=Next];
	754	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol"];
	754 -> 748	[key=0,
		edge_type=next,
		label=Next];
	755	[contract_name=ETH_FUND,
		function_fullname="ETH_FUND(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	756	[contract_name=ETH_FUND,
		function_fullname="ETH_FUND(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog = Log(_log)

IRs:
TMP_0 = CONVERT _log to Log
TransferLog(Log) := TMP_0(Log)",
		node_expression="TransferLog = Log(_log)",
		node_irs="TMP_0 = CONVERT _log to Log
TransferLog(Log) := TMP_0(Log)",
		node_type=EXPRESSION,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	755 -> 756	[key=0,
		edge_type=next,
		label=Next];
	757	[contract_name=ETH_FUND,
		function_fullname="ETH_FUND(address)",
		label="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol_ETH_FUND_ETH_FUND(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	757 -> 755	[key=0,
		edge_type=next,
		label=Next];
	758	[contract_name=ETH_FUND,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	759	[contract_name=ETH_FUND,
		function_fullname="Deposit()",
		label="Node Type: IF

EXPRESSION:
msg.value > MinDeposit

IRs:
TMP_1(bool) = msg.value > MinDeposit
CONDITION TMP_1",
		node_expression="msg.value > MinDeposit",
		node_irs="TMP_1(bool) = msg.value > MinDeposit
CONDITION TMP_1",
		node_type=IF,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	758 -> 759	[key=0,
		edge_type=next,
		label=Next];
	760	[contract_name=ETH_FUND,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	759 -> 760	[key=0,
		edge_type=if_true,
		label=True];
	763	[contract_name=ETH_FUND,
		function_fullname="Deposit()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	759 -> 763	[key=0,
		edge_type=if_false,
		label=False];
	761	[contract_name=ETH_FUND,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,msg.value,Deposit)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(\
Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_expression="TransferLog.AddMessage(msg.sender,msg.value,Deposit)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_type=EXPRESSION,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	760 -> 761	[key=0,
		edge_type=next,
		label=Next];
	762	[contract_name=ETH_FUND,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
lastBlock = block.number

IRs:
lastBlock(uint256) := block.number(uint256)",
		node_expression="lastBlock = block.number",
		node_irs="lastBlock(uint256) := block.number(uint256)",
		node_type=EXPRESSION,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	761 -> 762	[key=0,
		edge_type=next,
		label=Next];
	762 -> 763	[key=0,
		edge_type=next,
		label=Next];
	764	[contract_name=ETH_FUND,
		function_fullname="Deposit()",
		label="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol_ETH_FUND_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	764 -> 758	[key=0,
		edge_type=next,
		label=Next];
	765	[contract_name=ETH_FUND,
		function_fullname="CashOut(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	766	[contract_name=ETH_FUND,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
_am <= balances[msg.sender] && block.number > lastBlock

IRs:
REF_2(uint256) -> balances[msg.sender]
\
TMP_3(bool) = _am <= REF_2
TMP_4(bool) = block.number > lastBlock
TMP_5(bool) = TMP_3 && TMP_4
CONDITION TMP_5",
		node_expression="_am <= balances[msg.sender] && block.number > lastBlock",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_3(bool) = _am <= REF_2
TMP_4(bool) = block.number > lastBlock
TMP_5(bool) = TMP_3 && \
TMP_4
CONDITION TMP_5",
		node_type=IF,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	765 -> 766	[key=0,
		edge_type=next,
		label=Next];
	767	[contract_name=ETH_FUND,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_7(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_7",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_7(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_7",
		node_type=IF,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	766 -> 767	[key=0,
		edge_type=if_true,
		label=True];
	771	[contract_name=ETH_FUND,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	766 -> 771	[key=0,
		edge_type=if_false,
		label=False];
	768	[contract_name=ETH_FUND,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = \
REF_5 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - _am",
		node_type=EXPRESSION,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	767 -> 768	[key=0,
		edge_type=if_true,
		label=True];
	770	[contract_name=ETH_FUND,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	767 -> 770	[key=0,
		edge_type=if_false,
		label=False];
	769	[contract_name=ETH_FUND,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,_am,CashOut)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(Log), \
function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_expression="TransferLog.AddMessage(msg.sender,_am,CashOut)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_type=EXPRESSION,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	768 -> 769	[key=0,
		edge_type=next,
		label=Next];
	769 -> 770	[key=0,
		edge_type=next,
		label=Next];
	770 -> 771	[key=0,
		edge_type=next,
		label=Next];
	772	[contract_name=ETH_FUND,
		function_fullname="CashOut(uint256)",
		label="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol_ETH_FUND_CashOut(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	772 -> 765	[key=0,
		edge_type=next,
		label=Next];
	773	[contract_name=ETH_FUND,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	774	[contract_name=ETH_FUND,
		function_fullname="fallback()",
		label="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol_ETH_FUND_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	774 -> 773	[key=0,
		edge_type=next,
		label=Next];
	775	[contract_name=ETH_FUND,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinDeposit = 1000000000000000000

IRs:
MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_expression="MinDeposit = 1000000000000000000",
		node_irs="MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	776	[contract_name=ETH_FUND,
		function_fullname="slitherConstructorVariables()",
		label="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol_ETH_FUND_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	776 -> 775	[key=0,
		edge_type=next,
		label=Next];
	777	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	778	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	777 -> 778	[key=0,
		edge_type=next,
		label=Next];
	779	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	778 -> 779	[key=0,
		edge_type=next,
		label=Next];
	780	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	779 -> 780	[key=0,
		edge_type=next,
		label=Next];
	781	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	780 -> 781	[key=0,
		edge_type=next,
		label=Next];
	782	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_12 -> LENGTH History
TMP_10(uint256) := REF_12(uint256)
TMP_11(\
uint256) = TMP_10 + 1
REF_12 (->History) := TMP_11(uint256)
REF_13(Log.Message) -> History[TMP_10]
REF_13 (->History) := LastMsg(\
Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_12 -> LENGTH History
TMP_10(uint256) := REF_12(uint256)
TMP_11(uint256) = TMP_10 + 1
REF_12 (->History) := TMP_11(uint256)
REF_\
13(Log.Message) -> History[TMP_10]
REF_13 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	781 -> 782	[key=0,
		edge_type=next,
		label=Next];
	783	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x941d225236464a25eb18076df7da6a91d0f95e9e.sol"];
	783 -> 777	[key=0,
		edge_type=next,
		label=Next];
	784	[contract_name=Token,
		function_fullname="balanceOf(address)",
		label="spank_chain_payment.sol_Token_balanceOf(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	785	[contract_name=Token,
		function_fullname="transfer(address,uint256)",
		label="spank_chain_payment.sol_Token_transfer(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	786	[contract_name=Token,
		function_fullname="transferFrom(address,address,uint256)",
		label="spank_chain_payment.sol_Token_transferFrom(address,address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	787	[contract_name=Token,
		function_fullname="approve(address,uint256)",
		label="spank_chain_payment.sol_Token_approve(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	788	[contract_name=Token,
		function_fullname="allowance(address,address)",
		label="spank_chain_payment.sol_Token_allowance(address,address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	789	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	790	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(_hashedMsg != 0x00)

IRs:
TMP_0(bool) = _hashedMsg != 0
TMP_1(None) = SOLIDITY_\
CALL require(bool)(TMP_0)",
		node_expression="require(bool)(_hashedMsg != 0x00)",
		node_irs="TMP_0(bool) = _hashedMsg != 0
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	789 -> 790	[key=0,
		edge_type=next,
		label=Next];
	791	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
prefix = Ethereum Signed Message:
32

IRs:
prefix(bytes) := Ethereum Signed Message:
32(string)",
		node_expression="prefix = Ethereum Signed Message:
32",
		node_irs="prefix(bytes) := Ethereum Signed Message:
32(string)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	790 -> 791	[key=0,
		edge_type=next,
		label=Next];
	792	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
prefixedHash = keccak256()(abi.encodePacked(prefix,_hashedMsg))

IRs:
TMP_2(bytes) = SOLIDITY_\
CALL abi.encodePacked()(prefix,_hashedMsg)
TMP_3(bytes32) = SOLIDITY_CALL keccak256()(TMP_2)
prefixedHash(bytes32) := TMP_3(bytes32)",
		node_expression="prefixedHash = keccak256()(abi.encodePacked(prefix,_hashedMsg))",
		node_irs="TMP_2(bytes) = SOLIDITY_CALL abi.encodePacked()(prefix,_hashedMsg)
TMP_3(bytes32) = SOLIDITY_CALL keccak256()(TMP_2)
prefixedHash(\
bytes32) := TMP_3(bytes32)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	791 -> 792	[key=0,
		edge_type=next,
		label=Next];
	793	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: IF

EXPRESSION:
bytes(_sig).length != 132

IRs:
TMP_4 = CONVERT _sig to bytes
REF_1 -> LENGTH TMP_4
TMP_5(bool) = REF_\
1 != 132
CONDITION TMP_5",
		node_expression="bytes(_sig).length != 132",
		node_irs="TMP_4 = CONVERT _sig to bytes
REF_1 -> LENGTH TMP_4
TMP_5(bool) = REF_1 != 132
CONDITION TMP_5",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	792 -> 793	[key=0,
		edge_type=next,
		label=Next];
	794	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: RETURN

EXPRESSION:
0x0

IRs:
RETURN 0",
		node_expression="0x0",
		node_irs="RETURN 0",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	793 -> 794	[key=0,
		edge_type=if_true,
		label=True];
	795	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	793 -> 795	[key=0,
		edge_type=if_false,
		label=False];
	796	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: NEW VARIABLE
",
		node_expression=None,
		node_irs=None,
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	795 -> 796	[key=0,
		edge_type=next,
		label=Next];
	797	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: NEW VARIABLE
",
		node_expression=None,
		node_irs=None,
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	796 -> 797	[key=0,
		edge_type=next,
		label=Next];
	798	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: NEW VARIABLE
",
		node_expression=None,
		node_irs=None,
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	797 -> 798	[key=0,
		edge_type=next,
		label=Next];
	799	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
sig = hexstrToBytes(substring(_sig,2,132))

IRs:
TMP_6(string) = INTERNAL_CALL, ECTools.substring(\
string,uint256,uint256)(_sig,2,132)
TMP_7(bytes) = INTERNAL_CALL, ECTools.hexstrToBytes(string)(TMP_6)
sig(bytes) := TMP_7(bytes)",
		node_expression="sig = hexstrToBytes(substring(_sig,2,132))",
		node_irs="TMP_6(string) = INTERNAL_CALL, ECTools.substring(string,uint256,uint256)(_sig,2,132)
TMP_7(bytes) = INTERNAL_CALL, ECTools.hexstrToBytes(\
string)(TMP_6)
sig(bytes) := TMP_7(bytes)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	798 -> 799	[key=0,
		edge_type=next,
		label=Next];
	800	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: INLINE ASM
",
		node_expression=None,
		node_irs=None,
		node_type="INLINE ASM",
		source_file="spank_chain_payment.sol"];
	799 -> 800	[key=0,
		edge_type=next,
		label=Next];
	801	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: IF

EXPRESSION:
v < 27

IRs:
TMP_8(bool) = v < 27
CONDITION TMP_8",
		node_expression="v < 27",
		node_irs="TMP_8(bool) = v < 27
CONDITION TMP_8",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	800 -> 801	[key=0,
		edge_type=next,
		label=Next];
	802	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27",
		node_expression="v += 27",
		node_irs="v(uint8) = v + 27",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	801 -> 802	[key=0,
		edge_type=if_true,
		label=True];
	803	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	801 -> 803	[key=0,
		edge_type=if_false,
		label=False];
	802 -> 803	[key=0,
		edge_type=next,
		label=Next];
	804	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: IF

EXPRESSION:
v < 27 || v > 28

IRs:
TMP_9(bool) = v < 27
TMP_10(bool) = v > 28
TMP_11(bool) = TMP_9 || TMP_10
CONDITION \
TMP_11",
		node_expression="v < 27 || v > 28",
		node_irs="TMP_9(bool) = v < 27
TMP_10(bool) = v > 28
TMP_11(bool) = TMP_9 || TMP_10
CONDITION TMP_11",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	803 -> 804	[key=0,
		edge_type=next,
		label=Next];
	805	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: RETURN

EXPRESSION:
0x0

IRs:
RETURN 0",
		node_expression="0x0",
		node_irs="RETURN 0",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	804 -> 805	[key=0,
		edge_type=if_true,
		label=True];
	806	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	804 -> 806	[key=0,
		edge_type=if_false,
		label=False];
	807	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="Node Type: RETURN

EXPRESSION:
ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,v,r,s)

IRs:
TMP_12(address) = SOLIDITY_CALL \
ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,v,r,s)
RETURN TMP_12",
		node_expression="ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,v,r,s)",
		node_irs="TMP_12(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,v,r,s)
RETURN TMP_12",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	806 -> 807	[key=0,
		edge_type=next,
		label=Next];
	808	[contract_name=ECTools,
		function_fullname="recoverSigner(bytes32,string)",
		label="spank_chain_payment.sol_ECTools_recoverSigner(bytes32,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	808 -> 789	[key=0,
		edge_type=next,
		label=Next];
	809	[contract_name=ECTools,
		function_fullname="isSignedBy(bytes32,string,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	810	[contract_name=ECTools,
		function_fullname="isSignedBy(bytes32,string,address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(_addr != 0x0)

IRs:
TMP_13(bool) = _addr != 0
TMP_14(None) = SOLIDITY_CALL require(\
bool)(TMP_13)",
		node_expression="require(bool)(_addr != 0x0)",
		node_irs="TMP_13(bool) = _addr != 0
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	809 -> 810	[key=0,
		edge_type=next,
		label=Next];
	811	[contract_name=ECTools,
		function_fullname="isSignedBy(bytes32,string,address)",
		label="Node Type: RETURN

EXPRESSION:
_addr == recoverSigner(_hashedMsg,_sig)

IRs:
TMP_15(address) = INTERNAL_CALL, ECTools.recoverSigner(\
bytes32,string)(_hashedMsg,_sig)
TMP_16(bool) = _addr == TMP_15
RETURN TMP_16",
		node_expression="_addr == recoverSigner(_hashedMsg,_sig)",
		node_irs="TMP_15(address) = INTERNAL_CALL, ECTools.recoverSigner(bytes32,string)(_hashedMsg,_sig)
TMP_16(bool) = _addr == TMP_15
RETURN TMP_\
16",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	810 -> 811	[key=0,
		edge_type=next,
		label=Next];
	812	[contract_name=ECTools,
		function_fullname="isSignedBy(bytes32,string,address)",
		label="spank_chain_payment.sol_ECTools_isSignedBy(bytes32,string,address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	812 -> 809	[key=0,
		edge_type=next,
		label=Next];
	813	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	814	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
len = bytes(_hexstr).length

IRs:
TMP_17 = CONVERT _hexstr to bytes
REF_2 -> LENGTH TMP_17
\
len(uint256) := REF_2(uint256)",
		node_expression="len = bytes(_hexstr).length",
		node_irs="TMP_17 = CONVERT _hexstr to bytes
REF_2 -> LENGTH TMP_17
len(uint256) := REF_2(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	813 -> 814	[key=0,
		edge_type=next,
		label=Next];
	815	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(len % 2 == 0)

IRs:
TMP_18(uint256) = len % 2
TMP_19(bool) = TMP_18 == 0
TMP_20(\
None) = SOLIDITY_CALL require(bool)(TMP_19)",
		node_expression="require(bool)(len % 2 == 0)",
		node_irs="TMP_18(uint256) = len % 2
TMP_19(bool) = TMP_18 == 0
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	814 -> 815	[key=0,
		edge_type=next,
		label=Next];
	816	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
bstr = bytes(new string(len / 2))

IRs:
TMP_22(uint256) = len / 2
TMP_23 = new string(TMP_22)
\
TMP_24 = CONVERT TMP_23 to bytes
bstr(bytes) := TMP_24(bytes)",
		node_expression="bstr = bytes(new string(len / 2))",
		node_irs="TMP_22(uint256) = len / 2
TMP_23 = new string(TMP_22)
TMP_24 = CONVERT TMP_23 to bytes
bstr(bytes) := TMP_24(bytes)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	815 -> 816	[key=0,
		edge_type=next,
		label=Next];
	817	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)",
		node_expression="k = 0",
		node_irs="k(uint256) := 0(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	816 -> 817	[key=0,
		edge_type=next,
		label=Next];
	818	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: NEW VARIABLE
",
		node_expression=None,
		node_irs=None,
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	817 -> 818	[key=0,
		edge_type=next,
		label=Next];
	819	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: NEW VARIABLE
",
		node_expression=None,
		node_irs=None,
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	818 -> 819	[key=0,
		edge_type=next,
		label=Next];
	822	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)",
		node_expression="i = 0",
		node_irs="i(uint256) := 0(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	819 -> 822	[key=0,
		edge_type=next,
		label=Next];
	820	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: BEGIN_LOOP
",
		node_expression=None,
		node_irs=None,
		node_type=BEGIN_LOOP,
		source_file="spank_chain_payment.sol"];
	823	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: IF_LOOP

EXPRESSION:
i < len

IRs:
TMP_25(bool) = i < len
CONDITION TMP_25",
		node_expression="i < len",
		node_irs="TMP_25(bool) = i < len
CONDITION TMP_25",
		node_type=IF_LOOP,
		source_file="spank_chain_payment.sol"];
	820 -> 823	[key=0,
		edge_type=next,
		label=Next];
	821	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: END_LOOP
",
		node_expression=None,
		node_irs=None,
		node_type=END_LOOP,
		source_file="spank_chain_payment.sol"];
	829	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: RETURN

EXPRESSION:
bstr

IRs:
RETURN bstr",
		node_expression=bstr,
		node_irs="RETURN bstr",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	821 -> 829	[key=0,
		edge_type=next,
		label=Next];
	822 -> 820	[key=0,
		edge_type=next,
		label=Next];
	823 -> 821	[key=0,
		edge_type=if_false,
		label=False];
	824	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: EXPRESSION

EXPRESSION:
s = substring(_hexstr,i,i + 1)

IRs:
TMP_26(uint256) = i + 1
TMP_27(string) = INTERNAL_CALL, \
ECTools.substring(string,uint256,uint256)(_hexstr,i,TMP_26)
s(string) := TMP_27(string)",
		node_expression="s = substring(_hexstr,i,i + 1)",
		node_irs="TMP_26(uint256) = i + 1
TMP_27(string) = INTERNAL_CALL, ECTools.substring(string,uint256,uint256)(_hexstr,i,TMP_26)
s(string) := \
TMP_27(string)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	823 -> 824	[key=0,
		edge_type=if_true,
		label=True];
	825	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: EXPRESSION

EXPRESSION:
r = substring(_hexstr,i + 1,i + 2)

IRs:
TMP_28(uint256) = i + 1
TMP_29(uint256) = i + 2
TMP_\
30(string) = INTERNAL_CALL, ECTools.substring(string,uint256,uint256)(_hexstr,TMP_28,TMP_29)
r(string) := TMP_30(string)",
		node_expression="r = substring(_hexstr,i + 1,i + 2)",
		node_irs="TMP_28(uint256) = i + 1
TMP_29(uint256) = i + 2
TMP_30(string) = INTERNAL_CALL, ECTools.substring(string,uint256,uint256)(_hexstr,\
TMP_28,TMP_29)
r(string) := TMP_30(string)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	824 -> 825	[key=0,
		edge_type=next,
		label=Next];
	826	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
p = parseInt16Char(s) * 16 + parseInt16Char(r)

IRs:
TMP_31(uint256) = INTERNAL_CALL, ECTools.parseInt16Char(\
string)(s)
TMP_32(uint256) = TMP_31 * 16
TMP_33(uint256) = INTERNAL_CALL, ECTools.parseInt16Char(string)(r)
TMP_34(uint256) = TMP_\
32 + TMP_33
p(uint256) := TMP_34(uint256)",
		node_expression="p = parseInt16Char(s) * 16 + parseInt16Char(r)",
		node_irs="TMP_31(uint256) = INTERNAL_CALL, ECTools.parseInt16Char(string)(s)
TMP_32(uint256) = TMP_31 * 16
TMP_33(uint256) = INTERNAL_CALL, \
ECTools.parseInt16Char(string)(r)
TMP_34(uint256) = TMP_32 + TMP_33
p(uint256) := TMP_34(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	825 -> 826	[key=0,
		edge_type=next,
		label=Next];
	827	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: EXPRESSION

EXPRESSION:
bstr[k ++] = uintToBytes32(p)[31]

IRs:
TMP_35(uint256) := k(uint256)
k(uint256) = k + 1
REF_\
3(None) -> bstr[TMP_35]
TMP_36(bytes) = INTERNAL_CALL, ECTools.uintToBytes32(uint256)(p)
REF_4(None) -> TMP_36[31]
REF_3 (->bstr) := \
REF_4(None)",
		node_expression="bstr[k ++] = uintToBytes32(p)[31]",
		node_irs="TMP_35(uint256) := k(uint256)
k(uint256) = k + 1
REF_3(None) -> bstr[TMP_35]
TMP_36(bytes) = INTERNAL_CALL, ECTools.uintToBytes32(\
uint256)(p)
REF_4(None) -> TMP_36[31]
REF_3 (->bstr) := REF_4(None)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	826 -> 827	[key=0,
		edge_type=next,
		label=Next];
	828	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="Node Type: EXPRESSION

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2",
		node_expression="i += 2",
		node_irs="i(uint256) = i + 2",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	827 -> 828	[key=0,
		edge_type=next,
		label=Next];
	828 -> 823	[key=0,
		edge_type=next,
		label=Next];
	830	[contract_name=ECTools,
		function_fullname="hexstrToBytes(string)",
		label="spank_chain_payment.sol_ECTools_hexstrToBytes(string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	830 -> 813	[key=0,
		edge_type=next,
		label=Next];
	831	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	832	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
bresult = bytes(_char)

IRs:
TMP_37 = CONVERT _char to bytes
bresult(bytes) := TMP_37(bytes)",
		node_expression="bresult = bytes(_char)",
		node_irs="TMP_37 = CONVERT _char to bytes
bresult(bytes) := TMP_37(bytes)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	831 -> 832	[key=0,
		edge_type=next,
		label=Next];
	833	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: IF

EXPRESSION:
(bresult[0] >= 48) && (bresult[0] <= 57)

IRs:
REF_5(None) -> bresult[0]
TMP_38(bool) = REF_5 >= 48
REF_\
6(None) -> bresult[0]
TMP_39(bool) = REF_6 <= 57
TMP_40(bool) = TMP_38 && TMP_39
CONDITION TMP_40",
		node_expression="(bresult[0] >= 48) && (bresult[0] <= 57)",
		node_irs="REF_5(None) -> bresult[0]
TMP_38(bool) = REF_5 >= 48
REF_6(None) -> bresult[0]
TMP_39(bool) = REF_6 <= 57
TMP_40(bool) = TMP_38 && \
TMP_39
CONDITION TMP_40",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	832 -> 833	[key=0,
		edge_type=next,
		label=Next];
	834	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: RETURN

EXPRESSION:
uint256(bresult[0]) - 48

IRs:
REF_7(None) -> bresult[0]
TMP_41 = CONVERT REF_7 to uint256
TMP_42(\
uint256) = TMP_41 - 48
RETURN TMP_42",
		node_expression="uint256(bresult[0]) - 48",
		node_irs="REF_7(None) -> bresult[0]
TMP_41 = CONVERT REF_7 to uint256
TMP_42(uint256) = TMP_41 - 48
RETURN TMP_42",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	833 -> 834	[key=0,
		edge_type=if_true,
		label=True];
	835	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: IF

EXPRESSION:
(bresult[0] >= 65) && (bresult[0] <= 70)

IRs:
REF_8(None) -> bresult[0]
TMP_43(bool) = REF_8 >= 65
REF_\
9(None) -> bresult[0]
TMP_44(bool) = REF_9 <= 70
TMP_45(bool) = TMP_43 && TMP_44
CONDITION TMP_45",
		node_expression="(bresult[0] >= 65) && (bresult[0] <= 70)",
		node_irs="REF_8(None) -> bresult[0]
TMP_43(bool) = REF_8 >= 65
REF_9(None) -> bresult[0]
TMP_44(bool) = REF_9 <= 70
TMP_45(bool) = TMP_43 && \
TMP_44
CONDITION TMP_45",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	833 -> 835	[key=0,
		edge_type=if_false,
		label=False];
	836	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: RETURN

EXPRESSION:
uint256(bresult[0]) - 55

IRs:
REF_10(None) -> bresult[0]
TMP_46 = CONVERT REF_10 to uint256
TMP_\
47(uint256) = TMP_46 - 55
RETURN TMP_47",
		node_expression="uint256(bresult[0]) - 55",
		node_irs="REF_10(None) -> bresult[0]
TMP_46 = CONVERT REF_10 to uint256
TMP_47(uint256) = TMP_46 - 55
RETURN TMP_47",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	835 -> 836	[key=0,
		edge_type=if_true,
		label=True];
	837	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: IF

EXPRESSION:
(bresult[0] >= 97) && (bresult[0] <= 102)

IRs:
REF_11(None) -> bresult[0]
TMP_48(bool) = REF_11 >= 97
\
REF_12(None) -> bresult[0]
TMP_49(bool) = REF_12 <= 102
TMP_50(bool) = TMP_48 && TMP_49
CONDITION TMP_50",
		node_expression="(bresult[0] >= 97) && (bresult[0] <= 102)",
		node_irs="REF_11(None) -> bresult[0]
TMP_48(bool) = REF_11 >= 97
REF_12(None) -> bresult[0]
TMP_49(bool) = REF_12 <= 102
TMP_50(bool) = TMP_\
48 && TMP_49
CONDITION TMP_50",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	835 -> 837	[key=0,
		edge_type=if_false,
		label=False];
	838	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: RETURN

EXPRESSION:
uint256(bresult[0]) - 87

IRs:
REF_13(None) -> bresult[0]
TMP_51 = CONVERT REF_13 to uint256
TMP_\
52(uint256) = TMP_51 - 87
RETURN TMP_52",
		node_expression="uint256(bresult[0]) - 87",
		node_irs="REF_13(None) -> bresult[0]
TMP_51 = CONVERT REF_13 to uint256
TMP_52(uint256) = TMP_51 - 87
RETURN TMP_52",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	837 -> 838	[key=0,
		edge_type=if_true,
		label=True];
	839	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: EXPRESSION

EXPRESSION:
revert()()

IRs:
TMP_53(None) = SOLIDITY_CALL revert()()",
		node_expression="revert()()",
		node_irs="TMP_53(None) = SOLIDITY_CALL revert()()",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	837 -> 839	[key=0,
		edge_type=if_false,
		label=False];
	840	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	839 -> 840	[key=0,
		edge_type=next,
		label=Next];
	841	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	840 -> 841	[key=0,
		edge_type=next,
		label=Next];
	842	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	841 -> 842	[key=0,
		edge_type=next,
		label=Next];
	843	[contract_name=ECTools,
		function_fullname="parseInt16Char(string)",
		label="spank_chain_payment.sol_ECTools_parseInt16Char(string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	843 -> 831	[key=0,
		edge_type=next,
		label=Next];
	844	[contract_name=ECTools,
		function_fullname="uintToBytes32(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	845	[contract_name=ECTools,
		function_fullname="uintToBytes32(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
b = new bytes(32)

IRs:
TMP_55 = new bytes(32)
b(bytes) := TMP_55(bytes)",
		node_expression="b = new bytes(32)",
		node_irs="TMP_55 = new bytes(32)
b(bytes) := TMP_55(bytes)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	844 -> 845	[key=0,
		edge_type=next,
		label=Next];
	846	[contract_name=ECTools,
		function_fullname="uintToBytes32(uint256)",
		label="Node Type: INLINE ASM
",
		node_expression=None,
		node_irs=None,
		node_type="INLINE ASM",
		source_file="spank_chain_payment.sol"];
	845 -> 846	[key=0,
		edge_type=next,
		label=Next];
	847	[contract_name=ECTools,
		function_fullname="uintToBytes32(uint256)",
		label="spank_chain_payment.sol_ECTools_uintToBytes32(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	847 -> 844	[key=0,
		edge_type=next,
		label=Next];
	848	[contract_name=ECTools,
		function_fullname="toEthereumSignedMessage(string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	849	[contract_name=ECTools,
		function_fullname="toEthereumSignedMessage(string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
len = bytes(_msg).length

IRs:
TMP_56 = CONVERT _msg to bytes
REF_14 -> LENGTH TMP_56
len(uint256) := \
REF_14(uint256)",
		node_expression="len = bytes(_msg).length",
		node_irs="TMP_56 = CONVERT _msg to bytes
REF_14 -> LENGTH TMP_56
len(uint256) := REF_14(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	848 -> 849	[key=0,
		edge_type=next,
		label=Next];
	850	[contract_name=ECTools,
		function_fullname="toEthereumSignedMessage(string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(len > 0)

IRs:
TMP_57(bool) = len > 0
TMP_58(None) = SOLIDITY_CALL require(bool)(\
TMP_57)",
		node_expression="require(bool)(len > 0)",
		node_irs="TMP_57(bool) = len > 0
TMP_58(None) = SOLIDITY_CALL require(bool)(TMP_57)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	849 -> 850	[key=0,
		edge_type=next,
		label=Next];
	851	[contract_name=ECTools,
		function_fullname="toEthereumSignedMessage(string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
prefix = Ethereum Signed Message:


IRs:
prefix(bytes) := Ethereum Signed Message:
(string)",
		node_expression="prefix = Ethereum Signed Message:
",
		node_irs="prefix(bytes) := Ethereum Signed Message:
(string)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	850 -> 851	[key=0,
		edge_type=next,
		label=Next];
	852	[contract_name=ECTools,
		function_fullname="toEthereumSignedMessage(string)",
		label="Node Type: RETURN

EXPRESSION:
keccak256()(abi.encodePacked(prefix,uintToString(len),_msg))

IRs:
TMP_59(string) = INTERNAL_CALL, \
ECTools.uintToString(uint256)(len)
TMP_60(bytes) = SOLIDITY_CALL abi.encodePacked()(prefix,TMP_59,_msg)
TMP_61(bytes32) = SOLIDITY_\
CALL keccak256()(TMP_60)
RETURN TMP_61",
		node_expression="keccak256()(abi.encodePacked(prefix,uintToString(len),_msg))",
		node_irs="TMP_59(string) = INTERNAL_CALL, ECTools.uintToString(uint256)(len)
TMP_60(bytes) = SOLIDITY_CALL abi.encodePacked()(prefix,TMP_59,_\
msg)
TMP_61(bytes32) = SOLIDITY_CALL keccak256()(TMP_60)
RETURN TMP_61",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	851 -> 852	[key=0,
		edge_type=next,
		label=Next];
	853	[contract_name=ECTools,
		function_fullname="toEthereumSignedMessage(string)",
		label="spank_chain_payment.sol_ECTools_toEthereumSignedMessage(string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	853 -> 848	[key=0,
		edge_type=next,
		label=Next];
	854	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	855	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
len = 0

IRs:
len(uint256) := 0(uint256)",
		node_expression="len = 0",
		node_irs="len(uint256) := 0(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	854 -> 855	[key=0,
		edge_type=next,
		label=Next];
	856	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
m = _uint + 0

IRs:
TMP_62(uint256) = _uint + 0
m(uint256) := TMP_62(uint256)",
		node_expression="m = _uint + 0",
		node_irs="TMP_62(uint256) = _uint + 0
m(uint256) := TMP_62(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	855 -> 856	[key=0,
		edge_type=next,
		label=Next];
	857	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: BEGIN_LOOP
",
		node_expression=None,
		node_irs=None,
		node_type=BEGIN_LOOP,
		source_file="spank_chain_payment.sol"];
	856 -> 857	[key=0,
		edge_type=next,
		label=Next];
	858	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: IF_LOOP

EXPRESSION:
m != 0

IRs:
TMP_63(bool) = m != 0
CONDITION TMP_63",
		node_expression="m != 0",
		node_irs="TMP_63(bool) = m != 0
CONDITION TMP_63",
		node_type=IF_LOOP,
		source_file="spank_chain_payment.sol"];
	857 -> 858	[key=0,
		edge_type=next,
		label=Next];
	859	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
len ++

IRs:
TMP_64(uint256) := len(uint256)
len(uint256) = len + 1",
		node_expression="len ++",
		node_irs="TMP_64(uint256) := len(uint256)
len(uint256) = len + 1",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	858 -> 859	[key=0,
		edge_type=if_true,
		label=True];
	861	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: END_LOOP
",
		node_expression=None,
		node_irs=None,
		node_type=END_LOOP,
		source_file="spank_chain_payment.sol"];
	858 -> 861	[key=0,
		edge_type=if_false,
		label=False];
	860	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
m /= 10

IRs:
m(uint256) = m / 10",
		node_expression="m /= 10",
		node_irs="m(uint256) = m / 10",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	859 -> 860	[key=0,
		edge_type=next,
		label=Next];
	860 -> 858	[key=0,
		edge_type=next,
		label=Next];
	862	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
b = new bytes(len)

IRs:
TMP_66 = new bytes(len)
b(bytes) := TMP_66(bytes)",
		node_expression="b = new bytes(len)",
		node_irs="TMP_66 = new bytes(len)
b(bytes) := TMP_66(bytes)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	861 -> 862	[key=0,
		edge_type=next,
		label=Next];
	863	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
i = len - 1

IRs:
TMP_67(uint256) = len - 1
i(uint256) := TMP_67(uint256)",
		node_expression="i = len - 1",
		node_irs="TMP_67(uint256) = len - 1
i(uint256) := TMP_67(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	862 -> 863	[key=0,
		edge_type=next,
		label=Next];
	864	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: BEGIN_LOOP
",
		node_expression=None,
		node_irs=None,
		node_type=BEGIN_LOOP,
		source_file="spank_chain_payment.sol"];
	863 -> 864	[key=0,
		edge_type=next,
		label=Next];
	865	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: IF_LOOP

EXPRESSION:
_uint != 0

IRs:
TMP_68(bool) = _uint != 0
CONDITION TMP_68",
		node_expression="_uint != 0",
		node_irs="TMP_68(bool) = _uint != 0
CONDITION TMP_68",
		node_type=IF_LOOP,
		source_file="spank_chain_payment.sol"];
	864 -> 865	[key=0,
		edge_type=next,
		label=Next];
	866	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
remainder = _uint % 10

IRs:
TMP_69(uint256) = _uint % 10
remainder(uint256) := TMP_69(uint256)",
		node_expression="remainder = _uint % 10",
		node_irs="TMP_69(uint256) = _uint % 10
remainder(uint256) := TMP_69(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	865 -> 866	[key=0,
		edge_type=if_true,
		label=True];
	869	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: END_LOOP
",
		node_expression=None,
		node_irs=None,
		node_type=END_LOOP,
		source_file="spank_chain_payment.sol"];
	865 -> 869	[key=0,
		edge_type=if_false,
		label=False];
	867	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
_uint = _uint / 10

IRs:
TMP_70(uint256) = _uint / 10
_uint(uint256) := TMP_70(uint256)",
		node_expression="_uint = _uint / 10",
		node_irs="TMP_70(uint256) = _uint / 10
_uint(uint256) := TMP_70(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	866 -> 867	[key=0,
		edge_type=next,
		label=Next];
	868	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
b[i --] = bytes1(48 + remainder)

IRs:
TMP_71(uint256) := i(uint256)
i(uint256) = i - 1
REF_16(\
bytes1) -> b[TMP_71]
TMP_72(uint256) = 48 + remainder
TMP_73 = CONVERT TMP_72 to bytes1
REF_16 (->b) := TMP_73(bytes1)",
		node_expression="b[i --] = bytes1(48 + remainder)",
		node_irs="TMP_71(uint256) := i(uint256)
i(uint256) = i - 1
REF_16(bytes1) -> b[TMP_71]
TMP_72(uint256) = 48 + remainder
TMP_73 = CONVERT TMP_\
72 to bytes1
REF_16 (->b) := TMP_73(bytes1)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	867 -> 868	[key=0,
		edge_type=next,
		label=Next];
	868 -> 865	[key=0,
		edge_type=next,
		label=Next];
	870	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
str = string(b)

IRs:
TMP_74 = CONVERT b to string
str(string) := TMP_74(string)",
		node_expression="str = string(b)",
		node_irs="TMP_74 = CONVERT b to string
str(string) := TMP_74(string)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	869 -> 870	[key=0,
		edge_type=next,
		label=Next];
	871	[contract_name=ECTools,
		function_fullname="uintToString(uint256)",
		label="spank_chain_payment.sol_ECTools_uintToString(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	871 -> 854	[key=0,
		edge_type=next,
		label=Next];
	872	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	873	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
strBytes = bytes(_str)

IRs:
TMP_75 = CONVERT _str to bytes
strBytes(bytes) := TMP_75(bytes)",
		node_expression="strBytes = bytes(_str)",
		node_irs="TMP_75 = CONVERT _str to bytes
strBytes(bytes) := TMP_75(bytes)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	872 -> 873	[key=0,
		edge_type=next,
		label=Next];
	874	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(_startIndex <= _endIndex)

IRs:
TMP_76(bool) = _startIndex <= _endIndex
TMP_77(\
None) = SOLIDITY_CALL require(bool)(TMP_76)",
		node_expression="require(bool)(_startIndex <= _endIndex)",
		node_irs="TMP_76(bool) = _startIndex <= _endIndex
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	873 -> 874	[key=0,
		edge_type=next,
		label=Next];
	875	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(_startIndex >= 0)

IRs:
TMP_78(bool) = _startIndex >= 0
TMP_79(None) = SOLIDITY_\
CALL require(bool)(TMP_78)",
		node_expression="require(bool)(_startIndex >= 0)",
		node_irs="TMP_78(bool) = _startIndex >= 0
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	874 -> 875	[key=0,
		edge_type=next,
		label=Next];
	876	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(_endIndex <= strBytes.length)

IRs:
REF_17 -> LENGTH strBytes
TMP_80(bool) = _endIndex <= \
REF_17
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)",
		node_expression="require(bool)(_endIndex <= strBytes.length)",
		node_irs="REF_17 -> LENGTH strBytes
TMP_80(bool) = _endIndex <= REF_17
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	875 -> 876	[key=0,
		edge_type=next,
		label=Next];
	877	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
result = new bytes(_endIndex - _startIndex)

IRs:
TMP_83(uint256) = _endIndex - _startIndex
\
TMP_84 = new bytes(TMP_83)
result(bytes) := TMP_84(bytes)",
		node_expression="result = new bytes(_endIndex - _startIndex)",
		node_irs="TMP_83(uint256) = _endIndex - _startIndex
TMP_84 = new bytes(TMP_83)
result(bytes) := TMP_84(bytes)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	876 -> 877	[key=0,
		edge_type=next,
		label=Next];
	880	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
i = _startIndex

IRs:
i(uint256) := _startIndex(uint256)",
		node_expression="i = _startIndex",
		node_irs="i(uint256) := _startIndex(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	877 -> 880	[key=0,
		edge_type=next,
		label=Next];
	878	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: BEGIN_LOOP
",
		node_expression=None,
		node_irs=None,
		node_type=BEGIN_LOOP,
		source_file="spank_chain_payment.sol"];
	881	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: IF_LOOP

EXPRESSION:
i < _endIndex

IRs:
TMP_85(bool) = i < _endIndex
CONDITION TMP_85",
		node_expression="i < _endIndex",
		node_irs="TMP_85(bool) = i < _endIndex
CONDITION TMP_85",
		node_type=IF_LOOP,
		source_file="spank_chain_payment.sol"];
	878 -> 881	[key=0,
		edge_type=next,
		label=Next];
	879	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: END_LOOP
",
		node_expression=None,
		node_irs=None,
		node_type=END_LOOP,
		source_file="spank_chain_payment.sol"];
	884	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: RETURN

EXPRESSION:
string(result)

IRs:
TMP_88 = CONVERT result to string
RETURN TMP_88",
		node_expression="string(result)",
		node_irs="TMP_88 = CONVERT result to string
RETURN TMP_88",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	879 -> 884	[key=0,
		edge_type=next,
		label=Next];
	880 -> 878	[key=0,
		edge_type=next,
		label=Next];
	881 -> 879	[key=0,
		edge_type=if_false,
		label=False];
	882	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
result[i - _startIndex] = strBytes[i]

IRs:
TMP_86(uint256) = i - _startIndex
REF_18(None) -> \
result[TMP_86]
REF_19(None) -> strBytes[i]
REF_18 (->result) := REF_19(None)",
		node_expression="result[i - _startIndex] = strBytes[i]",
		node_irs="TMP_86(uint256) = i - _startIndex
REF_18(None) -> result[TMP_86]
REF_19(None) -> strBytes[i]
REF_18 (->result) := REF_19(None)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	881 -> 882	[key=0,
		edge_type=if_true,
		label=True];
	883	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
i ++

IRs:
TMP_87(uint256) := i(uint256)
i(uint256) = i + 1",
		node_expression="i ++",
		node_irs="TMP_87(uint256) := i(uint256)
i(uint256) = i + 1",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	882 -> 883	[key=0,
		edge_type=next,
		label=Next];
	883 -> 881	[key=0,
		edge_type=next,
		label=Next];
	885	[contract_name=ECTools,
		function_fullname="substring(string,uint256,uint256)",
		label="spank_chain_payment.sol_ECTools_substring(string,uint256,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	885 -> 872	[key=0,
		edge_type=next,
		label=Next];
	886	[contract_name=StandardToken,
		function_fullname="balanceOf(address)",
		label="spank_chain_payment.sol_StandardToken_balanceOf(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	887	[contract_name=StandardToken,
		function_fullname="transfer(address,uint256)",
		label="spank_chain_payment.sol_StandardToken_transfer(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	888	[contract_name=StandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="spank_chain_payment.sol_StandardToken_transferFrom(address,address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	889	[contract_name=StandardToken,
		function_fullname="approve(address,uint256)",
		label="spank_chain_payment.sol_StandardToken_approve(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	890	[contract_name=StandardToken,
		function_fullname="allowance(address,address)",
		label="spank_chain_payment.sol_StandardToken_allowance(address,address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	891	[contract_name=StandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	892	[contract_name=StandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_20(uint256) -> balances[msg.sender]
TMP_\
89(bool) = REF_20 >= _value
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)",
		node_expression="require(bool)(balances[msg.sender] >= _value)",
		node_irs="REF_20(uint256) -> balances[msg.sender]
TMP_89(bool) = REF_20 >= _value
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	891 -> 892	[key=0,
		edge_type=next,
		label=Next];
	893	[contract_name=StandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_21(uint256) -> balances[msg.sender]
REF_21(-> balances) = \
REF_21 - _value",
		node_expression="balances[msg.sender] -= _value",
		node_irs="REF_21(uint256) -> balances[msg.sender]
REF_21(-> balances) = REF_21 - _value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	892 -> 893	[key=0,
		edge_type=next,
		label=Next];
	894	[contract_name=StandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[_to] += _value

IRs:
REF_22(uint256) -> balances[_to]
REF_22(-> balances) = REF_22 + _\
value",
		node_expression="balances[_to] += _value",
		node_irs="REF_22(uint256) -> balances[_to]
REF_22(-> balances) = REF_22 + _value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	893 -> 894	[key=0,
		edge_type=next,
		label=Next];
	895	[contract_name=StandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender._to._value)",
		node_expression="Transfer(msg.sender,_to,_value)",
		node_irs="Emit Transfer(msg.sender._to._value)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	894 -> 895	[key=0,
		edge_type=next,
		label=Next];
	896	[contract_name=StandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_irs="RETURN True",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	895 -> 896	[key=0,
		edge_type=next,
		label=Next];
	897	[contract_name=StandardToken,
		function_fullname="transfer(address,uint256)",
		label="spank_chain_payment.sol_StandardToken_transfer(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	897 -> 891	[key=0,
		edge_type=next,
		label=Next];
	898	[contract_name=StandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	899	[contract_name=StandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)

IRs:
REF_23(\
uint256) -> balances[_from]
TMP_92(bool) = REF_23 >= _value
REF_24(mapping(address => uint256)) -> allowed[_from]
REF_25(uint256) \
-> REF_24[msg.sender]
TMP_93(bool) = REF_25 >= _value
TMP_94(bool) = TMP_92 && TMP_93
TMP_95(None) = SOLIDITY_CALL require(bool)(\
TMP_94)",
		node_expression="require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)",
		node_irs="REF_23(uint256) -> balances[_from]
TMP_92(bool) = REF_23 >= _value
REF_24(mapping(address => uint256)) -> allowed[_from]
REF_25(\
uint256) -> REF_24[msg.sender]
TMP_93(bool) = REF_25 >= _value
TMP_94(bool) = TMP_92 && TMP_93
TMP_95(None) = SOLIDITY_CALL require(\
bool)(TMP_94)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	898 -> 899	[key=0,
		edge_type=next,
		label=Next];
	900	[contract_name=StandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[_to] += _value

IRs:
REF_26(uint256) -> balances[_to]
REF_26(-> balances) = REF_26 + _\
value",
		node_expression="balances[_to] += _value",
		node_irs="REF_26(uint256) -> balances[_to]
REF_26(-> balances) = REF_26 + _value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	899 -> 900	[key=0,
		edge_type=next,
		label=Next];
	901	[contract_name=StandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[_from] -= _value

IRs:
REF_27(uint256) -> balances[_from]
REF_27(-> balances) = REF_\
27 - _value",
		node_expression="balances[_from] -= _value",
		node_irs="REF_27(uint256) -> balances[_from]
REF_27(-> balances) = REF_27 - _value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	900 -> 901	[key=0,
		edge_type=next,
		label=Next];
	902	[contract_name=StandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_28(mapping(address => uint256)) -> allowed[_from]
\
REF_29(uint256) -> REF_28[msg.sender]
REF_29(-> allowed) = REF_29 - _value",
		node_expression="allowed[_from][msg.sender] -= _value",
		node_irs="REF_28(mapping(address => uint256)) -> allowed[_from]
REF_29(uint256) -> REF_28[msg.sender]
REF_29(-> allowed) = REF_29 - _value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	901 -> 902	[key=0,
		edge_type=next,
		label=Next];
	903	[contract_name=StandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)",
		node_expression="Transfer(_from,_to,_value)",
		node_irs="Emit Transfer(_from._to._value)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	902 -> 903	[key=0,
		edge_type=next,
		label=Next];
	904	[contract_name=StandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_irs="RETURN True",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	903 -> 904	[key=0,
		edge_type=next,
		label=Next];
	905	[contract_name=StandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="spank_chain_payment.sol_StandardToken_transferFrom(address,address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	905 -> 898	[key=0,
		edge_type=next,
		label=Next];
	906	[contract_name=StandardToken,
		function_fullname="balanceOf(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	907	[contract_name=StandardToken,
		function_fullname="balanceOf(address)",
		label="Node Type: RETURN

EXPRESSION:
balances[_owner]

IRs:
REF_30(uint256) -> balances[_owner]
RETURN REF_30",
		node_expression="balances[_owner]",
		node_irs="REF_30(uint256) -> balances[_owner]
RETURN REF_30",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	906 -> 907	[key=0,
		edge_type=next,
		label=Next];
	908	[contract_name=StandardToken,
		function_fullname="balanceOf(address)",
		label="spank_chain_payment.sol_StandardToken_balanceOf(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	908 -> 906	[key=0,
		edge_type=next,
		label=Next];
	909	[contract_name=StandardToken,
		function_fullname="approve(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	910	[contract_name=StandardToken,
		function_fullname="approve(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
\
REF_32(uint256) -> REF_31[_spender]
REF_32 (->allowed) := _value(uint256)",
		node_expression="allowed[msg.sender][_spender] = _value",
		node_irs="REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
REF_32 (->allowed) := _value(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	909 -> 910	[key=0,
		edge_type=next,
		label=Next];
	911	[contract_name=StandardToken,
		function_fullname="approve(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender._spender._value)",
		node_expression="Approval(msg.sender,_spender,_value)",
		node_irs="Emit Approval(msg.sender._spender._value)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	910 -> 911	[key=0,
		edge_type=next,
		label=Next];
	912	[contract_name=StandardToken,
		function_fullname="approve(address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_irs="RETURN True",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	911 -> 912	[key=0,
		edge_type=next,
		label=Next];
	913	[contract_name=StandardToken,
		function_fullname="approve(address,uint256)",
		label="spank_chain_payment.sol_StandardToken_approve(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	913 -> 909	[key=0,
		edge_type=next,
		label=Next];
	914	[contract_name=StandardToken,
		function_fullname="allowance(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	915	[contract_name=StandardToken,
		function_fullname="allowance(address,address)",
		label="Node Type: RETURN

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_33(mapping(address => uint256)) -> allowed[_owner]
REF_34(uint256) \
-> REF_33[_spender]
RETURN REF_34",
		node_expression="allowed[_owner][_spender]",
		node_irs="REF_33(mapping(address => uint256)) -> allowed[_owner]
REF_34(uint256) -> REF_33[_spender]
RETURN REF_34",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	914 -> 915	[key=0,
		edge_type=next,
		label=Next];
	916	[contract_name=StandardToken,
		function_fullname="allowance(address,address)",
		label="spank_chain_payment.sol_StandardToken_allowance(address,address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	916 -> 914	[key=0,
		edge_type=next,
		label=Next];
	917	[contract_name=HumanStandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	918	[contract_name=HumanStandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_35(uint256) -> balances[msg.sender]
TMP_\
98(bool) = REF_35 >= _value
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)",
		node_expression="require(bool)(balances[msg.sender] >= _value)",
		node_irs="REF_35(uint256) -> balances[msg.sender]
TMP_98(bool) = REF_35 >= _value
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	917 -> 918	[key=0,
		edge_type=next,
		label=Next];
	919	[contract_name=HumanStandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_36(uint256) -> balances[msg.sender]
REF_36(-> balances) = \
REF_36 - _value",
		node_expression="balances[msg.sender] -= _value",
		node_irs="REF_36(uint256) -> balances[msg.sender]
REF_36(-> balances) = REF_36 - _value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	918 -> 919	[key=0,
		edge_type=next,
		label=Next];
	920	[contract_name=HumanStandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[_to] += _value

IRs:
REF_37(uint256) -> balances[_to]
REF_37(-> balances) = REF_37 + _\
value",
		node_expression="balances[_to] += _value",
		node_irs="REF_37(uint256) -> balances[_to]
REF_37(-> balances) = REF_37 + _value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	919 -> 920	[key=0,
		edge_type=next,
		label=Next];
	921	[contract_name=HumanStandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender._to._value)",
		node_expression="Transfer(msg.sender,_to,_value)",
		node_irs="Emit Transfer(msg.sender._to._value)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	920 -> 921	[key=0,
		edge_type=next,
		label=Next];
	922	[contract_name=HumanStandardToken,
		function_fullname="transfer(address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_irs="RETURN True",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	921 -> 922	[key=0,
		edge_type=next,
		label=Next];
	923	[contract_name=HumanStandardToken,
		function_fullname="transfer(address,uint256)",
		label="spank_chain_payment.sol_HumanStandardToken_transfer(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	923 -> 917	[key=0,
		edge_type=next,
		label=Next];
	924	[contract_name=HumanStandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	925	[contract_name=HumanStandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)

IRs:
REF_38(\
uint256) -> balances[_from]
TMP_101(bool) = REF_38 >= _value
REF_39(mapping(address => uint256)) -> allowed[_from]
REF_40(uint256) \
-> REF_39[msg.sender]
TMP_102(bool) = REF_40 >= _value
TMP_103(bool) = TMP_101 && TMP_102
TMP_104(None) = SOLIDITY_CALL require(\
bool)(TMP_103)",
		node_expression="require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)",
		node_irs="REF_38(uint256) -> balances[_from]
TMP_101(bool) = REF_38 >= _value
REF_39(mapping(address => uint256)) -> allowed[_from]
REF_40(\
uint256) -> REF_39[msg.sender]
TMP_102(bool) = REF_40 >= _value
TMP_103(bool) = TMP_101 && TMP_102
TMP_104(None) = SOLIDITY_CALL \
require(bool)(TMP_103)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	924 -> 925	[key=0,
		edge_type=next,
		label=Next];
	926	[contract_name=HumanStandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[_to] += _value

IRs:
REF_41(uint256) -> balances[_to]
REF_41(-> balances) = REF_41 + _\
value",
		node_expression="balances[_to] += _value",
		node_irs="REF_41(uint256) -> balances[_to]
REF_41(-> balances) = REF_41 + _value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	925 -> 926	[key=0,
		edge_type=next,
		label=Next];
	927	[contract_name=HumanStandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[_from] -= _value

IRs:
REF_42(uint256) -> balances[_from]
REF_42(-> balances) = REF_\
42 - _value",
		node_expression="balances[_from] -= _value",
		node_irs="REF_42(uint256) -> balances[_from]
REF_42(-> balances) = REF_42 - _value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	926 -> 927	[key=0,
		edge_type=next,
		label=Next];
	928	[contract_name=HumanStandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_43(mapping(address => uint256)) -> allowed[_from]
\
REF_44(uint256) -> REF_43[msg.sender]
REF_44(-> allowed) = REF_44 - _value",
		node_expression="allowed[_from][msg.sender] -= _value",
		node_irs="REF_43(mapping(address => uint256)) -> allowed[_from]
REF_44(uint256) -> REF_43[msg.sender]
REF_44(-> allowed) = REF_44 - _value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	927 -> 928	[key=0,
		edge_type=next,
		label=Next];
	929	[contract_name=HumanStandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)",
		node_expression="Transfer(_from,_to,_value)",
		node_irs="Emit Transfer(_from._to._value)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	928 -> 929	[key=0,
		edge_type=next,
		label=Next];
	930	[contract_name=HumanStandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_irs="RETURN True",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	929 -> 930	[key=0,
		edge_type=next,
		label=Next];
	931	[contract_name=HumanStandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="spank_chain_payment.sol_HumanStandardToken_transferFrom(address,address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	931 -> 924	[key=0,
		edge_type=next,
		label=Next];
	932	[contract_name=HumanStandardToken,
		function_fullname="balanceOf(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	933	[contract_name=HumanStandardToken,
		function_fullname="balanceOf(address)",
		label="Node Type: RETURN

EXPRESSION:
balances[_owner]

IRs:
REF_45(uint256) -> balances[_owner]
RETURN REF_45",
		node_expression="balances[_owner]",
		node_irs="REF_45(uint256) -> balances[_owner]
RETURN REF_45",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	932 -> 933	[key=0,
		edge_type=next,
		label=Next];
	934	[contract_name=HumanStandardToken,
		function_fullname="balanceOf(address)",
		label="spank_chain_payment.sol_HumanStandardToken_balanceOf(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	934 -> 932	[key=0,
		edge_type=next,
		label=Next];
	935	[contract_name=HumanStandardToken,
		function_fullname="approve(address,uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	936	[contract_name=HumanStandardToken,
		function_fullname="approve(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_46(mapping(address => uint256)) -> allowed[msg.sender]
\
REF_47(uint256) -> REF_46[_spender]
REF_47 (->allowed) := _value(uint256)",
		node_expression="allowed[msg.sender][_spender] = _value",
		node_irs="REF_46(mapping(address => uint256)) -> allowed[msg.sender]
REF_47(uint256) -> REF_46[_spender]
REF_47 (->allowed) := _value(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	935 -> 936	[key=0,
		edge_type=next,
		label=Next];
	937	[contract_name=HumanStandardToken,
		function_fullname="approve(address,uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender._spender._value)",
		node_expression="Approval(msg.sender,_spender,_value)",
		node_irs="Emit Approval(msg.sender._spender._value)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	936 -> 937	[key=0,
		edge_type=next,
		label=Next];
	938	[contract_name=HumanStandardToken,
		function_fullname="approve(address,uint256)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_irs="RETURN True",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	937 -> 938	[key=0,
		edge_type=next,
		label=Next];
	939	[contract_name=HumanStandardToken,
		function_fullname="approve(address,uint256)",
		label="spank_chain_payment.sol_HumanStandardToken_approve(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	939 -> 935	[key=0,
		edge_type=next,
		label=Next];
	940	[contract_name=HumanStandardToken,
		function_fullname="allowance(address,address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	941	[contract_name=HumanStandardToken,
		function_fullname="allowance(address,address)",
		label="Node Type: RETURN

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_48(mapping(address => uint256)) -> allowed[_owner]
REF_49(uint256) \
-> REF_48[_spender]
RETURN REF_49",
		node_expression="allowed[_owner][_spender]",
		node_irs="REF_48(mapping(address => uint256)) -> allowed[_owner]
REF_49(uint256) -> REF_48[_spender]
RETURN REF_49",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	940 -> 941	[key=0,
		edge_type=next,
		label=Next];
	942	[contract_name=HumanStandardToken,
		function_fullname="allowance(address,address)",
		label="spank_chain_payment.sol_HumanStandardToken_allowance(address,address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	942 -> 940	[key=0,
		edge_type=next,
		label=Next];
	943	[contract_name=HumanStandardToken,
		function_fullname="balanceOf(address)",
		label="spank_chain_payment.sol_HumanStandardToken_balanceOf(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	944	[contract_name=HumanStandardToken,
		function_fullname="transfer(address,uint256)",
		label="spank_chain_payment.sol_HumanStandardToken_transfer(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	945	[contract_name=HumanStandardToken,
		function_fullname="transferFrom(address,address,uint256)",
		label="spank_chain_payment.sol_HumanStandardToken_transferFrom(address,address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	946	[contract_name=HumanStandardToken,
		function_fullname="approve(address,uint256)",
		label="spank_chain_payment.sol_HumanStandardToken_approve(address,uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	947	[contract_name=HumanStandardToken,
		function_fullname="allowance(address,address)",
		label="spank_chain_payment.sol_HumanStandardToken_allowance(address,address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	948	[contract_name=HumanStandardToken,
		function_fullname="constructor(uint256,string,uint8,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	949	[contract_name=HumanStandardToken,
		function_fullname="constructor(uint256,string,uint8,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] = _initialAmount

IRs:
REF_50(uint256) -> balances[msg.sender]
REF_50 (->\
balances) := _initialAmount(uint256)",
		node_expression="balances[msg.sender] = _initialAmount",
		node_irs="REF_50(uint256) -> balances[msg.sender]
REF_50 (->balances) := _initialAmount(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	948 -> 949	[key=0,
		edge_type=next,
		label=Next];
	950	[contract_name=HumanStandardToken,
		function_fullname="constructor(uint256,string,uint8,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
totalSupply = _initialAmount

IRs:
totalSupply(uint256) := _initialAmount(uint256)",
		node_expression="totalSupply = _initialAmount",
		node_irs="totalSupply(uint256) := _initialAmount(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	949 -> 950	[key=0,
		edge_type=next,
		label=Next];
	951	[contract_name=HumanStandardToken,
		function_fullname="constructor(uint256,string,uint8,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)",
		node_expression="name = _tokenName",
		node_irs="name(string) := _tokenName(string)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	950 -> 951	[key=0,
		edge_type=next,
		label=Next];
	952	[contract_name=HumanStandardToken,
		function_fullname="constructor(uint256,string,uint8,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
decimals = _decimalUnits

IRs:
decimals(uint8) := _decimalUnits(uint8)",
		node_expression="decimals = _decimalUnits",
		node_irs="decimals(uint8) := _decimalUnits(uint8)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	951 -> 952	[key=0,
		edge_type=next,
		label=Next];
	953	[contract_name=HumanStandardToken,
		function_fullname="constructor(uint256,string,uint8,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
symbol = _tokenSymbol

IRs:
symbol(string) := _tokenSymbol(string)",
		node_expression="symbol = _tokenSymbol",
		node_irs="symbol(string) := _tokenSymbol(string)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	952 -> 953	[key=0,
		edge_type=next,
		label=Next];
	954	[contract_name=HumanStandardToken,
		function_fullname="constructor(uint256,string,uint8,string)",
		label="spank_chain_payment.sol_HumanStandardToken_constructor(uint256,string,uint8,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	954 -> 948	[key=0,
		edge_type=next,
		label=Next];
	955	[contract_name=HumanStandardToken,
		function_fullname="approveAndCall(address,uint256,bytes)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	956	[contract_name=HumanStandardToken,
		function_fullname="approveAndCall(address,uint256,bytes)",
		label="Node Type: EXPRESSION

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_51(mapping(address => uint256)) -> allowed[msg.sender]
\
REF_52(uint256) -> REF_51[_spender]
REF_52 (->allowed) := _value(uint256)",
		node_expression="allowed[msg.sender][_spender] = _value",
		node_irs="REF_51(mapping(address => uint256)) -> allowed[msg.sender]
REF_52(uint256) -> REF_51[_spender]
REF_52 (->allowed) := _value(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	955 -> 956	[key=0,
		edge_type=next,
		label=Next];
	957	[contract_name=HumanStandardToken,
		function_fullname="approveAndCall(address,uint256,bytes)",
		label="Node Type: EXPRESSION

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender._spender._value)",
		node_expression="Approval(msg.sender,_spender,_value)",
		node_irs="Emit Approval(msg.sender._spender._value)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	956 -> 957	[key=0,
		edge_type=next,
		label=Next];
	958	[contract_name=HumanStandardToken,
		function_fullname="approveAndCall(address,uint256,bytes)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,\
bytes)))),msg.sender,_value,this,_extraData))

IRs:
TMP_108(bytes32) = SOLIDITY_CALL keccak256()(receiveApproval(address,uint256,\
address,bytes))
TMP_109 = CONVERT TMP_108 to bytes32
TMP_110 = CONVERT TMP_109 to bytes4
TMP_111(bool) = LOW_LEVEL_CALL, dest:_spender, \
function:call, arguments:['TMP_110', 'msg.sender', '_value', 'this', '_extraData']  
TMP_112(None) = SOLIDITY_CALL require(bool)(\
TMP_111)",
		node_expression="require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_\
extraData))",
		node_irs="TMP_108(bytes32) = SOLIDITY_CALL keccak256()(receiveApproval(address,uint256,address,bytes))
TMP_109 = CONVERT TMP_108 to bytes32
\
TMP_110 = CONVERT TMP_109 to bytes4
TMP_111(bool) = LOW_LEVEL_CALL, dest:_spender, function:call, arguments:['TMP_110', 'msg.sender', '_\
value', 'this', '_extraData']  
TMP_112(None) = SOLIDITY_CALL require(bool)(TMP_111)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	957 -> 958	[key=0,
		edge_type=next,
		label=Next];
	959	[contract_name=HumanStandardToken,
		function_fullname="approveAndCall(address,uint256,bytes)",
		label="Node Type: RETURN

EXPRESSION:
true

IRs:
RETURN True",
		node_expression=true,
		node_irs="RETURN True",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	958 -> 959	[key=0,
		edge_type=next,
		label=Next];
	960	[contract_name=HumanStandardToken,
		function_fullname="approveAndCall(address,uint256,bytes)",
		label="spank_chain_payment.sol_HumanStandardToken_approveAndCall(address,uint256,bytes)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	960 -> 955	[key=0,
		edge_type=next,
		label=Next];
	961	[contract_name=HumanStandardToken,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
version = H0.1

IRs:
version(string) := H0.1(string)",
		node_expression="version = H0.1",
		node_irs="version(string) := H0.1(string)",
		node_type=OTHER_ENTRYPOINT,
		source_file="spank_chain_payment.sol"];
	962	[contract_name=HumanStandardToken,
		function_fullname="slitherConstructorVariables()",
		label="spank_chain_payment.sol_HumanStandardToken_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	962 -> 961	[key=0,
		edge_type=next,
		label=Next];
	963	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	964	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].partyAddresses[0] == address(0),Channel has already been \
created.)

IRs:
REF_54(LedgerChannel.Channel) -> Channels[_lcID]
REF_55(address[2]) -> REF_54.partyAddresses
REF_56(address) -> \
REF_55[0]
TMP_113 = CONVERT 0 to address
TMP_114(bool) = REF_56 == TMP_113
TMP_115(None) = SOLIDITY_CALL require(bool,string)(TMP_\
114,Channel has already been created.)",
		node_expression="require(bool,string)(Channels[_lcID].partyAddresses[0] == address(0),Channel has already been created.)",
		node_irs="REF_54(LedgerChannel.Channel) -> Channels[_lcID]
REF_55(address[2]) -> REF_54.partyAddresses
REF_56(address) -> REF_55[0]
TMP_113 = \
CONVERT 0 to address
TMP_114(bool) = REF_56 == TMP_113
TMP_115(None) = SOLIDITY_CALL require(bool,string)(TMP_114,Channel has already \
been created.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	963 -> 964	[key=0,
		edge_type=next,
		label=Next];
	965	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(_partyI != 0x0,No partyI address provided to LC creation)

IRs:
TMP_116(\
bool) = _partyI != 0
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,No partyI address provided to LC creation)",
		node_expression="require(bool,string)(_partyI != 0x0,No partyI address provided to LC creation)",
		node_irs="TMP_116(bool) = _partyI != 0
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,No partyI address provided to LC creation)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	964 -> 965	[key=0,
		edge_type=next,
		label=Next];
	966	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(_balances[0] >= 0 && _balances[1] >= 0,Balances cannot be negative)

IRs:
\
REF_57(uint256) -> _balances[0]
TMP_118(bool) = REF_57 >= 0
REF_58(uint256) -> _balances[1]
TMP_119(bool) = REF_58 >= 0
TMP_120(\
bool) = TMP_118 && TMP_119
TMP_121(None) = SOLIDITY_CALL require(bool,string)(TMP_120,Balances cannot be negative)",
		node_expression="require(bool,string)(_balances[0] >= 0 && _balances[1] >= 0,Balances cannot be negative)",
		node_irs="REF_57(uint256) -> _balances[0]
TMP_118(bool) = REF_57 >= 0
REF_58(uint256) -> _balances[1]
TMP_119(bool) = REF_58 >= 0
TMP_120(\
bool) = TMP_118 && TMP_119
TMP_121(None) = SOLIDITY_CALL require(bool,string)(TMP_120,Balances cannot be negative)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	965 -> 966	[key=0,
		edge_type=next,
		label=Next];
	967	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].partyAddresses[0] = msg.sender

IRs:
REF_59(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_60(address[2]) -> REF_59.partyAddresses
REF_61(address) -> REF_60[0]
REF_61 (->Channels) := msg.sender(address)",
		node_expression="Channels[_lcID].partyAddresses[0] = msg.sender",
		node_irs="REF_59(LedgerChannel.Channel) -> Channels[_lcID]
REF_60(address[2]) -> REF_59.partyAddresses
REF_61(address) -> REF_60[0]
REF_61 (\
->Channels) := msg.sender(address)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	966 -> 967	[key=0,
		edge_type=next,
		label=Next];
	968	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].partyAddresses[1] = _partyI

IRs:
REF_62(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_63(address[2]) -> REF_62.partyAddresses
REF_64(address) -> REF_63[1]
REF_64 (->Channels) := _partyI(address)",
		node_expression="Channels[_lcID].partyAddresses[1] = _partyI",
		node_irs="REF_62(LedgerChannel.Channel) -> Channels[_lcID]
REF_63(address[2]) -> REF_62.partyAddresses
REF_64(address) -> REF_63[1]
REF_64 (\
->Channels) := _partyI(address)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	967 -> 968	[key=0,
		edge_type=next,
		label=Next];
	969	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: IF

EXPRESSION:
_balances[0] != 0

IRs:
REF_65(uint256) -> _balances[0]
TMP_122(bool) = REF_65 != 0
CONDITION TMP_122",
		node_expression="_balances[0] != 0",
		node_irs="REF_65(uint256) -> _balances[0]
TMP_122(bool) = REF_65 != 0
CONDITION TMP_122",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	968 -> 969	[key=0,
		edge_type=next,
		label=Next];
	970	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(msg.value == _balances[0],Eth balance does not match sent value)

IRs:
REF_\
66(uint256) -> _balances[0]
TMP_123(bool) = msg.value == REF_66
TMP_124(None) = SOLIDITY_CALL require(bool,string)(TMP_123,Eth balance \
does not match sent value)",
		node_expression="require(bool,string)(msg.value == _balances[0],Eth balance does not match sent value)",
		node_irs="REF_66(uint256) -> _balances[0]
TMP_123(bool) = msg.value == REF_66
TMP_124(None) = SOLIDITY_CALL require(bool,string)(TMP_123,Eth \
balance does not match sent value)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	969 -> 970	[key=0,
		edge_type=if_true,
		label=True];
	972	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	969 -> 972	[key=0,
		edge_type=if_false,
		label=False];
	971	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].ethBalances[0] = msg.value

IRs:
REF_67(LedgerChannel.Channel) -> Channels[_lcID]
\
REF_68(uint256[4]) -> REF_67.ethBalances
REF_69(uint256) -> REF_68[0]
REF_69 (->Channels) := msg.value(uint256)",
		node_expression="Channels[_lcID].ethBalances[0] = msg.value",
		node_irs="REF_67(LedgerChannel.Channel) -> Channels[_lcID]
REF_68(uint256[4]) -> REF_67.ethBalances
REF_69(uint256) -> REF_68[0]
REF_69 (->\
Channels) := msg.value(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	970 -> 971	[key=0,
		edge_type=next,
		label=Next];
	971 -> 972	[key=0,
		edge_type=next,
		label=Next];
	973	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: IF

EXPRESSION:
_balances[1] != 0

IRs:
REF_70(uint256) -> _balances[1]
TMP_125(bool) = REF_70 != 0
CONDITION TMP_125",
		node_expression="_balances[1] != 0",
		node_irs="REF_70(uint256) -> _balances[1]
TMP_125(bool) = REF_70 != 0
CONDITION TMP_125",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	972 -> 973	[key=0,
		edge_type=next,
		label=Next];
	974	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].token = HumanStandardToken(_token)

IRs:
REF_71(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_72(HumanStandardToken) -> REF_71.token
TMP_126 = CONVERT _token to HumanStandardToken
REF_72 (->Channels) := TMP_126(HumanStandardToken)",
		node_expression="Channels[_lcID].token = HumanStandardToken(_token)",
		node_irs="REF_71(LedgerChannel.Channel) -> Channels[_lcID]
REF_72(HumanStandardToken) -> REF_71.token
TMP_126 = CONVERT _token to HumanStandardToken
\
REF_72 (->Channels) := TMP_126(HumanStandardToken)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	973 -> 974	[key=0,
		edge_type=if_true,
		label=True];
	977	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	973 -> 977	[key=0,
		edge_type=if_false,
		label=False];
	975	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: \
token transfer failure)

IRs:
REF_73(LedgerChannel.Channel) -> Channels[_lcID]
REF_74(HumanStandardToken) -> REF_73.token
REF_76(\
uint256) -> _balances[1]
TMP_127(bool) = HIGH_LEVEL_CALL, dest:REF_74(HumanStandardToken), function:transferFrom, arguments:['msg.sender', '\
this', 'REF_76']  
TMP_128(None) = SOLIDITY_CALL require(bool,string)(TMP_127,CreateChannel: token transfer failure)",
		node_expression="require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure)",
		node_irs="REF_73(LedgerChannel.Channel) -> Channels[_lcID]
REF_74(HumanStandardToken) -> REF_73.token
REF_76(uint256) -> _balances[1]
TMP_\
127(bool) = HIGH_LEVEL_CALL, dest:REF_74(HumanStandardToken), function:transferFrom, arguments:['msg.sender', 'this', 'REF_76']  
\
TMP_128(None) = SOLIDITY_CALL require(bool,string)(TMP_127,CreateChannel: token transfer failure)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	974 -> 975	[key=0,
		edge_type=next,
		label=Next];
	976	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].erc20Balances[0] = _balances[1]

IRs:
REF_77(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_78(uint256[4]) -> REF_77.erc20Balances
REF_79(uint256) -> REF_78[0]
REF_80(uint256) -> _balances[1]
REF_79 (->Channels) := \
REF_80(uint256)",
		node_expression="Channels[_lcID].erc20Balances[0] = _balances[1]",
		node_irs="REF_77(LedgerChannel.Channel) -> Channels[_lcID]
REF_78(uint256[4]) -> REF_77.erc20Balances
REF_79(uint256) -> REF_78[0]
REF_80(\
uint256) -> _balances[1]
REF_79 (->Channels) := REF_80(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	975 -> 976	[key=0,
		edge_type=next,
		label=Next];
	976 -> 977	[key=0,
		edge_type=next,
		label=Next];
	978	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].sequence = 0

IRs:
REF_81(LedgerChannel.Channel) -> Channels[_lcID]
REF_82(uint256) \
-> REF_81.sequence
REF_82 (->Channels) := 0(uint256)",
		node_expression="Channels[_lcID].sequence = 0",
		node_irs="REF_81(LedgerChannel.Channel) -> Channels[_lcID]
REF_82(uint256) -> REF_81.sequence
REF_82 (->Channels) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	977 -> 978	[key=0,
		edge_type=next,
		label=Next];
	979	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].confirmTime = _confirmTime

IRs:
REF_83(LedgerChannel.Channel) -> Channels[_lcID]
\
REF_84(uint256) -> REF_83.confirmTime
REF_84 (->Channels) := _confirmTime(uint256)",
		node_expression="Channels[_lcID].confirmTime = _confirmTime",
		node_irs="REF_83(LedgerChannel.Channel) -> Channels[_lcID]
REF_84(uint256) -> REF_83.confirmTime
REF_84 (->Channels) := _confirmTime(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	978 -> 979	[key=0,
		edge_type=next,
		label=Next];
	980	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].LCopenTimeout = now + _confirmTime

IRs:
REF_85(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_86(uint256) -> REF_85.LCopenTimeout
TMP_129(uint256) = now + _confirmTime
REF_86 (->Channels) := TMP_129(uint256)",
		node_expression="Channels[_lcID].LCopenTimeout = now + _confirmTime",
		node_irs="REF_85(LedgerChannel.Channel) -> Channels[_lcID]
REF_86(uint256) -> REF_85.LCopenTimeout
TMP_129(uint256) = now + _confirmTime
REF_\
86 (->Channels) := TMP_129(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	979 -> 980	[key=0,
		edge_type=next,
		label=Next];
	981	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].initialDeposit = _balances

IRs:
REF_87(LedgerChannel.Channel) -> Channels[_lcID]
\
REF_88(uint256[2]) -> REF_87.initialDeposit
REF_88 (->Channels) := _balances(uint256[2])",
		node_expression="Channels[_lcID].initialDeposit = _balances",
		node_irs="REF_87(LedgerChannel.Channel) -> Channels[_lcID]
REF_88(uint256[2]) -> REF_87.initialDeposit
REF_88 (->Channels) := _balances(uint256[\
2])",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	980 -> 981	[key=0,
		edge_type=next,
		label=Next];
	982	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
DidLCOpen(_lcID,msg.sender,_partyI,_balances[0],_token,_balances[1],Channels[_lcID].LCopenTimeout)

\
IRs:
REF_89(uint256) -> _balances[0]
REF_90(uint256) -> _balances[1]
REF_91(LedgerChannel.Channel) -> Channels[_lcID]
REF_92(uint256) \
-> REF_91.LCopenTimeout
Emit DidLCOpen(_lcID.msg.sender._partyI.REF_89._token.REF_90.REF_92)",
		node_expression="DidLCOpen(_lcID,msg.sender,_partyI,_balances[0],_token,_balances[1],Channels[_lcID].LCopenTimeout)",
		node_irs="REF_89(uint256) -> _balances[0]
REF_90(uint256) -> _balances[1]
REF_91(LedgerChannel.Channel) -> Channels[_lcID]
REF_92(uint256) \
-> REF_91.LCopenTimeout
Emit DidLCOpen(_lcID.msg.sender._partyI.REF_89._token.REF_90.REF_92)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	981 -> 982	[key=0,
		edge_type=next,
		label=Next];
	983	[contract_name=LedgerChannel,
		function_fullname="createChannel(bytes32,address,uint256,address,uint256[2])",
		label="spank_chain_payment.sol_LedgerChannel_createChannel(bytes32,address,uint256,address,uint256[2])",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	983 -> 963	[key=0,
		edge_type=next,
		label=Next];
	984	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	985	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)

\
IRs:
REF_93(LedgerChannel.Channel) -> Channels[_lcID]
REF_94(address[2]) -> REF_93.partyAddresses
REF_95(address) -> REF_94[0]
TMP_\
131(bool) = msg.sender == REF_95
REF_96(LedgerChannel.Channel) -> Channels[_lcID]
REF_97(bool) -> REF_96.isOpen
TMP_132(bool) = \
REF_97 == False
TMP_133(bool) = TMP_131 && TMP_132
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)",
		node_expression="require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)",
		node_irs="REF_93(LedgerChannel.Channel) -> Channels[_lcID]
REF_94(address[2]) -> REF_93.partyAddresses
REF_95(address) -> REF_94[0]
TMP_131(\
bool) = msg.sender == REF_95
REF_96(LedgerChannel.Channel) -> Channels[_lcID]
REF_97(bool) -> REF_96.isOpen
TMP_132(bool) = REF_\
97 == False
TMP_133(bool) = TMP_131 && TMP_132
TMP_134(None) = SOLIDITY_CALL require(bool)(TMP_133)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	984 -> 985	[key=0,
		edge_type=next,
		label=Next];
	986	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(now > Channels[_lcID].LCopenTimeout)

IRs:
REF_98(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_99(uint256) -> REF_98.LCopenTimeout
TMP_135(bool) = now > REF_99
TMP_136(None) = SOLIDITY_CALL require(bool)(TMP_135)",
		node_expression="require(bool)(now > Channels[_lcID].LCopenTimeout)",
		node_irs="REF_98(LedgerChannel.Channel) -> Channels[_lcID]
REF_99(uint256) -> REF_98.LCopenTimeout
TMP_135(bool) = now > REF_99
TMP_136(None) = \
SOLIDITY_CALL require(bool)(TMP_135)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	985 -> 986	[key=0,
		edge_type=next,
		label=Next];
	987	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="Node Type: IF

EXPRESSION:
Channels[_lcID].initialDeposit[0] != 0

IRs:
REF_100(LedgerChannel.Channel) -> Channels[_lcID]
REF_101(\
uint256[2]) -> REF_100.initialDeposit
REF_102(uint256) -> REF_101[0]
TMP_137(bool) = REF_102 != 0
CONDITION TMP_137",
		node_expression="Channels[_lcID].initialDeposit[0] != 0",
		node_irs="REF_100(LedgerChannel.Channel) -> Channels[_lcID]
REF_101(uint256[2]) -> REF_100.initialDeposit
REF_102(uint256) -> REF_101[0]
TMP_\
137(bool) = REF_102 != 0
CONDITION TMP_137",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	986 -> 987	[key=0,
		edge_type=next,
		label=Next];
	988	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0])

IRs:
REF_103(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_104(address[2]) -> REF_103.partyAddresses
REF_105(address) -> REF_104[0]
REF_107(LedgerChannel.Channel) -> \
Channels[_lcID]
REF_108(uint256[4]) -> REF_107.ethBalances
REF_109(uint256) -> REF_108[0]
Transfer dest:REF_105 value:REF_109",
		node_expression="Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0])",
		node_irs="REF_103(LedgerChannel.Channel) -> Channels[_lcID]
REF_104(address[2]) -> REF_103.partyAddresses
REF_105(address) -> REF_104[0]
REF_\
107(LedgerChannel.Channel) -> Channels[_lcID]
REF_108(uint256[4]) -> REF_107.ethBalances
REF_109(uint256) -> REF_108[0]
Transfer \
dest:REF_105 value:REF_109",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	987 -> 988	[key=0,
		edge_type=if_true,
		label=True];
	989	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	987 -> 989	[key=0,
		edge_type=if_false,
		label=False];
	988 -> 989	[key=0,
		edge_type=next,
		label=Next];
	990	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="Node Type: IF

EXPRESSION:
Channels[_lcID].initialDeposit[1] != 0

IRs:
REF_110(LedgerChannel.Channel) -> Channels[_lcID]
REF_111(\
uint256[2]) -> REF_110.initialDeposit
REF_112(uint256) -> REF_111[1]
TMP_139(bool) = REF_112 != 0
CONDITION TMP_139",
		node_expression="Channels[_lcID].initialDeposit[1] != 0",
		node_irs="REF_110(LedgerChannel.Channel) -> Channels[_lcID]
REF_111(uint256[2]) -> REF_110.initialDeposit
REF_112(uint256) -> REF_111[1]
TMP_\
139(bool) = REF_112 != 0
CONDITION TMP_139",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	989 -> 990	[key=0,
		edge_type=next,
		label=Next];
	991	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_\
lcID].erc20Balances[0]),CreateChannel: token transfer failure)

IRs:
REF_113(LedgerChannel.Channel) -> Channels[_lcID]
REF_114(HumanStandardToken) \
-> REF_113.token
REF_116(LedgerChannel.Channel) -> Channels[_lcID]
REF_117(address[2]) -> REF_116.partyAddresses
REF_118(address) \
-> REF_117[0]
REF_119(LedgerChannel.Channel) -> Channels[_lcID]
REF_120(uint256[4]) -> REF_119.erc20Balances
REF_121(uint256) -> \
REF_120[0]
TMP_140(bool) = HIGH_LEVEL_CALL, dest:REF_114(HumanStandardToken), function:transfer, arguments:['REF_118', 'REF_121']  
\
TMP_141(None) = SOLIDITY_CALL require(bool,string)(TMP_140,CreateChannel: token transfer failure)",
		node_expression="require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: \
token transfer failure)",
		node_irs="REF_113(LedgerChannel.Channel) -> Channels[_lcID]
REF_114(HumanStandardToken) -> REF_113.token
REF_116(LedgerChannel.Channel) -> \
Channels[_lcID]
REF_117(address[2]) -> REF_116.partyAddresses
REF_118(address) -> REF_117[0]
REF_119(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_120(uint256[4]) -> REF_119.erc20Balances
REF_121(uint256) -> REF_120[0]
TMP_140(bool) = HIGH_LEVEL_CALL, dest:REF_114(\
HumanStandardToken), function:transfer, arguments:['REF_118', 'REF_121']  
TMP_141(None) = SOLIDITY_CALL require(bool,string)(TMP_\
140,CreateChannel: token transfer failure)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	990 -> 991	[key=0,
		edge_type=if_true,
		label=True];
	992	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	990 -> 992	[key=0,
		edge_type=if_false,
		label=False];
	991 -> 992	[key=0,
		edge_type=next,
		label=Next];
	993	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
DidLCClose(_lcID,0,Channels[_lcID].ethBalances[0],Channels[_lcID].erc20Balances[0],0,0)

IRs:
\
REF_122(LedgerChannel.Channel) -> Channels[_lcID]
REF_123(uint256[4]) -> REF_122.ethBalances
REF_124(uint256) -> REF_123[0]
REF_\
125(LedgerChannel.Channel) -> Channels[_lcID]
REF_126(uint256[4]) -> REF_125.erc20Balances
REF_127(uint256) -> REF_126[0]
Emit DidLCClose(_\
lcID.0.REF_124.REF_127.0.0)",
		node_expression="DidLCClose(_lcID,0,Channels[_lcID].ethBalances[0],Channels[_lcID].erc20Balances[0],0,0)",
		node_irs="REF_122(LedgerChannel.Channel) -> Channels[_lcID]
REF_123(uint256[4]) -> REF_122.ethBalances
REF_124(uint256) -> REF_123[0]
REF_\
125(LedgerChannel.Channel) -> Channels[_lcID]
REF_126(uint256[4]) -> REF_125.erc20Balances
REF_127(uint256) -> REF_126[0]
Emit DidLCClose(_\
lcID.0.REF_124.REF_127.0.0)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	992 -> 993	[key=0,
		edge_type=next,
		label=Next];
	994	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
delete Channels[_lcID]

IRs:
REF_128(LedgerChannel.Channel) -> Channels[_lcID]
Channels = delete \
REF_128 ",
		node_expression="delete Channels[_lcID]",
		node_irs="REF_128(LedgerChannel.Channel) -> Channels[_lcID]
Channels = delete REF_128 ",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	993 -> 994	[key=0,
		edge_type=next,
		label=Next];
	995	[contract_name=LedgerChannel,
		function_fullname="LCOpenTimeout(bytes32)",
		label="spank_chain_payment.sol_LedgerChannel_LCOpenTimeout(bytes32)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	995 -> 984	[key=0,
		edge_type=next,
		label=Next];
	996	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	997	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(Channels[_lcID].isOpen == false)

IRs:
REF_129(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_130(bool) -> REF_129.isOpen
TMP_143(bool) = REF_130 == False
TMP_144(None) = SOLIDITY_CALL require(bool)(TMP_143)",
		node_expression="require(bool)(Channels[_lcID].isOpen == false)",
		node_irs="REF_129(LedgerChannel.Channel) -> Channels[_lcID]
REF_130(bool) -> REF_129.isOpen
TMP_143(bool) = REF_130 == False
TMP_144(None) = \
SOLIDITY_CALL require(bool)(TMP_143)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	996 -> 997	[key=0,
		edge_type=next,
		label=Next];
	998	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(msg.sender == Channels[_lcID].partyAddresses[1])

IRs:
REF_131(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_132(address[2]) -> REF_131.partyAddresses
REF_133(address) -> REF_132[1]
TMP_145(bool) = msg.sender == REF_\
133
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)",
		node_expression="require(bool)(msg.sender == Channels[_lcID].partyAddresses[1])",
		node_irs="REF_131(LedgerChannel.Channel) -> Channels[_lcID]
REF_132(address[2]) -> REF_131.partyAddresses
REF_133(address) -> REF_132[1]
TMP_\
145(bool) = msg.sender == REF_133
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	997 -> 998	[key=0,
		edge_type=next,
		label=Next];
	999	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: IF

EXPRESSION:
_balances[0] != 0

IRs:
REF_134(uint256) -> _balances[0]
TMP_147(bool) = REF_134 != 0
CONDITION TMP_147",
		node_expression="_balances[0] != 0",
		node_irs="REF_134(uint256) -> _balances[0]
TMP_147(bool) = REF_134 != 0
CONDITION TMP_147",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	998 -> 999	[key=0,
		edge_type=next,
		label=Next];
	1000	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(msg.value == _balances[0],state balance does not match sent value)

IRs:
\
REF_135(uint256) -> _balances[0]
TMP_148(bool) = msg.value == REF_135
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,\
state balance does not match sent value)",
		node_expression="require(bool,string)(msg.value == _balances[0],state balance does not match sent value)",
		node_irs="REF_135(uint256) -> _balances[0]
TMP_148(bool) = msg.value == REF_135
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,\
state balance does not match sent value)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	999 -> 1000	[key=0,
		edge_type=if_true,
		label=True];
	1002	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	999 -> 1002	[key=0,
		edge_type=if_false,
		label=False];
	1001	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].ethBalances[1] = msg.value

IRs:
REF_136(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_137(uint256[4]) -> REF_136.ethBalances
REF_138(uint256) -> REF_137[1]
REF_138 (->Channels) := msg.value(uint256)",
		node_expression="Channels[_lcID].ethBalances[1] = msg.value",
		node_irs="REF_136(LedgerChannel.Channel) -> Channels[_lcID]
REF_137(uint256[4]) -> REF_136.ethBalances
REF_138(uint256) -> REF_137[1]
REF_\
138 (->Channels) := msg.value(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1000 -> 1001	[key=0,
		edge_type=next,
		label=Next];
	1001 -> 1002	[key=0,
		edge_type=next,
		label=Next];
	1003	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: IF

EXPRESSION:
_balances[1] != 0

IRs:
REF_139(uint256) -> _balances[1]
TMP_150(bool) = REF_139 != 0
CONDITION TMP_150",
		node_expression="_balances[1] != 0",
		node_irs="REF_139(uint256) -> _balances[1]
TMP_150(bool) = REF_139 != 0
CONDITION TMP_150",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1002 -> 1003	[key=0,
		edge_type=next,
		label=Next];
	1004	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),joinChannel: \
token transfer failure)

IRs:
REF_140(LedgerChannel.Channel) -> Channels[_lcID]
REF_141(HumanStandardToken) -> REF_140.token
REF_\
143(uint256) -> _balances[1]
TMP_151(bool) = HIGH_LEVEL_CALL, dest:REF_141(HumanStandardToken), function:transferFrom, arguments:['\
msg.sender', 'this', 'REF_143']  
TMP_152(None) = SOLIDITY_CALL require(bool,string)(TMP_151,joinChannel: token transfer failure)",
		node_expression="require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),joinChannel: token transfer failure)",
		node_irs="REF_140(LedgerChannel.Channel) -> Channels[_lcID]
REF_141(HumanStandardToken) -> REF_140.token
REF_143(uint256) -> _balances[1]
\
TMP_151(bool) = HIGH_LEVEL_CALL, dest:REF_141(HumanStandardToken), function:transferFrom, arguments:['msg.sender', 'this', 'REF_\
143']  
TMP_152(None) = SOLIDITY_CALL require(bool,string)(TMP_151,joinChannel: token transfer failure)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1003 -> 1004	[key=0,
		edge_type=if_true,
		label=True];
	1006	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1003 -> 1006	[key=0,
		edge_type=if_false,
		label=False];
	1005	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].erc20Balances[1] = _balances[1]

IRs:
REF_144(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_145(uint256[4]) -> REF_144.erc20Balances
REF_146(uint256) -> REF_145[1]
REF_147(uint256) -> _balances[1]
REF_146 (->Channels) := \
REF_147(uint256)",
		node_expression="Channels[_lcID].erc20Balances[1] = _balances[1]",
		node_irs="REF_144(LedgerChannel.Channel) -> Channels[_lcID]
REF_145(uint256[4]) -> REF_144.erc20Balances
REF_146(uint256) -> REF_145[1]
REF_\
147(uint256) -> _balances[1]
REF_146 (->Channels) := REF_147(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1004 -> 1005	[key=0,
		edge_type=next,
		label=Next];
	1005 -> 1006	[key=0,
		edge_type=next,
		label=Next];
	1007	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].initialDeposit[0] += _balances[0]

IRs:
REF_148(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_149(uint256[2]) -> REF_148.initialDeposit
REF_150(uint256) -> REF_149[0]
REF_151(uint256) -> _balances[0]
REF_150(-> Channels) = \
REF_150 + REF_151",
		node_expression="Channels[_lcID].initialDeposit[0] += _balances[0]",
		node_irs="REF_148(LedgerChannel.Channel) -> Channels[_lcID]
REF_149(uint256[2]) -> REF_148.initialDeposit
REF_150(uint256) -> REF_149[0]
REF_\
151(uint256) -> _balances[0]
REF_150(-> Channels) = REF_150 + REF_151",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1006 -> 1007	[key=0,
		edge_type=next,
		label=Next];
	1008	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].initialDeposit[1] += _balances[1]

IRs:
REF_152(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_153(uint256[2]) -> REF_152.initialDeposit
REF_154(uint256) -> REF_153[1]
REF_155(uint256) -> _balances[1]
REF_154(-> Channels) = \
REF_154 + REF_155",
		node_expression="Channels[_lcID].initialDeposit[1] += _balances[1]",
		node_irs="REF_152(LedgerChannel.Channel) -> Channels[_lcID]
REF_153(uint256[2]) -> REF_152.initialDeposit
REF_154(uint256) -> REF_153[1]
REF_\
155(uint256) -> _balances[1]
REF_154(-> Channels) = REF_154 + REF_155",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1007 -> 1008	[key=0,
		edge_type=next,
		label=Next];
	1009	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].isOpen = true

IRs:
REF_156(LedgerChannel.Channel) -> Channels[_lcID]
REF_157(\
bool) -> REF_156.isOpen
REF_157 (->Channels) := True(bool)",
		node_expression="Channels[_lcID].isOpen = true",
		node_irs="REF_156(LedgerChannel.Channel) -> Channels[_lcID]
REF_157(bool) -> REF_156.isOpen
REF_157 (->Channels) := True(bool)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1008 -> 1009	[key=0,
		edge_type=next,
		label=Next];
	1010	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
numChannels ++

IRs:
TMP_153(uint256) := numChannels(uint256)
numChannels(uint256) = numChannels + \
1",
		node_expression="numChannels ++",
		node_irs="TMP_153(uint256) := numChannels(uint256)
numChannels(uint256) = numChannels + 1",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1009 -> 1010	[key=0,
		edge_type=next,
		label=Next];
	1011	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="Node Type: EXPRESSION

EXPRESSION:
DidLCJoin(_lcID,_balances[0],_balances[1])

IRs:
REF_158(uint256) -> _balances[0]
REF_159(uint256) \
-> _balances[1]
Emit DidLCJoin(_lcID.REF_158.REF_159)",
		node_expression="DidLCJoin(_lcID,_balances[0],_balances[1])",
		node_irs="REF_158(uint256) -> _balances[0]
REF_159(uint256) -> _balances[1]
Emit DidLCJoin(_lcID.REF_158.REF_159)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1010 -> 1011	[key=0,
		edge_type=next,
		label=Next];
	1012	[contract_name=LedgerChannel,
		function_fullname="joinChannel(bytes32,uint256[2])",
		label="spank_chain_payment.sol_LedgerChannel_joinChannel(bytes32,uint256[2])",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1012 -> 996	[key=0,
		edge_type=next,
		label=Next];
	1013	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	1014	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].isOpen == true,Tried adding funds to a closed channel)

\
IRs:
REF_160(LedgerChannel.Channel) -> Channels[_lcID]
REF_161(bool) -> REF_160.isOpen
TMP_155(bool) = REF_161 == True
TMP_156(None) = \
SOLIDITY_CALL require(bool,string)(TMP_155,Tried adding funds to a closed channel)",
		node_expression="require(bool,string)(Channels[_lcID].isOpen == true,Tried adding funds to a closed channel)",
		node_irs="REF_160(LedgerChannel.Channel) -> Channels[_lcID]
REF_161(bool) -> REF_160.isOpen
TMP_155(bool) = REF_161 == True
TMP_156(None) = \
SOLIDITY_CALL require(bool,string)(TMP_155,Tried adding funds to a closed channel)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1013 -> 1014	[key=0,
		edge_type=next,
		label=Next];
	1015	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[\
1])

IRs:
REF_162(LedgerChannel.Channel) -> Channels[_lcID]
REF_163(address[2]) -> REF_162.partyAddresses
REF_164(address) -> REF_\
163[0]
TMP_157(bool) = recipient == REF_164
REF_165(LedgerChannel.Channel) -> Channels[_lcID]
REF_166(address[2]) -> REF_165.partyAddresses
\
REF_167(address) -> REF_166[1]
TMP_158(bool) = recipient == REF_167
TMP_159(bool) = TMP_157 || TMP_158
TMP_160(None) = SOLIDITY_\
CALL require(bool)(TMP_159)",
		node_expression="require(bool)(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1])",
		node_irs="REF_162(LedgerChannel.Channel) -> Channels[_lcID]
REF_163(address[2]) -> REF_162.partyAddresses
REF_164(address) -> REF_163[0]
TMP_\
157(bool) = recipient == REF_164
REF_165(LedgerChannel.Channel) -> Channels[_lcID]
REF_166(address[2]) -> REF_165.partyAddresses
\
REF_167(address) -> REF_166[1]
TMP_158(bool) = recipient == REF_167
TMP_159(bool) = TMP_157 || TMP_158
TMP_160(None) = SOLIDITY_\
CALL require(bool)(TMP_159)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1014 -> 1015	[key=0,
		edge_type=next,
		label=Next];
	1016	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: IF

EXPRESSION:
Channels[_lcID].partyAddresses[0] == recipient

IRs:
REF_168(LedgerChannel.Channel) -> Channels[_lcID]
\
REF_169(address[2]) -> REF_168.partyAddresses
REF_170(address) -> REF_169[0]
TMP_161(bool) = REF_170 == recipient
CONDITION TMP_\
161",
		node_expression="Channels[_lcID].partyAddresses[0] == recipient",
		node_irs="REF_168(LedgerChannel.Channel) -> Channels[_lcID]
REF_169(address[2]) -> REF_168.partyAddresses
REF_170(address) -> REF_169[0]
TMP_\
161(bool) = REF_170 == recipient
CONDITION TMP_161",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1015 -> 1016	[key=0,
		edge_type=next,
		label=Next];
	1017	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: IF

EXPRESSION:
isToken

IRs:
CONDITION isToken",
		node_expression=isToken,
		node_irs="CONDITION isToken",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1016 -> 1017	[key=0,
		edge_type=if_true,
		label=True];
	1023	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1016 -> 1023	[key=0,
		edge_type=if_false,
		label=False];
	1018	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token \
transfer failure)

IRs:
REF_171(LedgerChannel.Channel) -> Channels[_lcID]
REF_172(HumanStandardToken) -> REF_171.token
TMP_162(bool) = \
HIGH_LEVEL_CALL, dest:REF_172(HumanStandardToken), function:transferFrom, arguments:['msg.sender', 'this', '_balance']  
TMP_163(\
None) = SOLIDITY_CALL require(bool,string)(TMP_162,deposit: token transfer failure)",
		node_expression="require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure)",
		node_irs="REF_171(LedgerChannel.Channel) -> Channels[_lcID]
REF_172(HumanStandardToken) -> REF_171.token
TMP_162(bool) = HIGH_LEVEL_CALL, \
dest:REF_172(HumanStandardToken), function:transferFrom, arguments:['msg.sender', 'this', '_balance']  
TMP_163(None) = SOLIDITY_\
CALL require(bool,string)(TMP_162,deposit: token transfer failure)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1017 -> 1018	[key=0,
		edge_type=if_true,
		label=True];
	1020	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(msg.value == _balance,state balance does not match sent value)

IRs:
TMP_\
164(bool) = msg.value == _balance
TMP_165(None) = SOLIDITY_CALL require(bool,string)(TMP_164,state balance does not match sent value)",
		node_expression="require(bool,string)(msg.value == _balance,state balance does not match sent value)",
		node_irs="TMP_164(bool) = msg.value == _balance
TMP_165(None) = SOLIDITY_CALL require(bool,string)(TMP_164,state balance does not match sent \
value)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1017 -> 1020	[key=0,
		edge_type=if_false,
		label=False];
	1019	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].erc20Balances[2] += _balance

IRs:
REF_174(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_175(uint256[4]) -> REF_174.erc20Balances
REF_176(uint256) -> REF_175[2]
REF_176(-> Channels) = REF_176 + _balance",
		node_expression="Channels[_lcID].erc20Balances[2] += _balance",
		node_irs="REF_174(LedgerChannel.Channel) -> Channels[_lcID]
REF_175(uint256[4]) -> REF_174.erc20Balances
REF_176(uint256) -> REF_175[2]
REF_\
176(-> Channels) = REF_176 + _balance",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1018 -> 1019	[key=0,
		edge_type=next,
		label=Next];
	1022	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1019 -> 1022	[key=0,
		edge_type=next,
		label=Next];
	1021	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].ethBalances[2] += msg.value

IRs:
REF_177(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_178(uint256[4]) -> REF_177.ethBalances
REF_179(uint256) -> REF_178[2]
REF_179(-> Channels) = REF_179 + msg.value",
		node_expression="Channels[_lcID].ethBalances[2] += msg.value",
		node_irs="REF_177(LedgerChannel.Channel) -> Channels[_lcID]
REF_178(uint256[4]) -> REF_177.ethBalances
REF_179(uint256) -> REF_178[2]
REF_\
179(-> Channels) = REF_179 + msg.value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1020 -> 1021	[key=0,
		edge_type=next,
		label=Next];
	1021 -> 1022	[key=0,
		edge_type=next,
		label=Next];
	1022 -> 1023	[key=0,
		edge_type=next,
		label=Next];
	1024	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: IF

EXPRESSION:
Channels[_lcID].partyAddresses[1] == recipient

IRs:
REF_180(LedgerChannel.Channel) -> Channels[_lcID]
\
REF_181(address[2]) -> REF_180.partyAddresses
REF_182(address) -> REF_181[1]
TMP_166(bool) = REF_182 == recipient
CONDITION TMP_\
166",
		node_expression="Channels[_lcID].partyAddresses[1] == recipient",
		node_irs="REF_180(LedgerChannel.Channel) -> Channels[_lcID]
REF_181(address[2]) -> REF_180.partyAddresses
REF_182(address) -> REF_181[1]
TMP_\
166(bool) = REF_182 == recipient
CONDITION TMP_166",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1023 -> 1024	[key=0,
		edge_type=next,
		label=Next];
	1025	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: IF

EXPRESSION:
isToken

IRs:
CONDITION isToken",
		node_expression=isToken,
		node_irs="CONDITION isToken",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1024 -> 1025	[key=0,
		edge_type=if_true,
		label=True];
	1031	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1024 -> 1031	[key=0,
		edge_type=if_false,
		label=False];
	1026	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token \
transfer failure)

IRs:
REF_183(LedgerChannel.Channel) -> Channels[_lcID]
REF_184(HumanStandardToken) -> REF_183.token
TMP_167(bool) = \
HIGH_LEVEL_CALL, dest:REF_184(HumanStandardToken), function:transferFrom, arguments:['msg.sender', 'this', '_balance']  
TMP_168(\
None) = SOLIDITY_CALL require(bool,string)(TMP_167,deposit: token transfer failure)",
		node_expression="require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure)",
		node_irs="REF_183(LedgerChannel.Channel) -> Channels[_lcID]
REF_184(HumanStandardToken) -> REF_183.token
TMP_167(bool) = HIGH_LEVEL_CALL, \
dest:REF_184(HumanStandardToken), function:transferFrom, arguments:['msg.sender', 'this', '_balance']  
TMP_168(None) = SOLIDITY_\
CALL require(bool,string)(TMP_167,deposit: token transfer failure)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1025 -> 1026	[key=0,
		edge_type=if_true,
		label=True];
	1028	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(msg.value == _balance,state balance does not match sent value)

IRs:
TMP_\
169(bool) = msg.value == _balance
TMP_170(None) = SOLIDITY_CALL require(bool,string)(TMP_169,state balance does not match sent value)",
		node_expression="require(bool,string)(msg.value == _balance,state balance does not match sent value)",
		node_irs="TMP_169(bool) = msg.value == _balance
TMP_170(None) = SOLIDITY_CALL require(bool,string)(TMP_169,state balance does not match sent \
value)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1025 -> 1028	[key=0,
		edge_type=if_false,
		label=False];
	1027	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].erc20Balances[3] += _balance

IRs:
REF_186(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_187(uint256[4]) -> REF_186.erc20Balances
REF_188(uint256) -> REF_187[3]
REF_188(-> Channels) = REF_188 + _balance",
		node_expression="Channels[_lcID].erc20Balances[3] += _balance",
		node_irs="REF_186(LedgerChannel.Channel) -> Channels[_lcID]
REF_187(uint256[4]) -> REF_186.erc20Balances
REF_188(uint256) -> REF_187[3]
REF_\
188(-> Channels) = REF_188 + _balance",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1026 -> 1027	[key=0,
		edge_type=next,
		label=Next];
	1030	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1027 -> 1030	[key=0,
		edge_type=next,
		label=Next];
	1029	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].ethBalances[3] += msg.value

IRs:
REF_189(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_190(uint256[4]) -> REF_189.ethBalances
REF_191(uint256) -> REF_190[3]
REF_191(-> Channels) = REF_191 + msg.value",
		node_expression="Channels[_lcID].ethBalances[3] += msg.value",
		node_irs="REF_189(LedgerChannel.Channel) -> Channels[_lcID]
REF_190(uint256[4]) -> REF_189.ethBalances
REF_191(uint256) -> REF_190[3]
REF_\
191(-> Channels) = REF_191 + msg.value",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1028 -> 1029	[key=0,
		edge_type=next,
		label=Next];
	1029 -> 1030	[key=0,
		edge_type=next,
		label=Next];
	1030 -> 1031	[key=0,
		edge_type=next,
		label=Next];
	1032	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="Node Type: EXPRESSION

EXPRESSION:
DidLCDeposit(_lcID,recipient,_balance,isToken)

IRs:
Emit DidLCDeposit(_lcID.recipient._balance.isToken)",
		node_expression="DidLCDeposit(_lcID,recipient,_balance,isToken)",
		node_irs="Emit DidLCDeposit(_lcID.recipient._balance.isToken)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1031 -> 1032	[key=0,
		edge_type=next,
		label=Next];
	1033	[contract_name=LedgerChannel,
		function_fullname="deposit(bytes32,address,uint256,bool)",
		label="spank_chain_payment.sol_LedgerChannel_deposit(bytes32,address,uint256,bool)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1033 -> 1013	[key=0,
		edge_type=next,
		label=Next];
	1034	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	1035	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(Channels[_lcID].isOpen == true)

IRs:
REF_192(LedgerChannel.Channel) -> Channels[_\
lcID]
REF_193(bool) -> REF_192.isOpen
TMP_172(bool) = REF_193 == True
TMP_173(None) = SOLIDITY_CALL require(bool)(TMP_172)",
		node_expression="require(bool)(Channels[_lcID].isOpen == true)",
		node_irs="REF_192(LedgerChannel.Channel) -> Channels[_lcID]
REF_193(bool) -> REF_192.isOpen
TMP_172(bool) = REF_193 == True
TMP_173(None) = \
SOLIDITY_CALL require(bool)(TMP_172)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1034 -> 1035	[key=0,
		edge_type=next,
		label=Next];
	1036	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
totalEthDeposit = Channels[_lcID].initialDeposit[0] + Channels[_lcID].ethBalances[2] + Channels[_\
lcID].ethBalances[3]

IRs:
REF_194(LedgerChannel.Channel) -> Channels[_lcID]
REF_195(uint256[2]) -> REF_194.initialDeposit
REF_196(\
uint256) -> REF_195[0]
REF_197(LedgerChannel.Channel) -> Channels[_lcID]
REF_198(uint256[4]) -> REF_197.ethBalances
REF_199(uint256) \
-> REF_198[2]
TMP_174(uint256) = REF_196 + REF_199
REF_200(LedgerChannel.Channel) -> Channels[_lcID]
REF_201(uint256[4]) -> REF_\
200.ethBalances
REF_202(uint256) -> REF_201[3]
TMP_175(uint256) = TMP_174 + REF_202
totalEthDeposit(uint256) := TMP_175(uint256)",
		node_expression="totalEthDeposit = Channels[_lcID].initialDeposit[0] + Channels[_lcID].ethBalances[2] + Channels[_lcID].ethBalances[3]",
		node_irs="REF_194(LedgerChannel.Channel) -> Channels[_lcID]
REF_195(uint256[2]) -> REF_194.initialDeposit
REF_196(uint256) -> REF_195[0]
REF_\
197(LedgerChannel.Channel) -> Channels[_lcID]
REF_198(uint256[4]) -> REF_197.ethBalances
REF_199(uint256) -> REF_198[2]
TMP_174(\
uint256) = REF_196 + REF_199
REF_200(LedgerChannel.Channel) -> Channels[_lcID]
REF_201(uint256[4]) -> REF_200.ethBalances
REF_202(\
uint256) -> REF_201[3]
TMP_175(uint256) = TMP_174 + REF_202
totalEthDeposit(uint256) := TMP_175(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1035 -> 1036	[key=0,
		edge_type=next,
		label=Next];
	1037	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
totalTokenDeposit = Channels[_lcID].initialDeposit[1] + Channels[_lcID].erc20Balances[2] + \
Channels[_lcID].erc20Balances[3]

IRs:
REF_203(LedgerChannel.Channel) -> Channels[_lcID]
REF_204(uint256[2]) -> REF_203.initialDeposit
\
REF_205(uint256) -> REF_204[1]
REF_206(LedgerChannel.Channel) -> Channels[_lcID]
REF_207(uint256[4]) -> REF_206.erc20Balances
REF_\
208(uint256) -> REF_207[2]
TMP_176(uint256) = REF_205 + REF_208
REF_209(LedgerChannel.Channel) -> Channels[_lcID]
REF_210(uint256[\
4]) -> REF_209.erc20Balances
REF_211(uint256) -> REF_210[3]
TMP_177(uint256) = TMP_176 + REF_211
totalTokenDeposit(uint256) := TMP_\
177(uint256)",
		node_expression="totalTokenDeposit = Channels[_lcID].initialDeposit[1] + Channels[_lcID].erc20Balances[2] + Channels[_lcID].erc20Balances[3]",
		node_irs="REF_203(LedgerChannel.Channel) -> Channels[_lcID]
REF_204(uint256[2]) -> REF_203.initialDeposit
REF_205(uint256) -> REF_204[1]
REF_\
206(LedgerChannel.Channel) -> Channels[_lcID]
REF_207(uint256[4]) -> REF_206.erc20Balances
REF_208(uint256) -> REF_207[2]
TMP_176(\
uint256) = REF_205 + REF_208
REF_209(LedgerChannel.Channel) -> Channels[_lcID]
REF_210(uint256[4]) -> REF_209.erc20Balances
REF_\
211(uint256) -> REF_210[3]
TMP_177(uint256) = TMP_176 + REF_211
totalTokenDeposit(uint256) := TMP_177(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1036 -> 1037	[key=0,
		edge_type=next,
		label=Next];
	1038	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(totalEthDeposit == _balances[0] + _balances[1])

IRs:
REF_212(uint256) -> _balances[\
0]
REF_213(uint256) -> _balances[1]
TMP_178(uint256) = REF_212 + REF_213
TMP_179(bool) = totalEthDeposit == TMP_178
TMP_180(None) = \
SOLIDITY_CALL require(bool)(TMP_179)",
		node_expression="require(bool)(totalEthDeposit == _balances[0] + _balances[1])",
		node_irs="REF_212(uint256) -> _balances[0]
REF_213(uint256) -> _balances[1]
TMP_178(uint256) = REF_212 + REF_213
TMP_179(bool) = totalEthDeposit == \
TMP_178
TMP_180(None) = SOLIDITY_CALL require(bool)(TMP_179)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1037 -> 1038	[key=0,
		edge_type=next,
		label=Next];
	1039	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(totalTokenDeposit == _balances[2] + _balances[3])

IRs:
REF_214(uint256) -> _balances[\
2]
REF_215(uint256) -> _balances[3]
TMP_181(uint256) = REF_214 + REF_215
TMP_182(bool) = totalTokenDeposit == TMP_181
TMP_183(None) = \
SOLIDITY_CALL require(bool)(TMP_182)",
		node_expression="require(bool)(totalTokenDeposit == _balances[2] + _balances[3])",
		node_irs="REF_214(uint256) -> _balances[2]
REF_215(uint256) -> _balances[3]
TMP_181(uint256) = REF_214 + REF_215
TMP_182(bool) = totalTokenDeposit == \
TMP_181
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1038 -> 1039	[key=0,
		edge_type=next,
		label=Next];
	1040	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
_state = keccak256()(abi.encodePacked(_lcID,true,_sequence,uint256(0),bytes32(0x0),Channels[_\
lcID].partyAddresses[0],Channels[_lcID].partyAddresses[1],_balances[0],_balances[1],_balances[2],_balances[3]))

IRs:
TMP_184 = \
CONVERT 0 to uint256
TMP_185 = CONVERT 0 to bytes32
REF_217(LedgerChannel.Channel) -> Channels[_lcID]
REF_218(address[2]) -> REF_\
217.partyAddresses
REF_219(address) -> REF_218[0]
REF_220(LedgerChannel.Channel) -> Channels[_lcID]
REF_221(address[2]) -> REF_220.partyAddresses
\
REF_222(address) -> REF_221[1]
REF_223(uint256) -> _balances[0]
REF_224(uint256) -> _balances[1]
REF_225(uint256) -> _balances[2]
\
REF_226(uint256) -> _balances[3]
TMP_186(bytes) = SOLIDITY_CALL abi.encodePacked()(_lcID,True,_sequence,TMP_184,TMP_185,REF_219,\
REF_222,REF_223,REF_224,REF_225,REF_226)
TMP_187(bytes32) = SOLIDITY_CALL keccak256()(TMP_186)
_state(bytes32) := TMP_187(bytes32)",
		node_expression="_state = keccak256()(abi.encodePacked(_lcID,true,_sequence,uint256(0),bytes32(0x0),Channels[_lcID].partyAddresses[0],Channels[_lcID]\
.partyAddresses[1],_balances[0],_balances[1],_balances[2],_balances[3]))",
		node_irs="TMP_184 = CONVERT 0 to uint256
TMP_185 = CONVERT 0 to bytes32
REF_217(LedgerChannel.Channel) -> Channels[_lcID]
REF_218(address[\
2]) -> REF_217.partyAddresses
REF_219(address) -> REF_218[0]
REF_220(LedgerChannel.Channel) -> Channels[_lcID]
REF_221(address[2]) \
-> REF_220.partyAddresses
REF_222(address) -> REF_221[1]
REF_223(uint256) -> _balances[0]
REF_224(uint256) -> _balances[1]
REF_225(\
uint256) -> _balances[2]
REF_226(uint256) -> _balances[3]
TMP_186(bytes) = SOLIDITY_CALL abi.encodePacked()(_lcID,True,_sequence,\
TMP_184,TMP_185,REF_219,REF_222,REF_223,REF_224,REF_225,REF_226)
TMP_187(bytes32) = SOLIDITY_CALL keccak256()(TMP_186)
_state(bytes32) := \
TMP_187(bytes32)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1039 -> 1040	[key=0,
		edge_type=next,
		label=Next];
	1041	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state,_sigA))

IRs:
\
REF_227(LedgerChannel.Channel) -> Channels[_lcID]
REF_228(address[2]) -> REF_227.partyAddresses
REF_229(address) -> REF_228[0]
TMP_\
188(address) = LIBRARY_CALL, dest:ECTools, function:ECTools.recoverSigner(bytes32,string), arguments:['_state', '_sigA'] 
TMP_189(\
bool) = REF_229 == TMP_188
TMP_190(None) = SOLIDITY_CALL require(bool)(TMP_189)",
		node_expression="require(bool)(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state,_sigA))",
		node_irs="REF_227(LedgerChannel.Channel) -> Channels[_lcID]
REF_228(address[2]) -> REF_227.partyAddresses
REF_229(address) -> REF_228[0]
TMP_\
188(address) = LIBRARY_CALL, dest:ECTools, function:ECTools.recoverSigner(bytes32,string), arguments:['_state', '_sigA'] 
TMP_189(\
bool) = REF_229 == TMP_188
TMP_190(None) = SOLIDITY_CALL require(bool)(TMP_189)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1040 -> 1041	[key=0,
		edge_type=next,
		label=Next];
	1042	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state,_sigI))

IRs:
\
REF_231(LedgerChannel.Channel) -> Channels[_lcID]
REF_232(address[2]) -> REF_231.partyAddresses
REF_233(address) -> REF_232[1]
TMP_\
191(address) = LIBRARY_CALL, dest:ECTools, function:ECTools.recoverSigner(bytes32,string), arguments:['_state', '_sigI'] 
TMP_192(\
bool) = REF_233 == TMP_191
TMP_193(None) = SOLIDITY_CALL require(bool)(TMP_192)",
		node_expression="require(bool)(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state,_sigI))",
		node_irs="REF_231(LedgerChannel.Channel) -> Channels[_lcID]
REF_232(address[2]) -> REF_231.partyAddresses
REF_233(address) -> REF_232[1]
TMP_\
191(address) = LIBRARY_CALL, dest:ECTools, function:ECTools.recoverSigner(bytes32,string), arguments:['_state', '_sigI'] 
TMP_192(\
bool) = REF_233 == TMP_191
TMP_193(None) = SOLIDITY_CALL require(bool)(TMP_192)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1041 -> 1042	[key=0,
		edge_type=next,
		label=Next];
	1043	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].isOpen = false

IRs:
REF_235(LedgerChannel.Channel) -> Channels[_lcID]
REF_236(\
bool) -> REF_235.isOpen
REF_236 (->Channels) := False(bool)",
		node_expression="Channels[_lcID].isOpen = false",
		node_irs="REF_235(LedgerChannel.Channel) -> Channels[_lcID]
REF_236(bool) -> REF_235.isOpen
REF_236 (->Channels) := False(bool)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1042 -> 1043	[key=0,
		edge_type=next,
		label=Next];
	1044	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: IF

EXPRESSION:
_balances[0] != 0 || _balances[1] != 0

IRs:
REF_237(uint256) -> _balances[0]
TMP_194(bool) = REF_237 != \
0
REF_238(uint256) -> _balances[1]
TMP_195(bool) = REF_238 != 0
TMP_196(bool) = TMP_194 || TMP_195
CONDITION TMP_196",
		node_expression="_balances[0] != 0 || _balances[1] != 0",
		node_irs="REF_237(uint256) -> _balances[0]
TMP_194(bool) = REF_237 != 0
REF_238(uint256) -> _balances[1]
TMP_195(bool) = REF_238 != 0
TMP_\
196(bool) = TMP_194 || TMP_195
CONDITION TMP_196",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1043 -> 1044	[key=0,
		edge_type=next,
		label=Next];
	1045	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].partyAddresses[0].transfer(_balances[0])

IRs:
REF_239(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_240(address[2]) -> REF_239.partyAddresses
REF_241(address) -> REF_240[0]
REF_243(uint256) -> _balances[0]
\
Transfer dest:REF_241 value:REF_243",
		node_expression="Channels[_lcID].partyAddresses[0].transfer(_balances[0])",
		node_irs="REF_239(LedgerChannel.Channel) -> Channels[_lcID]
REF_240(address[2]) -> REF_239.partyAddresses
REF_241(address) -> REF_240[0]
REF_\
243(uint256) -> _balances[0]
Transfer dest:REF_241 value:REF_243",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1044 -> 1045	[key=0,
		edge_type=if_true,
		label=True];
	1047	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1044 -> 1047	[key=0,
		edge_type=if_false,
		label=False];
	1046	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].partyAddresses[1].transfer(_balances[1])

IRs:
REF_244(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_245(address[2]) -> REF_244.partyAddresses
REF_246(address) -> REF_245[1]
REF_248(uint256) -> _balances[1]
\
Transfer dest:REF_246 value:REF_248",
		node_expression="Channels[_lcID].partyAddresses[1].transfer(_balances[1])",
		node_irs="REF_244(LedgerChannel.Channel) -> Channels[_lcID]
REF_245(address[2]) -> REF_244.partyAddresses
REF_246(address) -> REF_245[1]
REF_\
248(uint256) -> _balances[1]
Transfer dest:REF_246 value:REF_248",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1045 -> 1046	[key=0,
		edge_type=next,
		label=Next];
	1046 -> 1047	[key=0,
		edge_type=next,
		label=Next];
	1048	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: IF

EXPRESSION:
_balances[2] != 0 || _balances[3] != 0

IRs:
REF_249(uint256) -> _balances[2]
TMP_199(bool) = REF_249 != \
0
REF_250(uint256) -> _balances[3]
TMP_200(bool) = REF_250 != 0
TMP_201(bool) = TMP_199 || TMP_200
CONDITION TMP_201",
		node_expression="_balances[2] != 0 || _balances[3] != 0",
		node_irs="REF_249(uint256) -> _balances[2]
TMP_199(bool) = REF_249 != 0
REF_250(uint256) -> _balances[3]
TMP_200(bool) = REF_250 != 0
TMP_\
201(bool) = TMP_199 || TMP_200
CONDITION TMP_201",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1047 -> 1048	[key=0,
		edge_type=next,
		label=Next];
	1049	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],_balances[\
2]),happyCloseChannel: token transfer failure)

IRs:
REF_251(LedgerChannel.Channel) -> Channels[_lcID]
REF_252(HumanStandardToken) \
-> REF_251.token
REF_254(LedgerChannel.Channel) -> Channels[_lcID]
REF_255(address[2]) -> REF_254.partyAddresses
REF_256(address) \
-> REF_255[0]
REF_257(uint256) -> _balances[2]
TMP_202(bool) = HIGH_LEVEL_CALL, dest:REF_252(HumanStandardToken), function:transfer, \
arguments:['REF_256', 'REF_257']  
TMP_203(None) = SOLIDITY_CALL require(bool,string)(TMP_202,happyCloseChannel: token transfer \
failure)",
		node_expression="require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],_balances[2]),happyCloseChannel: token transfer \
failure)",
		node_irs="REF_251(LedgerChannel.Channel) -> Channels[_lcID]
REF_252(HumanStandardToken) -> REF_251.token
REF_254(LedgerChannel.Channel) -> \
Channels[_lcID]
REF_255(address[2]) -> REF_254.partyAddresses
REF_256(address) -> REF_255[0]
REF_257(uint256) -> _balances[2]
TMP_\
202(bool) = HIGH_LEVEL_CALL, dest:REF_252(HumanStandardToken), function:transfer, arguments:['REF_256', 'REF_257']  
TMP_203(None) = \
SOLIDITY_CALL require(bool,string)(TMP_202,happyCloseChannel: token transfer failure)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1048 -> 1049	[key=0,
		edge_type=if_true,
		label=True];
	1051	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1048 -> 1051	[key=0,
		edge_type=if_false,
		label=False];
	1050	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[1],_balances[\
3]),happyCloseChannel: token transfer failure)

IRs:
REF_258(LedgerChannel.Channel) -> Channels[_lcID]
REF_259(HumanStandardToken) \
-> REF_258.token
REF_261(LedgerChannel.Channel) -> Channels[_lcID]
REF_262(address[2]) -> REF_261.partyAddresses
REF_263(address) \
-> REF_262[1]
REF_264(uint256) -> _balances[3]
TMP_204(bool) = HIGH_LEVEL_CALL, dest:REF_259(HumanStandardToken), function:transfer, \
arguments:['REF_263', 'REF_264']  
TMP_205(None) = SOLIDITY_CALL require(bool,string)(TMP_204,happyCloseChannel: token transfer \
failure)",
		node_expression="require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[1],_balances[3]),happyCloseChannel: token transfer \
failure)",
		node_irs="REF_258(LedgerChannel.Channel) -> Channels[_lcID]
REF_259(HumanStandardToken) -> REF_258.token
REF_261(LedgerChannel.Channel) -> \
Channels[_lcID]
REF_262(address[2]) -> REF_261.partyAddresses
REF_263(address) -> REF_262[1]
REF_264(uint256) -> _balances[3]
TMP_\
204(bool) = HIGH_LEVEL_CALL, dest:REF_259(HumanStandardToken), function:transfer, arguments:['REF_263', 'REF_264']  
TMP_205(None) = \
SOLIDITY_CALL require(bool,string)(TMP_204,happyCloseChannel: token transfer failure)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1049 -> 1050	[key=0,
		edge_type=next,
		label=Next];
	1050 -> 1051	[key=0,
		edge_type=next,
		label=Next];
	1052	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
numChannels --

IRs:
TMP_206(uint256) := numChannels(uint256)
numChannels(uint256) = numChannels \
- 1",
		node_expression="numChannels --",
		node_irs="TMP_206(uint256) := numChannels(uint256)
numChannels(uint256) = numChannels - 1",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1051 -> 1052	[key=0,
		edge_type=next,
		label=Next];
	1053	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
DidLCClose(_lcID,_sequence,_balances[0],_balances[1],_balances[2],_balances[3])

IRs:
REF_265(\
uint256) -> _balances[0]
REF_266(uint256) -> _balances[1]
REF_267(uint256) -> _balances[2]
REF_268(uint256) -> _balances[3]
Emit \
DidLCClose(_lcID._sequence.REF_265.REF_266.REF_267.REF_268)",
		node_expression="DidLCClose(_lcID,_sequence,_balances[0],_balances[1],_balances[2],_balances[3])",
		node_irs="REF_265(uint256) -> _balances[0]
REF_266(uint256) -> _balances[1]
REF_267(uint256) -> _balances[2]
REF_268(uint256) -> _balances[\
3]
Emit DidLCClose(_lcID._sequence.REF_265.REF_266.REF_267.REF_268)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1052 -> 1053	[key=0,
		edge_type=next,
		label=Next];
	1054	[contract_name=LedgerChannel,
		function_fullname="consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		label="spank_chain_payment.sol_LedgerChannel_consensusCloseChannel(bytes32,uint256,uint256[4],string,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1054 -> 1034	[key=0,
		edge_type=next,
		label=Next];
	1055	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	1056	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
channel = Channels[_lcID]

IRs:
REF_269(LedgerChannel.Channel) -> Channels[_lcID]
channel(LedgerChannel.Channel) := \
REF_269(LedgerChannel.Channel)",
		node_expression="channel = Channels[_lcID]",
		node_irs="REF_269(LedgerChannel.Channel) -> Channels[_lcID]
channel(LedgerChannel.Channel) := REF_269(LedgerChannel.Channel)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1055 -> 1056	[key=0,
		edge_type=next,
		label=Next];
	1057	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(channel.isOpen)

IRs:
REF_270(bool) -> channel.isOpen
TMP_208(None) = SOLIDITY_\
CALL require(bool)(REF_270)",
		node_expression="require(bool)(channel.isOpen)",
		node_irs="REF_270(bool) -> channel.isOpen
TMP_208(None) = SOLIDITY_CALL require(bool)(REF_270)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1056 -> 1057	[key=0,
		edge_type=next,
		label=Next];
	1058	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(channel.sequence < updateParams[0])

IRs:
REF_271(uint256) -> channel.sequence
\
REF_272(uint256) -> updateParams[0]
TMP_209(bool) = REF_271 < REF_272
TMP_210(None) = SOLIDITY_CALL require(bool)(TMP_209)",
		node_expression="require(bool)(channel.sequence < updateParams[0])",
		node_irs="REF_271(uint256) -> channel.sequence
REF_272(uint256) -> updateParams[0]
TMP_209(bool) = REF_271 < REF_272
TMP_210(None) = SOLIDITY_\
CALL require(bool)(TMP_209)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1057 -> 1058	[key=0,
		edge_type=next,
		label=Next];
	1059	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(channel.ethBalances[0] + channel.ethBalances[1] >= updateParams[2] + updateParams[\
3])

IRs:
REF_273(uint256[4]) -> channel.ethBalances
REF_274(uint256) -> REF_273[0]
REF_275(uint256[4]) -> channel.ethBalances
REF_\
276(uint256) -> REF_275[1]
TMP_211(uint256) = REF_274 + REF_276
REF_277(uint256) -> updateParams[2]
REF_278(uint256) -> updateParams[\
3]
TMP_212(uint256) = REF_277 + REF_278
TMP_213(bool) = TMP_211 >= TMP_212
TMP_214(None) = SOLIDITY_CALL require(bool)(TMP_213)",
		node_expression="require(bool)(channel.ethBalances[0] + channel.ethBalances[1] >= updateParams[2] + updateParams[3])",
		node_irs="REF_273(uint256[4]) -> channel.ethBalances
REF_274(uint256) -> REF_273[0]
REF_275(uint256[4]) -> channel.ethBalances
REF_276(uint256) \
-> REF_275[1]
TMP_211(uint256) = REF_274 + REF_276
REF_277(uint256) -> updateParams[2]
REF_278(uint256) -> updateParams[3]
TMP_212(\
uint256) = REF_277 + REF_278
TMP_213(bool) = TMP_211 >= TMP_212
TMP_214(None) = SOLIDITY_CALL require(bool)(TMP_213)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1058 -> 1059	[key=0,
		edge_type=next,
		label=Next];
	1060	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(channel.erc20Balances[0] + channel.erc20Balances[1] >= updateParams[4] + updateParams[\
5])

IRs:
REF_279(uint256[4]) -> channel.erc20Balances
REF_280(uint256) -> REF_279[0]
REF_281(uint256[4]) -> channel.erc20Balances
\
REF_282(uint256) -> REF_281[1]
TMP_215(uint256) = REF_280 + REF_282
REF_283(uint256) -> updateParams[4]
REF_284(uint256) -> updateParams[\
5]
TMP_216(uint256) = REF_283 + REF_284
TMP_217(bool) = TMP_215 >= TMP_216
TMP_218(None) = SOLIDITY_CALL require(bool)(TMP_217)",
		node_expression="require(bool)(channel.erc20Balances[0] + channel.erc20Balances[1] >= updateParams[4] + updateParams[5])",
		node_irs="REF_279(uint256[4]) -> channel.erc20Balances
REF_280(uint256) -> REF_279[0]
REF_281(uint256[4]) -> channel.erc20Balances
REF_282(\
uint256) -> REF_281[1]
TMP_215(uint256) = REF_280 + REF_282
REF_283(uint256) -> updateParams[4]
REF_284(uint256) -> updateParams[\
5]
TMP_216(uint256) = REF_283 + REF_284
TMP_217(bool) = TMP_215 >= TMP_216
TMP_218(None) = SOLIDITY_CALL require(bool)(TMP_217)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1059 -> 1060	[key=0,
		edge_type=next,
		label=Next];
	1061	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: IF

EXPRESSION:
channel.isUpdateLCSettling == true

IRs:
REF_285(bool) -> channel.isUpdateLCSettling
TMP_219(bool) = \
REF_285 == True
CONDITION TMP_219",
		node_expression="channel.isUpdateLCSettling == true",
		node_irs="REF_285(bool) -> channel.isUpdateLCSettling
TMP_219(bool) = REF_285 == True
CONDITION TMP_219",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1060 -> 1061	[key=0,
		edge_type=next,
		label=Next];
	1062	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(channel.updateLCtimeout > now)

IRs:
REF_286(uint256) -> channel.updateLCtimeout
\
TMP_220(bool) = REF_286 > now
TMP_221(None) = SOLIDITY_CALL require(bool)(TMP_220)",
		node_expression="require(bool)(channel.updateLCtimeout > now)",
		node_irs="REF_286(uint256) -> channel.updateLCtimeout
TMP_220(bool) = REF_286 > now
TMP_221(None) = SOLIDITY_CALL require(bool)(TMP_220)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1061 -> 1062	[key=0,
		edge_type=if_true,
		label=True];
	1063	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1061 -> 1063	[key=0,
		edge_type=if_false,
		label=False];
	1062 -> 1063	[key=0,
		edge_type=next,
		label=Next];
	1064	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
_state = keccak256()(abi.encodePacked(_lcID,false,updateParams[0],updateParams[1],_VCroot,channel.partyAddresses[\
0],channel.partyAddresses[1],updateParams[2],updateParams[3],updateParams[4],updateParams[5]))

IRs:
REF_288(uint256) -> updateParams[\
0]
REF_289(uint256) -> updateParams[1]
REF_290(address[2]) -> channel.partyAddresses
REF_291(address) -> REF_290[0]
REF_292(address[\
2]) -> channel.partyAddresses
REF_293(address) -> REF_292[1]
REF_294(uint256) -> updateParams[2]
REF_295(uint256) -> updateParams[\
3]
REF_296(uint256) -> updateParams[4]
REF_297(uint256) -> updateParams[5]
TMP_222(bytes) = SOLIDITY_CALL abi.encodePacked()(_lcID,\
False,REF_288,REF_289,_VCroot,REF_291,REF_293,REF_294,REF_295,REF_296,REF_297)
TMP_223(bytes32) = SOLIDITY_CALL keccak256()(TMP_\
222)
_state(bytes32) := TMP_223(bytes32)",
		node_expression="_state = keccak256()(abi.encodePacked(_lcID,false,updateParams[0],updateParams[1],_VCroot,channel.partyAddresses[0],channel.partyAddresses[\
1],updateParams[2],updateParams[3],updateParams[4],updateParams[5]))",
		node_irs="REF_288(uint256) -> updateParams[0]
REF_289(uint256) -> updateParams[1]
REF_290(address[2]) -> channel.partyAddresses
REF_291(address) \
-> REF_290[0]
REF_292(address[2]) -> channel.partyAddresses
REF_293(address) -> REF_292[1]
REF_294(uint256) -> updateParams[2]
REF_\
295(uint256) -> updateParams[3]
REF_296(uint256) -> updateParams[4]
REF_297(uint256) -> updateParams[5]
TMP_222(bytes) = SOLIDITY_\
CALL abi.encodePacked()(_lcID,False,REF_288,REF_289,_VCroot,REF_291,REF_293,REF_294,REF_295,REF_296,REF_297)
TMP_223(bytes32) = \
SOLIDITY_CALL keccak256()(TMP_222)
_state(bytes32) := TMP_223(bytes32)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1063 -> 1064	[key=0,
		edge_type=next,
		label=Next];
	1065	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(channel.partyAddresses[0] == ECTools.recoverSigner(_state,_sigA))

IRs:
REF_298(\
address[2]) -> channel.partyAddresses
REF_299(address) -> REF_298[0]
TMP_224(address) = LIBRARY_CALL, dest:ECTools, function:ECTools.recoverSigner(\
bytes32,string), arguments:['_state', '_sigA'] 
TMP_225(bool) = REF_299 == TMP_224
TMP_226(None) = SOLIDITY_CALL require(bool)(TMP_\
225)",
		node_expression="require(bool)(channel.partyAddresses[0] == ECTools.recoverSigner(_state,_sigA))",
		node_irs="REF_298(address[2]) -> channel.partyAddresses
REF_299(address) -> REF_298[0]
TMP_224(address) = LIBRARY_CALL, dest:ECTools, function:\
ECTools.recoverSigner(bytes32,string), arguments:['_state', '_sigA'] 
TMP_225(bool) = REF_299 == TMP_224
TMP_226(None) = SOLIDITY_\
CALL require(bool)(TMP_225)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1064 -> 1065	[key=0,
		edge_type=next,
		label=Next];
	1066	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(channel.partyAddresses[1] == ECTools.recoverSigner(_state,_sigI))

IRs:
REF_301(\
address[2]) -> channel.partyAddresses
REF_302(address) -> REF_301[1]
TMP_227(address) = LIBRARY_CALL, dest:ECTools, function:ECTools.recoverSigner(\
bytes32,string), arguments:['_state', '_sigI'] 
TMP_228(bool) = REF_302 == TMP_227
TMP_229(None) = SOLIDITY_CALL require(bool)(TMP_\
228)",
		node_expression="require(bool)(channel.partyAddresses[1] == ECTools.recoverSigner(_state,_sigI))",
		node_irs="REF_301(address[2]) -> channel.partyAddresses
REF_302(address) -> REF_301[1]
TMP_227(address) = LIBRARY_CALL, dest:ECTools, function:\
ECTools.recoverSigner(bytes32,string), arguments:['_state', '_sigI'] 
TMP_228(bool) = REF_302 == TMP_227
TMP_229(None) = SOLIDITY_\
CALL require(bool)(TMP_228)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1065 -> 1066	[key=0,
		edge_type=next,
		label=Next];
	1067	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.sequence = updateParams[0]

IRs:
REF_304(uint256) -> channel.sequence
REF_305(uint256) \
-> updateParams[0]
REF_304 (->channel) := REF_305(uint256)",
		node_expression="channel.sequence = updateParams[0]",
		node_irs="REF_304(uint256) -> channel.sequence
REF_305(uint256) -> updateParams[0]
REF_304 (->channel) := REF_305(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1066 -> 1067	[key=0,
		edge_type=next,
		label=Next];
	1068	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.numOpenVC = updateParams[1]

IRs:
REF_306(uint256) -> channel.numOpenVC
REF_307(uint256) \
-> updateParams[1]
REF_306 (->channel) := REF_307(uint256)",
		node_expression="channel.numOpenVC = updateParams[1]",
		node_irs="REF_306(uint256) -> channel.numOpenVC
REF_307(uint256) -> updateParams[1]
REF_306 (->channel) := REF_307(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1067 -> 1068	[key=0,
		edge_type=next,
		label=Next];
	1069	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.ethBalances[0] = updateParams[2]

IRs:
REF_308(uint256[4]) -> channel.ethBalances
REF_\
309(uint256) -> REF_308[0]
REF_310(uint256) -> updateParams[2]
REF_309 (->channel) := REF_310(uint256)",
		node_expression="channel.ethBalances[0] = updateParams[2]",
		node_irs="REF_308(uint256[4]) -> channel.ethBalances
REF_309(uint256) -> REF_308[0]
REF_310(uint256) -> updateParams[2]
REF_309 (->channel) := \
REF_310(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1068 -> 1069	[key=0,
		edge_type=next,
		label=Next];
	1070	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.ethBalances[1] = updateParams[3]

IRs:
REF_311(uint256[4]) -> channel.ethBalances
REF_\
312(uint256) -> REF_311[1]
REF_313(uint256) -> updateParams[3]
REF_312 (->channel) := REF_313(uint256)",
		node_expression="channel.ethBalances[1] = updateParams[3]",
		node_irs="REF_311(uint256[4]) -> channel.ethBalances
REF_312(uint256) -> REF_311[1]
REF_313(uint256) -> updateParams[3]
REF_312 (->channel) := \
REF_313(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1069 -> 1070	[key=0,
		edge_type=next,
		label=Next];
	1071	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.erc20Balances[0] = updateParams[4]

IRs:
REF_314(uint256[4]) -> channel.erc20Balances
\
REF_315(uint256) -> REF_314[0]
REF_316(uint256) -> updateParams[4]
REF_315 (->channel) := REF_316(uint256)",
		node_expression="channel.erc20Balances[0] = updateParams[4]",
		node_irs="REF_314(uint256[4]) -> channel.erc20Balances
REF_315(uint256) -> REF_314[0]
REF_316(uint256) -> updateParams[4]
REF_315 (->channel) := \
REF_316(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1070 -> 1071	[key=0,
		edge_type=next,
		label=Next];
	1072	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.erc20Balances[1] = updateParams[5]

IRs:
REF_317(uint256[4]) -> channel.erc20Balances
\
REF_318(uint256) -> REF_317[1]
REF_319(uint256) -> updateParams[5]
REF_318 (->channel) := REF_319(uint256)",
		node_expression="channel.erc20Balances[1] = updateParams[5]",
		node_irs="REF_317(uint256[4]) -> channel.erc20Balances
REF_318(uint256) -> REF_317[1]
REF_319(uint256) -> updateParams[5]
REF_318 (->channel) := \
REF_319(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1071 -> 1072	[key=0,
		edge_type=next,
		label=Next];
	1073	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.VCrootHash = _VCroot

IRs:
REF_320(bytes32) -> channel.VCrootHash
REF_320 (->channel) := _\
VCroot(bytes32)",
		node_expression="channel.VCrootHash = _VCroot",
		node_irs="REF_320(bytes32) -> channel.VCrootHash
REF_320 (->channel) := _VCroot(bytes32)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1072 -> 1073	[key=0,
		edge_type=next,
		label=Next];
	1074	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.isUpdateLCSettling = true

IRs:
REF_321(bool) -> channel.isUpdateLCSettling
REF_321 (\
->channel) := True(bool)",
		node_expression="channel.isUpdateLCSettling = true",
		node_irs="REF_321(bool) -> channel.isUpdateLCSettling
REF_321 (->channel) := True(bool)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1073 -> 1074	[key=0,
		edge_type=next,
		label=Next];
	1075	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.updateLCtimeout = now + channel.confirmTime

IRs:
REF_322(uint256) -> channel.updateLCtimeout
\
REF_323(uint256) -> channel.confirmTime
TMP_230(uint256) = now + REF_323
REF_322 (->channel) := TMP_230(uint256)",
		node_expression="channel.updateLCtimeout = now + channel.confirmTime",
		node_irs="REF_322(uint256) -> channel.updateLCtimeout
REF_323(uint256) -> channel.confirmTime
TMP_230(uint256) = now + REF_323
REF_322 (->\
channel) := TMP_230(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1074 -> 1075	[key=0,
		edge_type=next,
		label=Next];
	1076	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
DidLCUpdateState(_lcID,updateParams[0],updateParams[1],updateParams[2],updateParams[3],updateParams[\
4],updateParams[5],_VCroot,channel.updateLCtimeout)

IRs:
REF_324(uint256) -> updateParams[0]
REF_325(uint256) -> updateParams[1]
\
REF_326(uint256) -> updateParams[2]
REF_327(uint256) -> updateParams[3]
REF_328(uint256) -> updateParams[4]
REF_329(uint256) -> \
updateParams[5]
REF_330(uint256) -> channel.updateLCtimeout
Emit DidLCUpdateState(_lcID.REF_324.REF_325.REF_326.REF_327.REF_328.REF_\
329._VCroot.REF_330)",
		node_expression="DidLCUpdateState(_lcID,updateParams[0],updateParams[1],updateParams[2],updateParams[3],updateParams[4],updateParams[5],_VCroot,channel.updateLCtimeout)",
		node_irs="REF_324(uint256) -> updateParams[0]
REF_325(uint256) -> updateParams[1]
REF_326(uint256) -> updateParams[2]
REF_327(uint256) -> \
updateParams[3]
REF_328(uint256) -> updateParams[4]
REF_329(uint256) -> updateParams[5]
REF_330(uint256) -> channel.updateLCtimeout
\
Emit DidLCUpdateState(_lcID.REF_324.REF_325.REF_326.REF_327.REF_328.REF_329._VCroot.REF_330)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1075 -> 1076	[key=0,
		edge_type=next,
		label=Next];
	1077	[contract_name=LedgerChannel,
		function_fullname="updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		label="spank_chain_payment.sol_LedgerChannel_updateLCstate(bytes32,uint256[6],bytes32,string,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1077 -> 1055	[key=0,
		edge_type=next,
		label=Next];
	1078	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	1079	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].isOpen,LC is closed.)

IRs:
REF_331(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_332(bool) -> REF_331.isOpen
TMP_232(None) = SOLIDITY_CALL require(bool,string)(REF_332,LC is closed.)",
		node_expression="require(bool,string)(Channels[_lcID].isOpen,LC is closed.)",
		node_irs="REF_331(LedgerChannel.Channel) -> Channels[_lcID]
REF_332(bool) -> REF_331.isOpen
TMP_232(None) = SOLIDITY_CALL require(bool,string)(\
REF_332,LC is closed.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1078 -> 1079	[key=0,
		edge_type=next,
		label=Next];
	1080	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(! virtualChannels[_vcID].isClose,VC is closed.)

IRs:
REF_333(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_334(bool) -> REF_333.isClose
TMP_233 = ! REF_334 
TMP_234(None) = SOLIDITY_CALL require(bool,string)(\
TMP_233,VC is closed.)",
		node_expression="require(bool,string)(! virtualChannels[_vcID].isClose,VC is closed.)",
		node_irs="REF_333(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_334(bool) -> REF_333.isClose
TMP_233 = ! REF_334 
TMP_234(None) = \
SOLIDITY_CALL require(bool,string)(TMP_233,VC is closed.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1079 -> 1080	[key=0,
		edge_type=next,
		label=Next];
	1081	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].updateLCtimeout < now,LC timeout not over.)

IRs:
REF_335(\
LedgerChannel.Channel) -> Channels[_lcID]
REF_336(uint256) -> REF_335.updateLCtimeout
TMP_235(bool) = REF_336 < now
TMP_236(None) = \
SOLIDITY_CALL require(bool,string)(TMP_235,LC timeout not over.)",
		node_expression="require(bool,string)(Channels[_lcID].updateLCtimeout < now,LC timeout not over.)",
		node_irs="REF_335(LedgerChannel.Channel) -> Channels[_lcID]
REF_336(uint256) -> REF_335.updateLCtimeout
TMP_235(bool) = REF_336 < now
TMP_\
236(None) = SOLIDITY_CALL require(bool,string)(TMP_235,LC timeout not over.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1080 -> 1081	[key=0,
		edge_type=next,
		label=Next];
	1082	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(virtualChannels[_vcID].updateVCtimeout == 0)

IRs:
REF_337(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_338(uint256) -> REF_337.updateVCtimeout
TMP_237(bool) = REF_338 == 0
TMP_238(None) = SOLIDITY_CALL \
require(bool)(TMP_237)",
		node_expression="require(bool)(virtualChannels[_vcID].updateVCtimeout == 0)",
		node_irs="REF_337(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_338(uint256) -> REF_337.updateVCtimeout
TMP_237(bool) = REF_\
338 == 0
TMP_238(None) = SOLIDITY_CALL require(bool)(TMP_237)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1081 -> 1082	[key=0,
		edge_type=next,
		label=Next];
	1083	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
_initState = keccak256()(abi.encodePacked(_vcID,uint256(0),_partyA,_partyB,_bond[0],_bond[1],_\
balances[0],_balances[1],_balances[2],_balances[3]))

IRs:
TMP_239 = CONVERT 0 to uint256
REF_340(uint256) -> _bond[0]
REF_341(uint256) \
-> _bond[1]
REF_342(uint256) -> _balances[0]
REF_343(uint256) -> _balances[1]
REF_344(uint256) -> _balances[2]
REF_345(uint256) \
-> _balances[3]
TMP_240(bytes) = SOLIDITY_CALL abi.encodePacked()(_vcID,TMP_239,_partyA,_partyB,REF_340,REF_341,REF_342,REF_343,\
REF_344,REF_345)
TMP_241(bytes32) = SOLIDITY_CALL keccak256()(TMP_240)
_initState(bytes32) := TMP_241(bytes32)",
		node_expression="_initState = keccak256()(abi.encodePacked(_vcID,uint256(0),_partyA,_partyB,_bond[0],_bond[1],_balances[0],_balances[1],_balances[\
2],_balances[3]))",
		node_irs="TMP_239 = CONVERT 0 to uint256
REF_340(uint256) -> _bond[0]
REF_341(uint256) -> _bond[1]
REF_342(uint256) -> _balances[0]
REF_343(\
uint256) -> _balances[1]
REF_344(uint256) -> _balances[2]
REF_345(uint256) -> _balances[3]
TMP_240(bytes) = SOLIDITY_CALL abi.encodePacked()(_\
vcID,TMP_239,_partyA,_partyB,REF_340,REF_341,REF_342,REF_343,REF_344,REF_345)
TMP_241(bytes32) = SOLIDITY_CALL keccak256()(TMP_240)
_\
initState(bytes32) := TMP_241(bytes32)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1082 -> 1083	[key=0,
		edge_type=next,
		label=Next];
	1084	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(_partyA == ECTools.recoverSigner(_initState,sigA))

IRs:
TMP_242(address) = LIBRARY_\
CALL, dest:ECTools, function:ECTools.recoverSigner(bytes32,string), arguments:['_initState', 'sigA'] 
TMP_243(bool) = _partyA == \
TMP_242
TMP_244(None) = SOLIDITY_CALL require(bool)(TMP_243)",
		node_expression="require(bool)(_partyA == ECTools.recoverSigner(_initState,sigA))",
		node_irs="TMP_242(address) = LIBRARY_CALL, dest:ECTools, function:ECTools.recoverSigner(bytes32,string), arguments:['_initState', 'sigA'] 
\
TMP_243(bool) = _partyA == TMP_242
TMP_244(None) = SOLIDITY_CALL require(bool)(TMP_243)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1083 -> 1084	[key=0,
		edge_type=next,
		label=Next];
	1085	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(_isContained(_initState,_proof,Channels[_lcID].VCrootHash) == true)

IRs:
REF_347(\
LedgerChannel.Channel) -> Channels[_lcID]
REF_348(bytes32) -> REF_347.VCrootHash
TMP_245(bool) = INTERNAL_CALL, LedgerChannel._isContained(\
bytes32,bytes,bytes32)(_initState,_proof,REF_348)
TMP_246(bool) = TMP_245 == True
TMP_247(None) = SOLIDITY_CALL require(bool)(TMP_\
246)",
		node_expression="require(bool)(_isContained(_initState,_proof,Channels[_lcID].VCrootHash) == true)",
		node_irs="REF_347(LedgerChannel.Channel) -> Channels[_lcID]
REF_348(bytes32) -> REF_347.VCrootHash
TMP_245(bool) = INTERNAL_CALL, LedgerChannel._\
isContained(bytes32,bytes,bytes32)(_initState,_proof,REF_348)
TMP_246(bool) = TMP_245 == True
TMP_247(None) = SOLIDITY_CALL require(\
bool)(TMP_246)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1084 -> 1085	[key=0,
		edge_type=next,
		label=Next];
	1086	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].partyA = _partyA

IRs:
REF_349(LedgerChannel.VirtualChannel) -> virtualChannels[_\
vcID]
REF_350(address) -> REF_349.partyA
REF_350 (->virtualChannels) := _partyA(address)",
		node_expression="virtualChannels[_vcID].partyA = _partyA",
		node_irs="REF_349(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_350(address) -> REF_349.partyA
REF_350 (->virtualChannels) := _\
partyA(address)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1085 -> 1086	[key=0,
		edge_type=next,
		label=Next];
	1087	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].partyB = _partyB

IRs:
REF_351(LedgerChannel.VirtualChannel) -> virtualChannels[_\
vcID]
REF_352(address) -> REF_351.partyB
REF_352 (->virtualChannels) := _partyB(address)",
		node_expression="virtualChannels[_vcID].partyB = _partyB",
		node_irs="REF_351(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_352(address) -> REF_351.partyB
REF_352 (->virtualChannels) := _\
partyB(address)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1086 -> 1087	[key=0,
		edge_type=next,
		label=Next];
	1088	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].sequence = uint256(0)

IRs:
REF_353(LedgerChannel.VirtualChannel) -> virtualChannels[_\
vcID]
REF_354(uint256) -> REF_353.sequence
TMP_248 = CONVERT 0 to uint256
REF_354 (->virtualChannels) := TMP_248(uint256)",
		node_expression="virtualChannels[_vcID].sequence = uint256(0)",
		node_irs="REF_353(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_354(uint256) -> REF_353.sequence
TMP_248 = CONVERT 0 to uint256
\
REF_354 (->virtualChannels) := TMP_248(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1087 -> 1088	[key=0,
		edge_type=next,
		label=Next];
	1089	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].ethBalances[0] = _balances[0]

IRs:
REF_355(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_356(uint256[2]) -> REF_355.ethBalances
REF_357(uint256) -> REF_356[0]
REF_358(uint256) -> _balances[\
0]
REF_357 (->virtualChannels) := REF_358(uint256)",
		node_expression="virtualChannels[_vcID].ethBalances[0] = _balances[0]",
		node_irs="REF_355(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_356(uint256[2]) -> REF_355.ethBalances
REF_357(uint256) -> REF_\
356[0]
REF_358(uint256) -> _balances[0]
REF_357 (->virtualChannels) := REF_358(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1088 -> 1089	[key=0,
		edge_type=next,
		label=Next];
	1090	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].ethBalances[1] = _balances[1]

IRs:
REF_359(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_360(uint256[2]) -> REF_359.ethBalances
REF_361(uint256) -> REF_360[1]
REF_362(uint256) -> _balances[\
1]
REF_361 (->virtualChannels) := REF_362(uint256)",
		node_expression="virtualChannels[_vcID].ethBalances[1] = _balances[1]",
		node_irs="REF_359(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_360(uint256[2]) -> REF_359.ethBalances
REF_361(uint256) -> REF_\
360[1]
REF_362(uint256) -> _balances[1]
REF_361 (->virtualChannels) := REF_362(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1089 -> 1090	[key=0,
		edge_type=next,
		label=Next];
	1091	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].erc20Balances[0] = _balances[2]

IRs:
REF_363(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_364(uint256[2]) -> REF_363.erc20Balances
REF_365(uint256) -> REF_364[0]
REF_366(uint256) -> _balances[\
2]
REF_365 (->virtualChannels) := REF_366(uint256)",
		node_expression="virtualChannels[_vcID].erc20Balances[0] = _balances[2]",
		node_irs="REF_363(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_364(uint256[2]) -> REF_363.erc20Balances
REF_365(uint256) -> \
REF_364[0]
REF_366(uint256) -> _balances[2]
REF_365 (->virtualChannels) := REF_366(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1090 -> 1091	[key=0,
		edge_type=next,
		label=Next];
	1092	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].erc20Balances[1] = _balances[3]

IRs:
REF_367(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_368(uint256[2]) -> REF_367.erc20Balances
REF_369(uint256) -> REF_368[1]
REF_370(uint256) -> _balances[\
3]
REF_369 (->virtualChannels) := REF_370(uint256)",
		node_expression="virtualChannels[_vcID].erc20Balances[1] = _balances[3]",
		node_irs="REF_367(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_368(uint256[2]) -> REF_367.erc20Balances
REF_369(uint256) -> \
REF_368[1]
REF_370(uint256) -> _balances[3]
REF_369 (->virtualChannels) := REF_370(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1091 -> 1092	[key=0,
		edge_type=next,
		label=Next];
	1093	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].bond = _bond

IRs:
REF_371(LedgerChannel.VirtualChannel) -> virtualChannels[_\
vcID]
REF_372(uint256[2]) -> REF_371.bond
REF_372 (->virtualChannels) := _bond(uint256[2])",
		node_expression="virtualChannels[_vcID].bond = _bond",
		node_irs="REF_371(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_372(uint256[2]) -> REF_371.bond
REF_372 (->virtualChannels) := _\
bond(uint256[2])",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1092 -> 1093	[key=0,
		edge_type=next,
		label=Next];
	1094	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].updateVCtimeout = now + Channels[_lcID].confirmTime

IRs:
REF_373(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_374(uint256) -> REF_373.updateVCtimeout
REF_375(LedgerChannel.Channel) -> Channels[_lcID]
REF_376(\
uint256) -> REF_375.confirmTime
TMP_249(uint256) = now + REF_376
REF_374 (->virtualChannels) := TMP_249(uint256)",
		node_expression="virtualChannels[_vcID].updateVCtimeout = now + Channels[_lcID].confirmTime",
		node_irs="REF_373(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_374(uint256) -> REF_373.updateVCtimeout
REF_375(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_376(uint256) -> REF_375.confirmTime
TMP_249(uint256) = now + REF_376
REF_374 (->virtualChannels) := TMP_249(\
uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1093 -> 1094	[key=0,
		edge_type=next,
		label=Next];
	1095	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].isInSettlementState = true

IRs:
REF_377(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_378(bool) -> REF_377.isInSettlementState
REF_378 (->virtualChannels) := True(bool)",
		node_expression="virtualChannels[_vcID].isInSettlementState = true",
		node_irs="REF_377(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_378(bool) -> REF_377.isInSettlementState
REF_378 (->virtualChannels) := \
True(bool)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1094 -> 1095	[key=0,
		edge_type=next,
		label=Next];
	1096	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
DidVCInit(_lcID,_vcID,_proof,uint256(0),_partyA,_partyB,_balances[0],_balances[1])

IRs:
TMP_\
250 = CONVERT 0 to uint256
REF_379(uint256) -> _balances[0]
REF_380(uint256) -> _balances[1]
Emit DidVCInit(_lcID._vcID._proof.TMP_\
250._partyA._partyB.REF_379.REF_380)",
		node_expression="DidVCInit(_lcID,_vcID,_proof,uint256(0),_partyA,_partyB,_balances[0],_balances[1])",
		node_irs="TMP_250 = CONVERT 0 to uint256
REF_379(uint256) -> _balances[0]
REF_380(uint256) -> _balances[1]
Emit DidVCInit(_lcID._vcID._proof.TMP_\
250._partyA._partyB.REF_379.REF_380)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1095 -> 1096	[key=0,
		edge_type=next,
		label=Next];
	1097	[contract_name=LedgerChannel,
		function_fullname="initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		label="spank_chain_payment.sol_LedgerChannel_initVCstate(bytes32,bytes32,bytes,address,address,uint256[2],uint256[4],string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1097 -> 1078	[key=0,
		edge_type=next,
		label=Next];
	1098	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	1099	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].isOpen,LC is closed.)

IRs:
REF_381(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_382(bool) -> REF_381.isOpen
TMP_252(None) = SOLIDITY_CALL require(bool,string)(REF_382,LC is closed.)",
		node_expression="require(bool,string)(Channels[_lcID].isOpen,LC is closed.)",
		node_irs="REF_381(LedgerChannel.Channel) -> Channels[_lcID]
REF_382(bool) -> REF_381.isOpen
TMP_252(None) = SOLIDITY_CALL require(bool,string)(\
REF_382,LC is closed.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1098 -> 1099	[key=0,
		edge_type=next,
		label=Next];
	1100	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(! virtualChannels[_vcID].isClose,VC is closed.)

IRs:
REF_383(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_384(bool) -> REF_383.isClose
TMP_253 = ! REF_384 
TMP_254(None) = SOLIDITY_CALL require(bool,string)(\
TMP_253,VC is closed.)",
		node_expression="require(bool,string)(! virtualChannels[_vcID].isClose,VC is closed.)",
		node_irs="REF_383(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_384(bool) -> REF_383.isClose
TMP_253 = ! REF_384 
TMP_254(None) = \
SOLIDITY_CALL require(bool,string)(TMP_253,VC is closed.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1099 -> 1100	[key=0,
		edge_type=next,
		label=Next];
	1101	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(virtualChannels[_vcID].sequence < updateSeq,VC sequence is higher than update \
sequence.)

IRs:
REF_385(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_386(uint256) -> REF_385.sequence
TMP_255(bool) = \
REF_386 < updateSeq
TMP_256(None) = SOLIDITY_CALL require(bool,string)(TMP_255,VC sequence is higher than update sequence.)",
		node_expression="require(bool,string)(virtualChannels[_vcID].sequence < updateSeq,VC sequence is higher than update sequence.)",
		node_irs="REF_385(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_386(uint256) -> REF_385.sequence
TMP_255(bool) = REF_386 < updateSeq
\
TMP_256(None) = SOLIDITY_CALL require(bool,string)(TMP_255,VC sequence is higher than update sequence.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1100 -> 1101	[key=0,
		edge_type=next,
		label=Next];
	1102	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(virtualChannels[_vcID].ethBalances[1] < updateBal[1] && virtualChannels[_\
vcID].erc20Balances[1] < updateBal[3],State updates may only increase recipient balance.)

IRs:
REF_387(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_388(uint256[2]) -> REF_387.ethBalances
REF_389(uint256) -> REF_388[1]
REF_390(uint256) -> updateBal[\
1]
TMP_257(bool) = REF_389 < REF_390
REF_391(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_392(uint256[2]) -> REF_\
391.erc20Balances
REF_393(uint256) -> REF_392[1]
REF_394(uint256) -> updateBal[3]
TMP_258(bool) = REF_393 < REF_394
TMP_259(bool) = \
TMP_257 && TMP_258
TMP_260(None) = SOLIDITY_CALL require(bool,string)(TMP_259,State updates may only increase recipient balance.)",
		node_expression="require(bool,string)(virtualChannels[_vcID].ethBalances[1] < updateBal[1] && virtualChannels[_vcID].erc20Balances[1] < updateBal[\
3],State updates may only increase recipient balance.)",
		node_irs="REF_387(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_388(uint256[2]) -> REF_387.ethBalances
REF_389(uint256) -> REF_\
388[1]
REF_390(uint256) -> updateBal[1]
TMP_257(bool) = REF_389 < REF_390
REF_391(LedgerChannel.VirtualChannel) -> virtualChannels[_\
vcID]
REF_392(uint256[2]) -> REF_391.erc20Balances
REF_393(uint256) -> REF_392[1]
REF_394(uint256) -> updateBal[3]
TMP_258(bool) = \
REF_393 < REF_394
TMP_259(bool) = TMP_257 && TMP_258
TMP_260(None) = SOLIDITY_CALL require(bool,string)(TMP_259,State updates may \
only increase recipient balance.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1101 -> 1102	[key=0,
		edge_type=next,
		label=Next];
	1103	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(virtualChannels[_vcID].bond[0] == updateBal[0] + updateBal[1] && virtualChannels[_\
vcID].bond[1] == updateBal[2] + updateBal[3],Incorrect balances for bonded amount)

IRs:
REF_395(LedgerChannel.VirtualChannel) -> \
virtualChannels[_vcID]
REF_396(uint256[2]) -> REF_395.bond
REF_397(uint256) -> REF_396[0]
REF_398(uint256) -> updateBal[0]
REF_399(\
uint256) -> updateBal[1]
TMP_261(uint256) = REF_398 + REF_399
TMP_262(bool) = REF_397 == TMP_261
REF_400(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_401(uint256[2]) -> REF_400.bond
REF_402(uint256) -> REF_401[1]
REF_403(uint256) -> updateBal[2]
REF_\
404(uint256) -> updateBal[3]
TMP_263(uint256) = REF_403 + REF_404
TMP_264(bool) = REF_402 == TMP_263
TMP_265(bool) = TMP_262 && \
TMP_264
TMP_266(None) = SOLIDITY_CALL require(bool,string)(TMP_265,Incorrect balances for bonded amount)",
		node_expression="require(bool,string)(virtualChannels[_vcID].bond[0] == updateBal[0] + updateBal[1] && virtualChannels[_vcID].bond[1] == updateBal[\
2] + updateBal[3],Incorrect balances for bonded amount)",
		node_irs="REF_395(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_396(uint256[2]) -> REF_395.bond
REF_397(uint256) -> REF_396[\
0]
REF_398(uint256) -> updateBal[0]
REF_399(uint256) -> updateBal[1]
TMP_261(uint256) = REF_398 + REF_399
TMP_262(bool) = REF_397 == \
TMP_261
REF_400(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_401(uint256[2]) -> REF_400.bond
REF_402(uint256) -> \
REF_401[1]
REF_403(uint256) -> updateBal[2]
REF_404(uint256) -> updateBal[3]
TMP_263(uint256) = REF_403 + REF_404
TMP_264(bool) = \
REF_402 == TMP_263
TMP_265(bool) = TMP_262 && TMP_264
TMP_266(None) = SOLIDITY_CALL require(bool,string)(TMP_265,Incorrect balances \
for bonded amount)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1102 -> 1103	[key=0,
		edge_type=next,
		label=Next];
	1104	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(Channels[_lcID].updateLCtimeout < now)

IRs:
REF_405(LedgerChannel.Channel) -> \
Channels[_lcID]
REF_406(uint256) -> REF_405.updateLCtimeout
TMP_267(bool) = REF_406 < now
TMP_268(None) = SOLIDITY_CALL require(\
bool)(TMP_267)",
		node_expression="require(bool)(Channels[_lcID].updateLCtimeout < now)",
		node_irs="REF_405(LedgerChannel.Channel) -> Channels[_lcID]
REF_406(uint256) -> REF_405.updateLCtimeout
TMP_267(bool) = REF_406 < now
TMP_\
268(None) = SOLIDITY_CALL require(bool)(TMP_267)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1103 -> 1104	[key=0,
		edge_type=next,
		label=Next];
	1105	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
_updateState = keccak256()(abi.encodePacked(_vcID,updateSeq,_partyA,_partyB,virtualChannels[_\
vcID].bond[0],virtualChannels[_vcID].bond[1],updateBal[0],updateBal[1],updateBal[2],updateBal[3]))

IRs:
REF_408(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_409(uint256[2]) -> REF_408.bond
REF_410(uint256) -> REF_409[0]
REF_411(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_412(uint256[2]) -> REF_411.bond
REF_413(uint256) -> REF_412[1]
REF_414(uint256) -> updateBal[0]
REF_\
415(uint256) -> updateBal[1]
REF_416(uint256) -> updateBal[2]
REF_417(uint256) -> updateBal[3]
TMP_269(bytes) = SOLIDITY_CALL abi.encodePacked()(_\
vcID,updateSeq,_partyA,_partyB,REF_410,REF_413,REF_414,REF_415,REF_416,REF_417)
TMP_270(bytes32) = SOLIDITY_CALL keccak256()(TMP_\
269)
_updateState(bytes32) := TMP_270(bytes32)",
		node_expression="_updateState = keccak256()(abi.encodePacked(_vcID,updateSeq,_partyA,_partyB,virtualChannels[_vcID].bond[0],virtualChannels[_vcID]\
.bond[1],updateBal[0],updateBal[1],updateBal[2],updateBal[3]))",
		node_irs="REF_408(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_409(uint256[2]) -> REF_408.bond
REF_410(uint256) -> REF_409[\
0]
REF_411(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_412(uint256[2]) -> REF_411.bond
REF_413(uint256) -> REF_412[\
1]
REF_414(uint256) -> updateBal[0]
REF_415(uint256) -> updateBal[1]
REF_416(uint256) -> updateBal[2]
REF_417(uint256) -> updateBal[\
3]
TMP_269(bytes) = SOLIDITY_CALL abi.encodePacked()(_vcID,updateSeq,_partyA,_partyB,REF_410,REF_413,REF_414,REF_415,REF_416,REF_\
417)
TMP_270(bytes32) = SOLIDITY_CALL keccak256()(TMP_269)
_updateState(bytes32) := TMP_270(bytes32)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1104 -> 1105	[key=0,
		edge_type=next,
		label=Next];
	1106	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(virtualChannels[_vcID].partyA == ECTools.recoverSigner(_updateState,sigA))

IRs:
\
REF_418(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_419(address) -> REF_418.partyA
TMP_271(address) = LIBRARY_CALL, \
dest:ECTools, function:ECTools.recoverSigner(bytes32,string), arguments:['_updateState', 'sigA'] 
TMP_272(bool) = REF_419 == TMP_\
271
TMP_273(None) = SOLIDITY_CALL require(bool)(TMP_272)",
		node_expression="require(bool)(virtualChannels[_vcID].partyA == ECTools.recoverSigner(_updateState,sigA))",
		node_irs="REF_418(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_419(address) -> REF_418.partyA
TMP_271(address) = LIBRARY_CALL, \
dest:ECTools, function:ECTools.recoverSigner(bytes32,string), arguments:['_updateState', 'sigA'] 
TMP_272(bool) = REF_419 == TMP_\
271
TMP_273(None) = SOLIDITY_CALL require(bool)(TMP_272)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1105 -> 1106	[key=0,
		edge_type=next,
		label=Next];
	1107	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].challenger = msg.sender

IRs:
REF_421(LedgerChannel.VirtualChannel) -> \
virtualChannels[_vcID]
REF_422(address) -> REF_421.challenger
REF_422 (->virtualChannels) := msg.sender(address)",
		node_expression="virtualChannels[_vcID].challenger = msg.sender",
		node_irs="REF_421(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_422(address) -> REF_421.challenger
REF_422 (->virtualChannels) := \
msg.sender(address)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1106 -> 1107	[key=0,
		edge_type=next,
		label=Next];
	1108	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].sequence = updateSeq

IRs:
REF_423(LedgerChannel.VirtualChannel) -> virtualChannels[_\
vcID]
REF_424(uint256) -> REF_423.sequence
REF_424 (->virtualChannels) := updateSeq(uint256)",
		node_expression="virtualChannels[_vcID].sequence = updateSeq",
		node_irs="REF_423(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_424(uint256) -> REF_423.sequence
REF_424 (->virtualChannels) := \
updateSeq(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1107 -> 1108	[key=0,
		edge_type=next,
		label=Next];
	1109	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].ethBalances[0] = updateBal[0]

IRs:
REF_425(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_426(uint256[2]) -> REF_425.ethBalances
REF_427(uint256) -> REF_426[0]
REF_428(uint256) -> updateBal[\
0]
REF_427 (->virtualChannels) := REF_428(uint256)",
		node_expression="virtualChannels[_vcID].ethBalances[0] = updateBal[0]",
		node_irs="REF_425(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_426(uint256[2]) -> REF_425.ethBalances
REF_427(uint256) -> REF_\
426[0]
REF_428(uint256) -> updateBal[0]
REF_427 (->virtualChannels) := REF_428(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1108 -> 1109	[key=0,
		edge_type=next,
		label=Next];
	1110	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].ethBalances[1] = updateBal[1]

IRs:
REF_429(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_430(uint256[2]) -> REF_429.ethBalances
REF_431(uint256) -> REF_430[1]
REF_432(uint256) -> updateBal[\
1]
REF_431 (->virtualChannels) := REF_432(uint256)",
		node_expression="virtualChannels[_vcID].ethBalances[1] = updateBal[1]",
		node_irs="REF_429(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_430(uint256[2]) -> REF_429.ethBalances
REF_431(uint256) -> REF_\
430[1]
REF_432(uint256) -> updateBal[1]
REF_431 (->virtualChannels) := REF_432(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1109 -> 1110	[key=0,
		edge_type=next,
		label=Next];
	1111	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].erc20Balances[0] = updateBal[2]

IRs:
REF_433(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_434(uint256[2]) -> REF_433.erc20Balances
REF_435(uint256) -> REF_434[0]
REF_436(uint256) -> updateBal[\
2]
REF_435 (->virtualChannels) := REF_436(uint256)",
		node_expression="virtualChannels[_vcID].erc20Balances[0] = updateBal[2]",
		node_irs="REF_433(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_434(uint256[2]) -> REF_433.erc20Balances
REF_435(uint256) -> \
REF_434[0]
REF_436(uint256) -> updateBal[2]
REF_435 (->virtualChannels) := REF_436(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1110 -> 1111	[key=0,
		edge_type=next,
		label=Next];
	1112	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].erc20Balances[1] = updateBal[3]

IRs:
REF_437(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_438(uint256[2]) -> REF_437.erc20Balances
REF_439(uint256) -> REF_438[1]
REF_440(uint256) -> updateBal[\
3]
REF_439 (->virtualChannels) := REF_440(uint256)",
		node_expression="virtualChannels[_vcID].erc20Balances[1] = updateBal[3]",
		node_irs="REF_437(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_438(uint256[2]) -> REF_437.erc20Balances
REF_439(uint256) -> \
REF_438[1]
REF_440(uint256) -> updateBal[3]
REF_439 (->virtualChannels) := REF_440(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1111 -> 1112	[key=0,
		edge_type=next,
		label=Next];
	1113	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].updateVCtimeout = now + Channels[_lcID].confirmTime

IRs:
REF_441(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_442(uint256) -> REF_441.updateVCtimeout
REF_443(LedgerChannel.Channel) -> Channels[_lcID]
REF_444(\
uint256) -> REF_443.confirmTime
TMP_274(uint256) = now + REF_444
REF_442 (->virtualChannels) := TMP_274(uint256)",
		node_expression="virtualChannels[_vcID].updateVCtimeout = now + Channels[_lcID].confirmTime",
		node_irs="REF_441(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_442(uint256) -> REF_441.updateVCtimeout
REF_443(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_444(uint256) -> REF_443.confirmTime
TMP_274(uint256) = now + REF_444
REF_442 (->virtualChannels) := TMP_274(\
uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1112 -> 1113	[key=0,
		edge_type=next,
		label=Next];
	1114	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="Node Type: EXPRESSION

EXPRESSION:
DidVCSettle(_lcID,_vcID,updateSeq,updateBal[0],updateBal[1],msg.sender,virtualChannels[_vcID]\
.updateVCtimeout)

IRs:
REF_445(uint256) -> updateBal[0]
REF_446(uint256) -> updateBal[1]
REF_447(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_448(uint256) -> REF_447.updateVCtimeout
Emit DidVCSettle(_lcID._vcID.updateSeq.REF_445.REF_446.msg.sender.REF_\
448)",
		node_expression="DidVCSettle(_lcID,_vcID,updateSeq,updateBal[0],updateBal[1],msg.sender,virtualChannels[_vcID].updateVCtimeout)",
		node_irs="REF_445(uint256) -> updateBal[0]
REF_446(uint256) -> updateBal[1]
REF_447(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
\
REF_448(uint256) -> REF_447.updateVCtimeout
Emit DidVCSettle(_lcID._vcID.updateSeq.REF_445.REF_446.msg.sender.REF_448)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1113 -> 1114	[key=0,
		edge_type=next,
		label=Next];
	1115	[contract_name=LedgerChannel,
		function_fullname="settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		label="spank_chain_payment.sol_LedgerChannel_settleVC(bytes32,bytes32,uint256,address,address,uint256[4],string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1115 -> 1098	[key=0,
		edge_type=next,
		label=Next];
	1116	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	1117	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(Channels[_lcID].isOpen,LC is closed.)

IRs:
REF_449(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_450(bool) -> REF_449.isOpen
TMP_276(None) = SOLIDITY_CALL require(bool,string)(REF_450,LC is closed.)",
		node_expression="require(bool,string)(Channels[_lcID].isOpen,LC is closed.)",
		node_irs="REF_449(LedgerChannel.Channel) -> Channels[_lcID]
REF_450(bool) -> REF_449.isOpen
TMP_276(None) = SOLIDITY_CALL require(bool,string)(\
REF_450,LC is closed.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1116 -> 1117	[key=0,
		edge_type=next,
		label=Next];
	1118	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(virtualChannels[_vcID].isInSettlementState,VC is not in settlement state.)

\
IRs:
REF_451(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_452(bool) -> REF_451.isInSettlementState
TMP_277(None) = \
SOLIDITY_CALL require(bool,string)(REF_452,VC is not in settlement state.)",
		node_expression="require(bool,string)(virtualChannels[_vcID].isInSettlementState,VC is not in settlement state.)",
		node_irs="REF_451(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_452(bool) -> REF_451.isInSettlementState
TMP_277(None) = SOLIDITY_\
CALL require(bool,string)(REF_452,VC is not in settlement state.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1117 -> 1118	[key=0,
		edge_type=next,
		label=Next];
	1119	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(virtualChannels[_vcID].updateVCtimeout < now,Update vc timeout has not elapsed.)

\
IRs:
REF_453(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_454(uint256) -> REF_453.updateVCtimeout
TMP_278(bool) = \
REF_454 < now
TMP_279(None) = SOLIDITY_CALL require(bool,string)(TMP_278,Update vc timeout has not elapsed.)",
		node_expression="require(bool,string)(virtualChannels[_vcID].updateVCtimeout < now,Update vc timeout has not elapsed.)",
		node_irs="REF_453(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_454(uint256) -> REF_453.updateVCtimeout
TMP_278(bool) = REF_\
454 < now
TMP_279(None) = SOLIDITY_CALL require(bool,string)(TMP_278,Update vc timeout has not elapsed.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1118 -> 1119	[key=0,
		edge_type=next,
		label=Next];
	1120	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(! virtualChannels[_vcID].isClose,VC is already closed)

IRs:
REF_455(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_456(bool) -> REF_455.isClose
TMP_280 = ! REF_456 
TMP_281(None) = SOLIDITY_CALL require(bool,string)(\
TMP_280,VC is already closed)",
		node_expression="require(bool,string)(! virtualChannels[_vcID].isClose,VC is already closed)",
		node_irs="REF_455(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_456(bool) -> REF_455.isClose
TMP_280 = ! REF_456 
TMP_281(None) = \
SOLIDITY_CALL require(bool,string)(TMP_280,VC is already closed)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1119 -> 1120	[key=0,
		edge_type=next,
		label=Next];
	1121	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].numOpenVC --

IRs:
REF_457(LedgerChannel.Channel) -> Channels[_lcID]
REF_458(\
uint256) -> REF_457.numOpenVC
TMP_282(uint256) := REF_458(uint256)
REF_458(-> Channels) = REF_458 - 1",
		node_expression="Channels[_lcID].numOpenVC --",
		node_irs="REF_457(LedgerChannel.Channel) -> Channels[_lcID]
REF_458(uint256) -> REF_457.numOpenVC
TMP_282(uint256) := REF_458(uint256)
REF_\
458(-> Channels) = REF_458 - 1",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1120 -> 1121	[key=0,
		edge_type=next,
		label=Next];
	1122	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
virtualChannels[_vcID].isClose = true

IRs:
REF_459(LedgerChannel.VirtualChannel) -> virtualChannels[_\
vcID]
REF_460(bool) -> REF_459.isClose
REF_460 (->virtualChannels) := True(bool)",
		node_expression="virtualChannels[_vcID].isClose = true",
		node_irs="REF_459(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_460(bool) -> REF_459.isClose
REF_460 (->virtualChannels) := \
True(bool)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1121 -> 1122	[key=0,
		edge_type=next,
		label=Next];
	1123	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: IF

EXPRESSION:
virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]

IRs:
REF_461(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_462(address) -> REF_461.partyA
REF_463(LedgerChannel.Channel) -> Channels[_lcID]
REF_464(address[2]) \
-> REF_463.partyAddresses
REF_465(address) -> REF_464[0]
TMP_283(bool) = REF_462 == REF_465
CONDITION TMP_283",
		node_expression="virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]",
		node_irs="REF_461(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_462(address) -> REF_461.partyA
REF_463(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_464(address[2]) -> REF_463.partyAddresses
REF_465(address) -> REF_464[0]
TMP_283(bool) = REF_462 == REF_465
\
CONDITION TMP_283",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1122 -> 1123	[key=0,
		edge_type=next,
		label=Next];
	1124	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].ethBalances[0] += virtualChannels[_vcID].ethBalances[0]

IRs:
REF_466(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_467(uint256[4]) -> REF_466.ethBalances
REF_468(uint256) -> REF_467[0]
REF_469(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_470(uint256[2]) -> REF_469.ethBalances
REF_471(uint256) -> REF_470[0]
REF_468(-> Channels) = REF_468 + \
REF_471",
		node_expression="Channels[_lcID].ethBalances[0] += virtualChannels[_vcID].ethBalances[0]",
		node_irs="REF_466(LedgerChannel.Channel) -> Channels[_lcID]
REF_467(uint256[4]) -> REF_466.ethBalances
REF_468(uint256) -> REF_467[0]
REF_\
469(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_470(uint256[2]) -> REF_469.ethBalances
REF_471(uint256) -> REF_470[\
0]
REF_468(-> Channels) = REF_468 + REF_471",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1123 -> 1124	[key=0,
		edge_type=if_true,
		label=True];
	1128	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: IF

EXPRESSION:
virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]

IRs:
REF_490(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_491(address) -> REF_490.partyB
REF_492(LedgerChannel.Channel) -> Channels[_lcID]
REF_493(address[2]) \
-> REF_492.partyAddresses
REF_494(address) -> REF_493[0]
TMP_284(bool) = REF_491 == REF_494
CONDITION TMP_284",
		node_expression="virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]",
		node_irs="REF_490(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_491(address) -> REF_490.partyB
REF_492(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_493(address[2]) -> REF_492.partyAddresses
REF_494(address) -> REF_493[0]
TMP_284(bool) = REF_491 == REF_494
\
CONDITION TMP_284",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1123 -> 1128	[key=0,
		edge_type=if_false,
		label=False];
	1125	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].ethBalances[1] += virtualChannels[_vcID].ethBalances[1]

IRs:
REF_472(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_473(uint256[4]) -> REF_472.ethBalances
REF_474(uint256) -> REF_473[1]
REF_475(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_476(uint256[2]) -> REF_475.ethBalances
REF_477(uint256) -> REF_476[1]
REF_474(-> Channels) = REF_474 + \
REF_477",
		node_expression="Channels[_lcID].ethBalances[1] += virtualChannels[_vcID].ethBalances[1]",
		node_irs="REF_472(LedgerChannel.Channel) -> Channels[_lcID]
REF_473(uint256[4]) -> REF_472.ethBalances
REF_474(uint256) -> REF_473[1]
REF_\
475(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_476(uint256[2]) -> REF_475.ethBalances
REF_477(uint256) -> REF_476[\
1]
REF_474(-> Channels) = REF_474 + REF_477",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1124 -> 1125	[key=0,
		edge_type=next,
		label=Next];
	1126	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].erc20Balances[0] += virtualChannels[_vcID].erc20Balances[0]

IRs:
REF_478(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_479(uint256[4]) -> REF_478.erc20Balances
REF_480(uint256) -> REF_479[0]
REF_481(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_482(uint256[2]) -> REF_481.erc20Balances
REF_483(uint256) -> REF_482[0]
REF_480(-> Channels) = REF_\
480 + REF_483",
		node_expression="Channels[_lcID].erc20Balances[0] += virtualChannels[_vcID].erc20Balances[0]",
		node_irs="REF_478(LedgerChannel.Channel) -> Channels[_lcID]
REF_479(uint256[4]) -> REF_478.erc20Balances
REF_480(uint256) -> REF_479[0]
REF_\
481(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_482(uint256[2]) -> REF_481.erc20Balances
REF_483(uint256) -> REF_\
482[0]
REF_480(-> Channels) = REF_480 + REF_483",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1125 -> 1126	[key=0,
		edge_type=next,
		label=Next];
	1127	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].erc20Balances[1] += virtualChannels[_vcID].erc20Balances[1]

IRs:
REF_484(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_485(uint256[4]) -> REF_484.erc20Balances
REF_486(uint256) -> REF_485[1]
REF_487(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_488(uint256[2]) -> REF_487.erc20Balances
REF_489(uint256) -> REF_488[1]
REF_486(-> Channels) = REF_\
486 + REF_489",
		node_expression="Channels[_lcID].erc20Balances[1] += virtualChannels[_vcID].erc20Balances[1]",
		node_irs="REF_484(LedgerChannel.Channel) -> Channels[_lcID]
REF_485(uint256[4]) -> REF_484.erc20Balances
REF_486(uint256) -> REF_485[1]
REF_\
487(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_488(uint256[2]) -> REF_487.erc20Balances
REF_489(uint256) -> REF_\
488[1]
REF_486(-> Channels) = REF_486 + REF_489",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1126 -> 1127	[key=0,
		edge_type=next,
		label=Next];
	1134	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1127 -> 1134	[key=0,
		edge_type=next,
		label=Next];
	1129	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].ethBalances[0] += virtualChannels[_vcID].ethBalances[1]

IRs:
REF_495(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_496(uint256[4]) -> REF_495.ethBalances
REF_497(uint256) -> REF_496[0]
REF_498(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_499(uint256[2]) -> REF_498.ethBalances
REF_500(uint256) -> REF_499[1]
REF_497(-> Channels) = REF_497 + \
REF_500",
		node_expression="Channels[_lcID].ethBalances[0] += virtualChannels[_vcID].ethBalances[1]",
		node_irs="REF_495(LedgerChannel.Channel) -> Channels[_lcID]
REF_496(uint256[4]) -> REF_495.ethBalances
REF_497(uint256) -> REF_496[0]
REF_\
498(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_499(uint256[2]) -> REF_498.ethBalances
REF_500(uint256) -> REF_499[\
1]
REF_497(-> Channels) = REF_497 + REF_500",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1128 -> 1129	[key=0,
		edge_type=if_true,
		label=True];
	1133	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1128 -> 1133	[key=0,
		edge_type=if_false,
		label=False];
	1130	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].ethBalances[1] += virtualChannels[_vcID].ethBalances[0]

IRs:
REF_501(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_502(uint256[4]) -> REF_501.ethBalances
REF_503(uint256) -> REF_502[1]
REF_504(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_505(uint256[2]) -> REF_504.ethBalances
REF_506(uint256) -> REF_505[0]
REF_503(-> Channels) = REF_503 + \
REF_506",
		node_expression="Channels[_lcID].ethBalances[1] += virtualChannels[_vcID].ethBalances[0]",
		node_irs="REF_501(LedgerChannel.Channel) -> Channels[_lcID]
REF_502(uint256[4]) -> REF_501.ethBalances
REF_503(uint256) -> REF_502[1]
REF_\
504(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_505(uint256[2]) -> REF_504.ethBalances
REF_506(uint256) -> REF_505[\
0]
REF_503(-> Channels) = REF_503 + REF_506",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1129 -> 1130	[key=0,
		edge_type=next,
		label=Next];
	1131	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].erc20Balances[0] += virtualChannels[_vcID].erc20Balances[1]

IRs:
REF_507(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_508(uint256[4]) -> REF_507.erc20Balances
REF_509(uint256) -> REF_508[0]
REF_510(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_511(uint256[2]) -> REF_510.erc20Balances
REF_512(uint256) -> REF_511[1]
REF_509(-> Channels) = REF_\
509 + REF_512",
		node_expression="Channels[_lcID].erc20Balances[0] += virtualChannels[_vcID].erc20Balances[1]",
		node_irs="REF_507(LedgerChannel.Channel) -> Channels[_lcID]
REF_508(uint256[4]) -> REF_507.erc20Balances
REF_509(uint256) -> REF_508[0]
REF_\
510(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_511(uint256[2]) -> REF_510.erc20Balances
REF_512(uint256) -> REF_\
511[1]
REF_509(-> Channels) = REF_509 + REF_512",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1130 -> 1131	[key=0,
		edge_type=next,
		label=Next];
	1132	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
Channels[_lcID].erc20Balances[1] += virtualChannels[_vcID].erc20Balances[0]

IRs:
REF_513(LedgerChannel.Channel) \
-> Channels[_lcID]
REF_514(uint256[4]) -> REF_513.erc20Balances
REF_515(uint256) -> REF_514[1]
REF_516(LedgerChannel.VirtualChannel) \
-> virtualChannels[_vcID]
REF_517(uint256[2]) -> REF_516.erc20Balances
REF_518(uint256) -> REF_517[0]
REF_515(-> Channels) = REF_\
515 + REF_518",
		node_expression="Channels[_lcID].erc20Balances[1] += virtualChannels[_vcID].erc20Balances[0]",
		node_irs="REF_513(LedgerChannel.Channel) -> Channels[_lcID]
REF_514(uint256[4]) -> REF_513.erc20Balances
REF_515(uint256) -> REF_514[1]
REF_\
516(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_517(uint256[2]) -> REF_516.erc20Balances
REF_518(uint256) -> REF_\
517[0]
REF_515(-> Channels) = REF_515 + REF_518",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1131 -> 1132	[key=0,
		edge_type=next,
		label=Next];
	1132 -> 1133	[key=0,
		edge_type=next,
		label=Next];
	1133 -> 1134	[key=0,
		edge_type=next,
		label=Next];
	1135	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
DidVCClose(_lcID,_vcID,virtualChannels[_vcID].erc20Balances[0],virtualChannels[_vcID].erc20Balances[\
1])

IRs:
REF_519(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_520(uint256[2]) -> REF_519.erc20Balances
REF_521(uint256) \
-> REF_520[0]
REF_522(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_523(uint256[2]) -> REF_522.erc20Balances
REF_524(\
uint256) -> REF_523[1]
Emit DidVCClose(_lcID._vcID.REF_521.REF_524)",
		node_expression="DidVCClose(_lcID,_vcID,virtualChannels[_vcID].erc20Balances[0],virtualChannels[_vcID].erc20Balances[1])",
		node_irs="REF_519(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_520(uint256[2]) -> REF_519.erc20Balances
REF_521(uint256) -> \
REF_520[0]
REF_522(LedgerChannel.VirtualChannel) -> virtualChannels[_vcID]
REF_523(uint256[2]) -> REF_522.erc20Balances
REF_524(\
uint256) -> REF_523[1]
Emit DidVCClose(_lcID._vcID.REF_521.REF_524)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1134 -> 1135	[key=0,
		edge_type=next,
		label=Next];
	1136	[contract_name=LedgerChannel,
		function_fullname="closeVirtualChannel(bytes32,bytes32)",
		label="spank_chain_payment.sol_LedgerChannel_closeVirtualChannel(bytes32,bytes32)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1136 -> 1116	[key=0,
		edge_type=next,
		label=Next];
	1137	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	1138	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
channel = Channels[_lcID]

IRs:
REF_525(LedgerChannel.Channel) -> Channels[_lcID]
channel(LedgerChannel.Channel) := \
REF_525(LedgerChannel.Channel)",
		node_expression="channel = Channels[_lcID]",
		node_irs="REF_525(LedgerChannel.Channel) -> Channels[_lcID]
channel(LedgerChannel.Channel) := REF_525(LedgerChannel.Channel)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1137 -> 1138	[key=0,
		edge_type=next,
		label=Next];
	1139	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(channel.isOpen,Channel is not open)

IRs:
REF_526(bool) -> channel.isOpen
\
TMP_286(None) = SOLIDITY_CALL require(bool,string)(REF_526,Channel is not open)",
		node_expression="require(bool,string)(channel.isOpen,Channel is not open)",
		node_irs="REF_526(bool) -> channel.isOpen
TMP_286(None) = SOLIDITY_CALL require(bool,string)(REF_526,Channel is not open)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1138 -> 1139	[key=0,
		edge_type=next,
		label=Next];
	1140	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(channel.isUpdateLCSettling == true)

IRs:
REF_527(bool) -> channel.isUpdateLCSettling
\
TMP_287(bool) = REF_527 == True
TMP_288(None) = SOLIDITY_CALL require(bool)(TMP_287)",
		node_expression="require(bool)(channel.isUpdateLCSettling == true)",
		node_irs="REF_527(bool) -> channel.isUpdateLCSettling
TMP_287(bool) = REF_527 == True
TMP_288(None) = SOLIDITY_CALL require(bool)(TMP_287)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1139 -> 1140	[key=0,
		edge_type=next,
		label=Next];
	1141	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(channel.numOpenVC == 0)

IRs:
REF_528(uint256) -> channel.numOpenVC
TMP_289(bool) = \
REF_528 == 0
TMP_290(None) = SOLIDITY_CALL require(bool)(TMP_289)",
		node_expression="require(bool)(channel.numOpenVC == 0)",
		node_irs="REF_528(uint256) -> channel.numOpenVC
TMP_289(bool) = REF_528 == 0
TMP_290(None) = SOLIDITY_CALL require(bool)(TMP_289)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1140 -> 1141	[key=0,
		edge_type=next,
		label=Next];
	1142	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(channel.updateLCtimeout < now,LC timeout over.)

IRs:
REF_529(uint256) -> \
channel.updateLCtimeout
TMP_291(bool) = REF_529 < now
TMP_292(None) = SOLIDITY_CALL require(bool,string)(TMP_291,LC timeout over.)",
		node_expression="require(bool,string)(channel.updateLCtimeout < now,LC timeout over.)",
		node_irs="REF_529(uint256) -> channel.updateLCtimeout
TMP_291(bool) = REF_529 < now
TMP_292(None) = SOLIDITY_CALL require(bool,string)(TMP_\
291,LC timeout over.)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1141 -> 1142	[key=0,
		edge_type=next,
		label=Next];
	1143	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
totalEthDeposit = channel.initialDeposit[0] + channel.ethBalances[2] + channel.ethBalances[\
3]

IRs:
REF_530(uint256[2]) -> channel.initialDeposit
REF_531(uint256) -> REF_530[0]
REF_532(uint256[4]) -> channel.ethBalances
\
REF_533(uint256) -> REF_532[2]
TMP_293(uint256) = REF_531 + REF_533
REF_534(uint256[4]) -> channel.ethBalances
REF_535(uint256) \
-> REF_534[3]
TMP_294(uint256) = TMP_293 + REF_535
totalEthDeposit(uint256) := TMP_294(uint256)",
		node_expression="totalEthDeposit = channel.initialDeposit[0] + channel.ethBalances[2] + channel.ethBalances[3]",
		node_irs="REF_530(uint256[2]) -> channel.initialDeposit
REF_531(uint256) -> REF_530[0]
REF_532(uint256[4]) -> channel.ethBalances
REF_533(\
uint256) -> REF_532[2]
TMP_293(uint256) = REF_531 + REF_533
REF_534(uint256[4]) -> channel.ethBalances
REF_535(uint256) -> REF_534[\
3]
TMP_294(uint256) = TMP_293 + REF_535
totalEthDeposit(uint256) := TMP_294(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1142 -> 1143	[key=0,
		edge_type=next,
		label=Next];
	1144	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
totalTokenDeposit = channel.initialDeposit[1] + channel.erc20Balances[2] + channel.erc20Balances[\
3]

IRs:
REF_536(uint256[2]) -> channel.initialDeposit
REF_537(uint256) -> REF_536[1]
REF_538(uint256[4]) -> channel.erc20Balances
\
REF_539(uint256) -> REF_538[2]
TMP_295(uint256) = REF_537 + REF_539
REF_540(uint256[4]) -> channel.erc20Balances
REF_541(uint256) \
-> REF_540[3]
TMP_296(uint256) = TMP_295 + REF_541
totalTokenDeposit(uint256) := TMP_296(uint256)",
		node_expression="totalTokenDeposit = channel.initialDeposit[1] + channel.erc20Balances[2] + channel.erc20Balances[3]",
		node_irs="REF_536(uint256[2]) -> channel.initialDeposit
REF_537(uint256) -> REF_536[1]
REF_538(uint256[4]) -> channel.erc20Balances
REF_539(\
uint256) -> REF_538[2]
TMP_295(uint256) = REF_537 + REF_539
REF_540(uint256[4]) -> channel.erc20Balances
REF_541(uint256) -> REF_\
540[3]
TMP_296(uint256) = TMP_295 + REF_541
totalTokenDeposit(uint256) := TMP_296(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1143 -> 1144	[key=0,
		edge_type=next,
		label=Next];
	1145	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
possibleTotalEthBeforeDeposit = channel.ethBalances[0] + channel.ethBalances[1]

IRs:
REF_542(\
uint256[4]) -> channel.ethBalances
REF_543(uint256) -> REF_542[0]
REF_544(uint256[4]) -> channel.ethBalances
REF_545(uint256) -> \
REF_544[1]
TMP_297(uint256) = REF_543 + REF_545
possibleTotalEthBeforeDeposit(uint256) := TMP_297(uint256)",
		node_expression="possibleTotalEthBeforeDeposit = channel.ethBalances[0] + channel.ethBalances[1]",
		node_irs="REF_542(uint256[4]) -> channel.ethBalances
REF_543(uint256) -> REF_542[0]
REF_544(uint256[4]) -> channel.ethBalances
REF_545(uint256) \
-> REF_544[1]
TMP_297(uint256) = REF_543 + REF_545
possibleTotalEthBeforeDeposit(uint256) := TMP_297(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1144 -> 1145	[key=0,
		edge_type=next,
		label=Next];
	1146	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
possibleTotalTokenBeforeDeposit = channel.erc20Balances[0] + channel.erc20Balances[1]

IRs:
\
REF_546(uint256[4]) -> channel.erc20Balances
REF_547(uint256) -> REF_546[0]
REF_548(uint256[4]) -> channel.erc20Balances
REF_549(\
uint256) -> REF_548[1]
TMP_298(uint256) = REF_547 + REF_549
possibleTotalTokenBeforeDeposit(uint256) := TMP_298(uint256)",
		node_expression="possibleTotalTokenBeforeDeposit = channel.erc20Balances[0] + channel.erc20Balances[1]",
		node_irs="REF_546(uint256[4]) -> channel.erc20Balances
REF_547(uint256) -> REF_546[0]
REF_548(uint256[4]) -> channel.erc20Balances
REF_549(\
uint256) -> REF_548[1]
TMP_298(uint256) = REF_547 + REF_549
possibleTotalTokenBeforeDeposit(uint256) := TMP_298(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1145 -> 1146	[key=0,
		edge_type=next,
		label=Next];
	1147	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: IF

EXPRESSION:
possibleTotalEthBeforeDeposit < totalEthDeposit

IRs:
TMP_299(bool) = possibleTotalEthBeforeDeposit < \
totalEthDeposit
CONDITION TMP_299",
		node_expression="possibleTotalEthBeforeDeposit < totalEthDeposit",
		node_irs="TMP_299(bool) = possibleTotalEthBeforeDeposit < totalEthDeposit
CONDITION TMP_299",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1146 -> 1147	[key=0,
		edge_type=next,
		label=Next];
	1148	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.ethBalances[0] += channel.ethBalances[2]

IRs:
REF_550(uint256[4]) -> channel.ethBalances
\
REF_551(uint256) -> REF_550[0]
REF_552(uint256[4]) -> channel.ethBalances
REF_553(uint256) -> REF_552[2]
REF_551(-> channel) = REF_\
551 + REF_553",
		node_expression="channel.ethBalances[0] += channel.ethBalances[2]",
		node_irs="REF_550(uint256[4]) -> channel.ethBalances
REF_551(uint256) -> REF_550[0]
REF_552(uint256[4]) -> channel.ethBalances
REF_553(uint256) \
-> REF_552[2]
REF_551(-> channel) = REF_551 + REF_553",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1147 -> 1148	[key=0,
		edge_type=if_true,
		label=True];
	1150	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(possibleTotalEthBeforeDeposit == totalEthDeposit)

IRs:
TMP_300(bool) = possibleTotalEthBeforeDeposit == \
totalEthDeposit
TMP_301(None) = SOLIDITY_CALL require(bool)(TMP_300)",
		node_expression="require(bool)(possibleTotalEthBeforeDeposit == totalEthDeposit)",
		node_irs="TMP_300(bool) = possibleTotalEthBeforeDeposit == totalEthDeposit
TMP_301(None) = SOLIDITY_CALL require(bool)(TMP_300)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1147 -> 1150	[key=0,
		edge_type=if_false,
		label=False];
	1149	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.ethBalances[1] += channel.ethBalances[3]

IRs:
REF_554(uint256[4]) -> channel.ethBalances
\
REF_555(uint256) -> REF_554[1]
REF_556(uint256[4]) -> channel.ethBalances
REF_557(uint256) -> REF_556[3]
REF_555(-> channel) = REF_\
555 + REF_557",
		node_expression="channel.ethBalances[1] += channel.ethBalances[3]",
		node_irs="REF_554(uint256[4]) -> channel.ethBalances
REF_555(uint256) -> REF_554[1]
REF_556(uint256[4]) -> channel.ethBalances
REF_557(uint256) \
-> REF_556[3]
REF_555(-> channel) = REF_555 + REF_557",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1148 -> 1149	[key=0,
		edge_type=next,
		label=Next];
	1151	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1149 -> 1151	[key=0,
		edge_type=next,
		label=Next];
	1150 -> 1151	[key=0,
		edge_type=next,
		label=Next];
	1152	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: IF

EXPRESSION:
possibleTotalTokenBeforeDeposit < totalTokenDeposit

IRs:
TMP_302(bool) = possibleTotalTokenBeforeDeposit < \
totalTokenDeposit
CONDITION TMP_302",
		node_expression="possibleTotalTokenBeforeDeposit < totalTokenDeposit",
		node_irs="TMP_302(bool) = possibleTotalTokenBeforeDeposit < totalTokenDeposit
CONDITION TMP_302",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1151 -> 1152	[key=0,
		edge_type=next,
		label=Next];
	1153	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.erc20Balances[0] += channel.erc20Balances[2]

IRs:
REF_558(uint256[4]) -> channel.erc20Balances
\
REF_559(uint256) -> REF_558[0]
REF_560(uint256[4]) -> channel.erc20Balances
REF_561(uint256) -> REF_560[2]
REF_559(-> channel) = \
REF_559 + REF_561",
		node_expression="channel.erc20Balances[0] += channel.erc20Balances[2]",
		node_irs="REF_558(uint256[4]) -> channel.erc20Balances
REF_559(uint256) -> REF_558[0]
REF_560(uint256[4]) -> channel.erc20Balances
REF_561(\
uint256) -> REF_560[2]
REF_559(-> channel) = REF_559 + REF_561",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1152 -> 1153	[key=0,
		edge_type=if_true,
		label=True];
	1155	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(possibleTotalTokenBeforeDeposit == totalTokenDeposit)

IRs:
TMP_303(bool) = possibleTotalTokenBeforeDeposit == \
totalTokenDeposit
TMP_304(None) = SOLIDITY_CALL require(bool)(TMP_303)",
		node_expression="require(bool)(possibleTotalTokenBeforeDeposit == totalTokenDeposit)",
		node_irs="TMP_303(bool) = possibleTotalTokenBeforeDeposit == totalTokenDeposit
TMP_304(None) = SOLIDITY_CALL require(bool)(TMP_303)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1152 -> 1155	[key=0,
		edge_type=if_false,
		label=False];
	1154	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.erc20Balances[1] += channel.erc20Balances[3]

IRs:
REF_562(uint256[4]) -> channel.erc20Balances
\
REF_563(uint256) -> REF_562[1]
REF_564(uint256[4]) -> channel.erc20Balances
REF_565(uint256) -> REF_564[3]
REF_563(-> channel) = \
REF_563 + REF_565",
		node_expression="channel.erc20Balances[1] += channel.erc20Balances[3]",
		node_irs="REF_562(uint256[4]) -> channel.erc20Balances
REF_563(uint256) -> REF_562[1]
REF_564(uint256[4]) -> channel.erc20Balances
REF_565(\
uint256) -> REF_564[3]
REF_563(-> channel) = REF_563 + REF_565",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1153 -> 1154	[key=0,
		edge_type=next,
		label=Next];
	1156	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1154 -> 1156	[key=0,
		edge_type=next,
		label=Next];
	1155 -> 1156	[key=0,
		edge_type=next,
		label=Next];
	1157	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
ethbalanceA = channel.ethBalances[0]

IRs:
REF_566(uint256[4]) -> channel.ethBalances
REF_567(\
uint256) -> REF_566[0]
ethbalanceA(uint256) := REF_567(uint256)",
		node_expression="ethbalanceA = channel.ethBalances[0]",
		node_irs="REF_566(uint256[4]) -> channel.ethBalances
REF_567(uint256) -> REF_566[0]
ethbalanceA(uint256) := REF_567(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1156 -> 1157	[key=0,
		edge_type=next,
		label=Next];
	1158	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
ethbalanceI = channel.ethBalances[1]

IRs:
REF_568(uint256[4]) -> channel.ethBalances
REF_569(\
uint256) -> REF_568[1]
ethbalanceI(uint256) := REF_569(uint256)",
		node_expression="ethbalanceI = channel.ethBalances[1]",
		node_irs="REF_568(uint256[4]) -> channel.ethBalances
REF_569(uint256) -> REF_568[1]
ethbalanceI(uint256) := REF_569(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1157 -> 1158	[key=0,
		edge_type=next,
		label=Next];
	1159	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
tokenbalanceA = channel.erc20Balances[0]

IRs:
REF_570(uint256[4]) -> channel.erc20Balances
\
REF_571(uint256) -> REF_570[0]
tokenbalanceA(uint256) := REF_571(uint256)",
		node_expression="tokenbalanceA = channel.erc20Balances[0]",
		node_irs="REF_570(uint256[4]) -> channel.erc20Balances
REF_571(uint256) -> REF_570[0]
tokenbalanceA(uint256) := REF_571(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1158 -> 1159	[key=0,
		edge_type=next,
		label=Next];
	1160	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
tokenbalanceI = channel.erc20Balances[1]

IRs:
REF_572(uint256[4]) -> channel.erc20Balances
\
REF_573(uint256) -> REF_572[1]
tokenbalanceI(uint256) := REF_573(uint256)",
		node_expression="tokenbalanceI = channel.erc20Balances[1]",
		node_irs="REF_572(uint256[4]) -> channel.erc20Balances
REF_573(uint256) -> REF_572[1]
tokenbalanceI(uint256) := REF_573(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1159 -> 1160	[key=0,
		edge_type=next,
		label=Next];
	1161	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.ethBalances[0] = 0

IRs:
REF_574(uint256[4]) -> channel.ethBalances
REF_575(uint256) \
-> REF_574[0]
REF_575 (->channel) := 0(uint256)",
		node_expression="channel.ethBalances[0] = 0",
		node_irs="REF_574(uint256[4]) -> channel.ethBalances
REF_575(uint256) -> REF_574[0]
REF_575 (->channel) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1160 -> 1161	[key=0,
		edge_type=next,
		label=Next];
	1162	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.ethBalances[1] = 0

IRs:
REF_576(uint256[4]) -> channel.ethBalances
REF_577(uint256) \
-> REF_576[1]
REF_577 (->channel) := 0(uint256)",
		node_expression="channel.ethBalances[1] = 0",
		node_irs="REF_576(uint256[4]) -> channel.ethBalances
REF_577(uint256) -> REF_576[1]
REF_577 (->channel) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1161 -> 1162	[key=0,
		edge_type=next,
		label=Next];
	1163	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.erc20Balances[0] = 0

IRs:
REF_578(uint256[4]) -> channel.erc20Balances
REF_579(uint256) \
-> REF_578[0]
REF_579 (->channel) := 0(uint256)",
		node_expression="channel.erc20Balances[0] = 0",
		node_irs="REF_578(uint256[4]) -> channel.erc20Balances
REF_579(uint256) -> REF_578[0]
REF_579 (->channel) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1162 -> 1163	[key=0,
		edge_type=next,
		label=Next];
	1164	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.erc20Balances[1] = 0

IRs:
REF_580(uint256[4]) -> channel.erc20Balances
REF_581(uint256) \
-> REF_580[1]
REF_581 (->channel) := 0(uint256)",
		node_expression="channel.erc20Balances[1] = 0",
		node_irs="REF_580(uint256[4]) -> channel.erc20Balances
REF_581(uint256) -> REF_580[1]
REF_581 (->channel) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1163 -> 1164	[key=0,
		edge_type=next,
		label=Next];
	1165	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: IF

EXPRESSION:
ethbalanceA != 0 || ethbalanceI != 0

IRs:
TMP_305(bool) = ethbalanceA != 0
TMP_306(bool) = ethbalanceI != \
0
TMP_307(bool) = TMP_305 || TMP_306
CONDITION TMP_307",
		node_expression="ethbalanceA != 0 || ethbalanceI != 0",
		node_irs="TMP_305(bool) = ethbalanceA != 0
TMP_306(bool) = ethbalanceI != 0
TMP_307(bool) = TMP_305 || TMP_306
CONDITION TMP_307",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1164 -> 1165	[key=0,
		edge_type=next,
		label=Next];
	1166	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.partyAddresses[0].transfer(ethbalanceA)

IRs:
REF_582(address[2]) -> channel.partyAddresses
\
REF_583(address) -> REF_582[0]
Transfer dest:REF_583 value:ethbalanceA",
		node_expression="channel.partyAddresses[0].transfer(ethbalanceA)",
		node_irs="REF_582(address[2]) -> channel.partyAddresses
REF_583(address) -> REF_582[0]
Transfer dest:REF_583 value:ethbalanceA",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1165 -> 1166	[key=0,
		edge_type=if_true,
		label=True];
	1168	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1165 -> 1168	[key=0,
		edge_type=if_false,
		label=False];
	1167	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.partyAddresses[1].transfer(ethbalanceI)

IRs:
REF_585(address[2]) -> channel.partyAddresses
\
REF_586(address) -> REF_585[1]
Transfer dest:REF_586 value:ethbalanceI",
		node_expression="channel.partyAddresses[1].transfer(ethbalanceI)",
		node_irs="REF_585(address[2]) -> channel.partyAddresses
REF_586(address) -> REF_585[1]
Transfer dest:REF_586 value:ethbalanceI",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1166 -> 1167	[key=0,
		edge_type=next,
		label=Next];
	1167 -> 1168	[key=0,
		edge_type=next,
		label=Next];
	1169	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: IF

EXPRESSION:
tokenbalanceA != 0 || tokenbalanceI != 0

IRs:
TMP_310(bool) = tokenbalanceA != 0
TMP_311(bool) = tokenbalanceI != \
0
TMP_312(bool) = TMP_310 || TMP_311
CONDITION TMP_312",
		node_expression="tokenbalanceA != 0 || tokenbalanceI != 0",
		node_irs="TMP_310(bool) = tokenbalanceA != 0
TMP_311(bool) = tokenbalanceI != 0
TMP_312(bool) = TMP_310 || TMP_311
CONDITION TMP_312",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1168 -> 1169	[key=0,
		edge_type=next,
		label=Next];
	1170	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: \
token transfer failure)

IRs:
REF_588(HumanStandardToken) -> channel.token
REF_590(address[2]) -> channel.partyAddresses
REF_591(\
address) -> REF_590[0]
TMP_313(bool) = HIGH_LEVEL_CALL, dest:REF_588(HumanStandardToken), function:transfer, arguments:['REF_591', '\
tokenbalanceA']  
TMP_314(None) = SOLIDITY_CALL require(bool,string)(TMP_313,byzantineCloseChannel: token transfer failure)",
		node_expression="require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure)",
		node_irs="REF_588(HumanStandardToken) -> channel.token
REF_590(address[2]) -> channel.partyAddresses
REF_591(address) -> REF_590[0]
TMP_313(\
bool) = HIGH_LEVEL_CALL, dest:REF_588(HumanStandardToken), function:transfer, arguments:['REF_591', 'tokenbalanceA']  
TMP_314(None) = \
SOLIDITY_CALL require(bool,string)(TMP_313,byzantineCloseChannel: token transfer failure)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1169 -> 1170	[key=0,
		edge_type=if_true,
		label=True];
	1172	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1169 -> 1172	[key=0,
		edge_type=if_false,
		label=False];
	1171	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: \
token transfer failure)

IRs:
REF_592(HumanStandardToken) -> channel.token
REF_594(address[2]) -> channel.partyAddresses
REF_595(\
address) -> REF_594[1]
TMP_315(bool) = HIGH_LEVEL_CALL, dest:REF_592(HumanStandardToken), function:transfer, arguments:['REF_595', '\
tokenbalanceI']  
TMP_316(None) = SOLIDITY_CALL require(bool,string)(TMP_315,byzantineCloseChannel: token transfer failure)",
		node_expression="require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure)",
		node_irs="REF_592(HumanStandardToken) -> channel.token
REF_594(address[2]) -> channel.partyAddresses
REF_595(address) -> REF_594[1]
TMP_315(\
bool) = HIGH_LEVEL_CALL, dest:REF_592(HumanStandardToken), function:transfer, arguments:['REF_595', 'tokenbalanceI']  
TMP_316(None) = \
SOLIDITY_CALL require(bool,string)(TMP_315,byzantineCloseChannel: token transfer failure)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1170 -> 1171	[key=0,
		edge_type=next,
		label=Next];
	1171 -> 1172	[key=0,
		edge_type=next,
		label=Next];
	1173	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
channel.isOpen = false

IRs:
REF_596(bool) -> channel.isOpen
REF_596 (->channel) := False(bool)",
		node_expression="channel.isOpen = false",
		node_irs="REF_596(bool) -> channel.isOpen
REF_596 (->channel) := False(bool)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1172 -> 1173	[key=0,
		edge_type=next,
		label=Next];
	1174	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
numChannels --

IRs:
TMP_317(uint256) := numChannels(uint256)
numChannels(uint256) = numChannels \
- 1",
		node_expression="numChannels --",
		node_irs="TMP_317(uint256) := numChannels(uint256)
numChannels(uint256) = numChannels - 1",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1173 -> 1174	[key=0,
		edge_type=next,
		label=Next];
	1175	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
DidLCClose(_lcID,channel.sequence,ethbalanceA,ethbalanceI,tokenbalanceA,tokenbalanceI)

IRs:
\
REF_597(uint256) -> channel.sequence
Emit DidLCClose(_lcID.REF_597.ethbalanceA.ethbalanceI.tokenbalanceA.tokenbalanceI)",
		node_expression="DidLCClose(_lcID,channel.sequence,ethbalanceA,ethbalanceI,tokenbalanceA,tokenbalanceI)",
		node_irs="REF_597(uint256) -> channel.sequence
Emit DidLCClose(_lcID.REF_597.ethbalanceA.ethbalanceI.tokenbalanceA.tokenbalanceI)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1174 -> 1175	[key=0,
		edge_type=next,
		label=Next];
	1176	[contract_name=LedgerChannel,
		function_fullname="byzantineCloseChannel(bytes32)",
		label="spank_chain_payment.sol_LedgerChannel_byzantineCloseChannel(bytes32)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1176 -> 1137	[key=0,
		edge_type=next,
		label=Next];
	1177	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	1178	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
cursor = _hash

IRs:
cursor(bytes32) := _hash(bytes32)",
		node_expression="cursor = _hash",
		node_irs="cursor(bytes32) := _hash(bytes32)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1177 -> 1178	[key=0,
		edge_type=next,
		label=Next];
	1179	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: NEW VARIABLE
",
		node_expression=None,
		node_irs=None,
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1178 -> 1179	[key=0,
		edge_type=next,
		label=Next];
	1182	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
i = 64

IRs:
i(uint256) := 64(uint256)",
		node_expression="i = 64",
		node_irs="i(uint256) := 64(uint256)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1179 -> 1182	[key=0,
		edge_type=next,
		label=Next];
	1180	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: BEGIN_LOOP
",
		node_expression=None,
		node_irs=None,
		node_type=BEGIN_LOOP,
		source_file="spank_chain_payment.sol"];
	1183	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: IF_LOOP

EXPRESSION:
i <= _proof.length

IRs:
REF_598 -> LENGTH _proof
TMP_319(bool) = i <= REF_598
CONDITION TMP_319",
		node_expression="i <= _proof.length",
		node_irs="REF_598 -> LENGTH _proof
TMP_319(bool) = i <= REF_598
CONDITION TMP_319",
		node_type=IF_LOOP,
		source_file="spank_chain_payment.sol"];
	1180 -> 1183	[key=0,
		edge_type=next,
		label=Next];
	1181	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: END_LOOP
",
		node_expression=None,
		node_irs=None,
		node_type=END_LOOP,
		source_file="spank_chain_payment.sol"];
	1190	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: RETURN

EXPRESSION:
cursor == _root

IRs:
TMP_325(bool) = cursor == _root
RETURN TMP_325",
		node_expression="cursor == _root",
		node_irs="TMP_325(bool) = cursor == _root
RETURN TMP_325",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	1181 -> 1190	[key=0,
		edge_type=next,
		label=Next];
	1182 -> 1180	[key=0,
		edge_type=next,
		label=Next];
	1183 -> 1181	[key=0,
		edge_type=if_false,
		label=False];
	1184	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: INLINE ASM
",
		node_expression=None,
		node_irs=None,
		node_type="INLINE ASM",
		source_file="spank_chain_payment.sol"];
	1183 -> 1184	[key=0,
		edge_type=if_true,
		label=True];
	1185	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: IF

EXPRESSION:
cursor < proofElem

IRs:
TMP_320(bool) = cursor < proofElem
CONDITION TMP_320",
		node_expression="cursor < proofElem",
		node_irs="TMP_320(bool) = cursor < proofElem
CONDITION TMP_320",
		node_type=IF,
		source_file="spank_chain_payment.sol"];
	1184 -> 1185	[key=0,
		edge_type=next,
		label=Next];
	1186	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
cursor = keccak256()(abi.encodePacked(cursor,proofElem))

IRs:
TMP_321(bytes) = SOLIDITY_CALL \
abi.encodePacked()(cursor,proofElem)
TMP_322(bytes32) = SOLIDITY_CALL keccak256()(TMP_321)
cursor(bytes32) := TMP_322(bytes32)",
		node_expression="cursor = keccak256()(abi.encodePacked(cursor,proofElem))",
		node_irs="TMP_321(bytes) = SOLIDITY_CALL abi.encodePacked()(cursor,proofElem)
TMP_322(bytes32) = SOLIDITY_CALL keccak256()(TMP_321)
cursor(\
bytes32) := TMP_322(bytes32)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1185 -> 1186	[key=0,
		edge_type=if_true,
		label=True];
	1187	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
cursor = keccak256()(abi.encodePacked(proofElem,cursor))

IRs:
TMP_323(bytes) = SOLIDITY_CALL \
abi.encodePacked()(proofElem,cursor)
TMP_324(bytes32) = SOLIDITY_CALL keccak256()(TMP_323)
cursor(bytes32) := TMP_324(bytes32)",
		node_expression="cursor = keccak256()(abi.encodePacked(proofElem,cursor))",
		node_irs="TMP_323(bytes) = SOLIDITY_CALL abi.encodePacked()(proofElem,cursor)
TMP_324(bytes32) = SOLIDITY_CALL keccak256()(TMP_323)
cursor(\
bytes32) := TMP_324(bytes32)",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1185 -> 1187	[key=0,
		edge_type=if_false,
		label=False];
	1188	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="spank_chain_payment.sol"];
	1186 -> 1188	[key=0,
		edge_type=next,
		label=Next];
	1187 -> 1188	[key=0,
		edge_type=next,
		label=Next];
	1189	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="Node Type: EXPRESSION

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32",
		node_expression="i += 32",
		node_irs="i(uint256) = i + 32",
		node_type=EXPRESSION,
		source_file="spank_chain_payment.sol"];
	1188 -> 1189	[key=0,
		edge_type=next,
		label=Next];
	1189 -> 1183	[key=0,
		edge_type=next,
		label=Next];
	1191	[contract_name=LedgerChannel,
		function_fullname="_isContained(bytes32,bytes,bytes32)",
		label="spank_chain_payment.sol_LedgerChannel__isContained(bytes32,bytes,bytes32)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1191 -> 1177	[key=0,
		edge_type=next,
		label=Next];
	1192	[contract_name=LedgerChannel,
		function_fullname="getChannel(bytes32)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	1193	[contract_name=LedgerChannel,
		function_fullname="getChannel(bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
channel = Channels[id]

IRs:
REF_601(LedgerChannel.Channel) -> Channels[id]
channel(LedgerChannel.Channel) := \
REF_601(LedgerChannel.Channel)",
		node_expression="channel = Channels[id]",
		node_irs="REF_601(LedgerChannel.Channel) -> Channels[id]
channel(LedgerChannel.Channel) := REF_601(LedgerChannel.Channel)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1192 -> 1193	[key=0,
		edge_type=next,
		label=Next];
	1194	[contract_name=LedgerChannel,
		function_fullname="getChannel(bytes32)",
		label="Node Type: RETURN

EXPRESSION:
(channel.partyAddresses,channel.ethBalances,channel.erc20Balances,channel.initialDeposit,channel.sequence,\
channel.confirmTime,channel.VCrootHash,channel.LCopenTimeout,channel.updateLCtimeout,channel.isOpen,channel.isUpdateLCSettling,channel.numOpenVC)

\
IRs:
REF_602(address[2]) -> channel.partyAddresses
REF_603(uint256[4]) -> channel.ethBalances
REF_604(uint256[4]) -> channel.erc20Balances
\
REF_605(uint256[2]) -> channel.initialDeposit
REF_606(uint256) -> channel.sequence
REF_607(uint256) -> channel.confirmTime
REF_608(\
bytes32) -> channel.VCrootHash
REF_609(uint256) -> channel.LCopenTimeout
REF_610(uint256) -> channel.updateLCtimeout
REF_611(bool) \
-> channel.isOpen
REF_612(bool) -> channel.isUpdateLCSettling
REF_613(uint256) -> channel.numOpenVC
RETURN REF_602,REF_603,REF_604,\
REF_605,REF_606,REF_607,REF_608,REF_609,REF_610,REF_611,REF_612,REF_613",
		node_expression="(channel.partyAddresses,channel.ethBalances,channel.erc20Balances,channel.initialDeposit,channel.sequence,channel.confirmTime,channel.VCrootHash,\
channel.LCopenTimeout,channel.updateLCtimeout,channel.isOpen,channel.isUpdateLCSettling,channel.numOpenVC)",
		node_irs="REF_602(address[2]) -> channel.partyAddresses
REF_603(uint256[4]) -> channel.ethBalances
REF_604(uint256[4]) -> channel.erc20Balances
\
REF_605(uint256[2]) -> channel.initialDeposit
REF_606(uint256) -> channel.sequence
REF_607(uint256) -> channel.confirmTime
REF_608(\
bytes32) -> channel.VCrootHash
REF_609(uint256) -> channel.LCopenTimeout
REF_610(uint256) -> channel.updateLCtimeout
REF_611(bool) \
-> channel.isOpen
REF_612(bool) -> channel.isUpdateLCSettling
REF_613(uint256) -> channel.numOpenVC
RETURN REF_602,REF_603,REF_604,\
REF_605,REF_606,REF_607,REF_608,REF_609,REF_610,REF_611,REF_612,REF_613",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	1193 -> 1194	[key=0,
		edge_type=next,
		label=Next];
	1195	[contract_name=LedgerChannel,
		function_fullname="getChannel(bytes32)",
		label="spank_chain_payment.sol_LedgerChannel_getChannel(bytes32)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1195 -> 1192	[key=0,
		edge_type=next,
		label=Next];
	1196	[contract_name=LedgerChannel,
		function_fullname="getVirtualChannel(bytes32)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="spank_chain_payment.sol"];
	1197	[contract_name=LedgerChannel,
		function_fullname="getVirtualChannel(bytes32)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
virtualChannel = virtualChannels[id]

IRs:
REF_614(LedgerChannel.VirtualChannel) -> virtualChannels[\
id]
virtualChannel(LedgerChannel.VirtualChannel) := REF_614(LedgerChannel.VirtualChannel)",
		node_expression="virtualChannel = virtualChannels[id]",
		node_irs="REF_614(LedgerChannel.VirtualChannel) -> virtualChannels[id]
virtualChannel(LedgerChannel.VirtualChannel) := REF_614(LedgerChannel.VirtualChannel)",
		node_type="NEW VARIABLE",
		source_file="spank_chain_payment.sol"];
	1196 -> 1197	[key=0,
		edge_type=next,
		label=Next];
	1198	[contract_name=LedgerChannel,
		function_fullname="getVirtualChannel(bytes32)",
		label="Node Type: RETURN

EXPRESSION:
(virtualChannel.isClose,virtualChannel.isInSettlementState,virtualChannel.sequence,virtualChannel.challenger,\
virtualChannel.updateVCtimeout,virtualChannel.partyA,virtualChannel.partyB,virtualChannel.partyI,virtualChannel.ethBalances,virtualChannel.erc20Balances,\
virtualChannel.bond)

IRs:
REF_615(bool) -> virtualChannel.isClose
REF_616(bool) -> virtualChannel.isInSettlementState
REF_617(uint256) \
-> virtualChannel.sequence
REF_618(address) -> virtualChannel.challenger
REF_619(uint256) -> virtualChannel.updateVCtimeout
REF_\
620(address) -> virtualChannel.partyA
REF_621(address) -> virtualChannel.partyB
REF_622(address) -> virtualChannel.partyI
REF_623(\
uint256[2]) -> virtualChannel.ethBalances
REF_624(uint256[2]) -> virtualChannel.erc20Balances
REF_625(uint256[2]) -> virtualChannel.bond
\
RETURN REF_615,REF_616,REF_617,REF_618,REF_619,REF_620,REF_621,REF_622,REF_623,REF_624,REF_625",
		node_expression="(virtualChannel.isClose,virtualChannel.isInSettlementState,virtualChannel.sequence,virtualChannel.challenger,virtualChannel.updateVCtimeout,\
virtualChannel.partyA,virtualChannel.partyB,virtualChannel.partyI,virtualChannel.ethBalances,virtualChannel.erc20Balances,virtualChannel.bond)",
		node_irs="REF_615(bool) -> virtualChannel.isClose
REF_616(bool) -> virtualChannel.isInSettlementState
REF_617(uint256) -> virtualChannel.sequence
\
REF_618(address) -> virtualChannel.challenger
REF_619(uint256) -> virtualChannel.updateVCtimeout
REF_620(address) -> virtualChannel.partyA
\
REF_621(address) -> virtualChannel.partyB
REF_622(address) -> virtualChannel.partyI
REF_623(uint256[2]) -> virtualChannel.ethBalances
\
REF_624(uint256[2]) -> virtualChannel.erc20Balances
REF_625(uint256[2]) -> virtualChannel.bond
RETURN REF_615,REF_616,REF_617,REF_\
618,REF_619,REF_620,REF_621,REF_622,REF_623,REF_624,REF_625",
		node_type=RETURN,
		source_file="spank_chain_payment.sol"];
	1197 -> 1198	[key=0,
		edge_type=next,
		label=Next];
	1199	[contract_name=LedgerChannel,
		function_fullname="getVirtualChannel(bytes32)",
		label="spank_chain_payment.sol_LedgerChannel_getVirtualChannel(bytes32)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1199 -> 1196	[key=0,
		edge_type=next,
		label=Next];
	1200	[contract_name=LedgerChannel,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
numChannels = 0

IRs:
numChannels(uint256) := 0(uint256)",
		node_expression="numChannels = 0",
		node_irs="numChannels(uint256) := 0(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="spank_chain_payment.sol"];
	1201	[contract_name=LedgerChannel,
		function_fullname="slitherConstructorVariables()",
		label="spank_chain_payment.sol_LedgerChannel_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1201 -> 1200	[key=0,
		edge_type=next,
		label=Next];
	1202	[contract_name=LedgerChannel,
		function_fullname="slitherConstructorConstantVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
NAME = Ledger Channel

IRs:
NAME(string) := Ledger Channel(string)",
		node_expression="NAME = Ledger Channel",
		node_irs="NAME(string) := Ledger Channel(string)",
		node_type=OTHER_ENTRYPOINT,
		source_file="spank_chain_payment.sol"];
	1203	[contract_name=LedgerChannel,
		function_fullname="slitherConstructorConstantVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
VERSION = 0.0.1

IRs:
VERSION(string) := 0.0.1(string)",
		node_expression="VERSION = 0.0.1",
		node_irs="VERSION(string) := 0.0.1(string)",
		node_type=OTHER_ENTRYPOINT,
		source_file="spank_chain_payment.sol"];
	1202 -> 1203	[key=0,
		edge_type=next,
		label=Next];
	1204	[contract_name=LedgerChannel,
		function_fullname="slitherConstructorConstantVariables()",
		label="spank_chain_payment.sol_LedgerChannel_slitherConstructorConstantVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="spank_chain_payment.sol"];
	1204 -> 1202	[key=0,
		edge_type=next,
		label=Next];
	1205	[contract_name=PrivateBank,
		function_fullname="PrivateBank(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1206	[contract_name=PrivateBank,
		function_fullname="PrivateBank(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog = Log(_lib)

IRs:
TMP_0 = CONVERT _lib to Log
TransferLog(Log) := TMP_0(Log)",
		node_expression="TransferLog = Log(_lib)",
		node_irs="TMP_0 = CONVERT _lib to Log
TransferLog(Log) := TMP_0(Log)",
		node_type=EXPRESSION,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1205 -> 1206	[key=0,
		edge_type=next,
		label=Next];
	1207	[contract_name=PrivateBank,
		function_fullname="PrivateBank(address)",
		label="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol_PrivateBank_PrivateBank(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1207 -> 1205	[key=0,
		edge_type=next,
		label=Next];
	1208	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1209	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="Node Type: IF

EXPRESSION:
msg.value >= MinDeposit

IRs:
TMP_1(bool) = msg.value >= MinDeposit
CONDITION TMP_1",
		node_expression="msg.value >= MinDeposit",
		node_irs="TMP_1(bool) = msg.value >= MinDeposit
CONDITION TMP_1",
		node_type=IF,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1208 -> 1209	[key=0,
		edge_type=next,
		label=Next];
	1210	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1209 -> 1210	[key=0,
		edge_type=if_true,
		label=True];
	1212	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1209 -> 1212	[key=0,
		edge_type=if_false,
		label=False];
	1211	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,msg.value,Deposit)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(\
Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_expression="TransferLog.AddMessage(msg.sender,msg.value,Deposit)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_type=EXPRESSION,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1210 -> 1211	[key=0,
		edge_type=next,
		label=Next];
	1211 -> 1212	[key=0,
		edge_type=next,
		label=Next];
	1213	[contract_name=PrivateBank,
		function_fullname="Deposit()",
		label="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol_PrivateBank_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1213 -> 1208	[key=0,
		edge_type=next,
		label=Next];
	1214	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1215	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
_am <= balances[msg.sender]

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_3(bool) = _am <= REF_2
CONDITION \
TMP_3",
		node_expression="_am <= balances[msg.sender]",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_3(bool) = _am <= REF_2
CONDITION TMP_3",
		node_type=IF,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1214 -> 1215	[key=0,
		edge_type=next,
		label=Next];
	1216	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_5(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_5",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_5(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_5",
		node_type=IF,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1215 -> 1216	[key=0,
		edge_type=if_true,
		label=True];
	1220	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1215 -> 1220	[key=0,
		edge_type=if_false,
		label=False];
	1217	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = \
REF_5 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - _am",
		node_type=EXPRESSION,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1216 -> 1217	[key=0,
		edge_type=if_true,
		label=True];
	1219	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1216 -> 1219	[key=0,
		edge_type=if_false,
		label=False];
	1218	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,_am,CashOut)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(Log), \
function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_expression="TransferLog.AddMessage(msg.sender,_am,CashOut)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_type=EXPRESSION,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1217 -> 1218	[key=0,
		edge_type=next,
		label=Next];
	1218 -> 1219	[key=0,
		edge_type=next,
		label=Next];
	1219 -> 1220	[key=0,
		edge_type=next,
		label=Next];
	1221	[contract_name=PrivateBank,
		function_fullname="CashOut(uint256)",
		label="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol_PrivateBank_CashOut(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1221 -> 1214	[key=0,
		edge_type=next,
		label=Next];
	1222	[contract_name=PrivateBank,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1223	[contract_name=PrivateBank,
		function_fullname="fallback()",
		label="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol_PrivateBank_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1223 -> 1222	[key=0,
		edge_type=next,
		label=Next];
	1224	[contract_name=PrivateBank,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinDeposit = 1000000000000000000

IRs:
MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_expression="MinDeposit = 1000000000000000000",
		node_irs="MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1225	[contract_name=PrivateBank,
		function_fullname="slitherConstructorVariables()",
		label="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol_PrivateBank_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1225 -> 1224	[key=0,
		edge_type=next,
		label=Next];
	1226	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1227	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1226 -> 1227	[key=0,
		edge_type=next,
		label=Next];
	1228	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1227 -> 1228	[key=0,
		edge_type=next,
		label=Next];
	1229	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1228 -> 1229	[key=0,
		edge_type=next,
		label=Next];
	1230	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1229 -> 1230	[key=0,
		edge_type=next,
		label=Next];
	1231	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_12 -> LENGTH History
TMP_8(uint256) := REF_12(uint256)
TMP_9(\
uint256) = TMP_8 + 1
REF_12 (->History) := TMP_9(uint256)
REF_13(Log.Message) -> History[TMP_8]
REF_13 (->History) := LastMsg(Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_12 -> LENGTH History
TMP_8(uint256) := REF_12(uint256)
TMP_9(uint256) = TMP_8 + 1
REF_12 (->History) := TMP_9(uint256)
REF_13(\
Log.Message) -> History[TMP_8]
REF_13 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1230 -> 1231	[key=0,
		edge_type=next,
		label=Next];
	1232	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol"];
	1232 -> 1226	[key=0,
		edge_type=next,
		label=Next];
	1233	[contract_name=ETH_VAULT,
		function_fullname="ETH_VAULT(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1234	[contract_name=ETH_VAULT,
		function_fullname="ETH_VAULT(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog = Log(_log)

IRs:
TMP_0 = CONVERT _log to Log
TransferLog(Log) := TMP_0(Log)",
		node_expression="TransferLog = Log(_log)",
		node_irs="TMP_0 = CONVERT _log to Log
TransferLog(Log) := TMP_0(Log)",
		node_type=EXPRESSION,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1233 -> 1234	[key=0,
		edge_type=next,
		label=Next];
	1235	[contract_name=ETH_VAULT,
		function_fullname="ETH_VAULT(address)",
		label="0x8c7777c45481dba411450c228cb692ac3d550344.sol_ETH_VAULT_ETH_VAULT(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1235 -> 1233	[key=0,
		edge_type=next,
		label=Next];
	1236	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1237	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="Node Type: IF

EXPRESSION:
msg.value > MinDeposit

IRs:
TMP_1(bool) = msg.value > MinDeposit
CONDITION TMP_1",
		node_expression="msg.value > MinDeposit",
		node_irs="TMP_1(bool) = msg.value > MinDeposit
CONDITION TMP_1",
		node_type=IF,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1236 -> 1237	[key=0,
		edge_type=next,
		label=Next];
	1238	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = \
REF_0 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1237 -> 1238	[key=0,
		edge_type=if_true,
		label=True];
	1240	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1237 -> 1240	[key=0,
		edge_type=if_false,
		label=False];
	1239	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,msg.value,Deposit)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(\
Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_expression="TransferLog.AddMessage(msg.sender,msg.value,Deposit)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', 'msg.value', 'Deposit']  ",
		node_type=EXPRESSION,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1238 -> 1239	[key=0,
		edge_type=next,
		label=Next];
	1239 -> 1240	[key=0,
		edge_type=next,
		label=Next];
	1241	[contract_name=ETH_VAULT,
		function_fullname="Deposit()",
		label="0x8c7777c45481dba411450c228cb692ac3d550344.sol_ETH_VAULT_Deposit()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1241 -> 1236	[key=0,
		edge_type=next,
		label=Next];
	1242	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1243	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
_am <= balances[msg.sender]

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_3(bool) = _am <= REF_2
CONDITION \
TMP_3",
		node_expression="_am <= balances[msg.sender]",
		node_irs="REF_2(uint256) -> balances[msg.sender]
TMP_3(bool) = _am <= REF_2
CONDITION TMP_3",
		node_type=IF,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1242 -> 1243	[key=0,
		edge_type=next,
		label=Next];
	1244	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: IF

EXPRESSION:
msg.sender.call.value(_am)()

IRs:
TMP_5(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] \
value:_am 
CONDITION TMP_5",
		node_expression="msg.sender.call.value(_am)()",
		node_irs="TMP_5(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_am 
CONDITION TMP_5",
		node_type=IF,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1243 -> 1244	[key=0,
		edge_type=if_true,
		label=True];
	1248	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1243 -> 1248	[key=0,
		edge_type=if_false,
		label=False];
	1245	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] -= _am

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = \
REF_5 - _am",
		node_expression="balances[msg.sender] -= _am",
		node_irs="REF_5(uint256) -> balances[msg.sender]
REF_5(-> balances) = REF_5 - _am",
		node_type=EXPRESSION,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1244 -> 1245	[key=0,
		edge_type=if_true,
		label=True];
	1247	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1244 -> 1247	[key=0,
		edge_type=if_false,
		label=False];
	1246	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
TransferLog.AddMessage(msg.sender,_am,CashOut)

IRs:
HIGH_LEVEL_CALL, dest:TransferLog(Log), \
function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_expression="TransferLog.AddMessage(msg.sender,_am,CashOut)",
		node_irs="HIGH_LEVEL_CALL, dest:TransferLog(Log), function:AddMessage, arguments:['msg.sender', '_am', 'CashOut']  ",
		node_type=EXPRESSION,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1245 -> 1246	[key=0,
		edge_type=next,
		label=Next];
	1246 -> 1247	[key=0,
		edge_type=next,
		label=Next];
	1247 -> 1248	[key=0,
		edge_type=next,
		label=Next];
	1249	[contract_name=ETH_VAULT,
		function_fullname="CashOut(uint256)",
		label="0x8c7777c45481dba411450c228cb692ac3d550344.sol_ETH_VAULT_CashOut(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1249 -> 1242	[key=0,
		edge_type=next,
		label=Next];
	1250	[contract_name=ETH_VAULT,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1251	[contract_name=ETH_VAULT,
		function_fullname="fallback()",
		label="0x8c7777c45481dba411450c228cb692ac3d550344.sol_ETH_VAULT_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1251 -> 1250	[key=0,
		edge_type=next,
		label=Next];
	1252	[contract_name=ETH_VAULT,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
MinDeposit = 1000000000000000000

IRs:
MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_expression="MinDeposit = 1000000000000000000",
		node_irs="MinDeposit(uint256) := 1000000000000000000(uint256)",
		node_type=OTHER_ENTRYPOINT,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1253	[contract_name=ETH_VAULT,
		function_fullname="slitherConstructorVariables()",
		label="0x8c7777c45481dba411450c228cb692ac3d550344.sol_ETH_VAULT_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1253 -> 1252	[key=0,
		edge_type=next,
		label=Next];
	1254	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1255	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Sender = _adr

IRs:
REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_expression="LastMsg.Sender = _adr",
		node_irs="REF_7(address) -> LastMsg.Sender
REF_7 (->LastMsg) := _adr(address)",
		node_type=EXPRESSION,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1254 -> 1255	[key=0,
		edge_type=next,
		label=Next];
	1256	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Time = now

IRs:
REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_expression="LastMsg.Time = now",
		node_irs="REF_8(uint256) -> LastMsg.Time
REF_8 (->LastMsg) := now(uint256)",
		node_type=EXPRESSION,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1255 -> 1256	[key=0,
		edge_type=next,
		label=Next];
	1257	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Val = _val

IRs:
REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_expression="LastMsg.Val = _val",
		node_irs="REF_9(uint256) -> LastMsg.Val
REF_9 (->LastMsg) := _val(uint256)",
		node_type=EXPRESSION,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1256 -> 1257	[key=0,
		edge_type=next,
		label=Next];
	1258	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
LastMsg.Data = _data

IRs:
REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_expression="LastMsg.Data = _data",
		node_irs="REF_10(string) -> LastMsg.Data
REF_10 (->LastMsg) := _data(string)",
		node_type=EXPRESSION,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1257 -> 1258	[key=0,
		edge_type=next,
		label=Next];
	1259	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="Node Type: EXPRESSION

EXPRESSION:
History.push(LastMsg)

IRs:
REF_12 -> LENGTH History
TMP_8(uint256) := REF_12(uint256)
TMP_9(\
uint256) = TMP_8 + 1
REF_12 (->History) := TMP_9(uint256)
REF_13(Log.Message) -> History[TMP_8]
REF_13 (->History) := LastMsg(Log.Message)",
		node_expression="History.push(LastMsg)",
		node_irs="REF_12 -> LENGTH History
TMP_8(uint256) := REF_12(uint256)
TMP_9(uint256) = TMP_8 + 1
REF_12 (->History) := TMP_9(uint256)
REF_13(\
Log.Message) -> History[TMP_8]
REF_13 (->History) := LastMsg(Log.Message)",
		node_type=EXPRESSION,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1258 -> 1259	[key=0,
		edge_type=next,
		label=Next];
	1260	[contract_name=Log,
		function_fullname="AddMessage(address,uint256,string)",
		label="0x8c7777c45481dba411450c228cb692ac3d550344.sol_Log_AddMessage(address,uint256,string)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="0x8c7777c45481dba411450c228cb692ac3d550344.sol"];
	1260 -> 1254	[key=0,
		edge_type=next,
		label=Next];
	1261	[contract_name=SimpleDAO,
		function_fullname="donate(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="simple_dao.sol"];
	1262	[contract_name=SimpleDAO,
		function_fullname="donate(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
credit[to] += msg.value

IRs:
REF_0(uint256) -> credit[to]
REF_0(-> credit) = REF_0 + msg.value",
		node_expression="credit[to] += msg.value",
		node_irs="REF_0(uint256) -> credit[to]
REF_0(-> credit) = REF_0 + msg.value",
		node_type=EXPRESSION,
		source_file="simple_dao.sol"];
	1261 -> 1262	[key=0,
		edge_type=next,
		label=Next];
	1263	[contract_name=SimpleDAO,
		function_fullname="donate(address)",
		label="simple_dao.sol_SimpleDAO_donate(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="simple_dao.sol"];
	1263 -> 1261	[key=0,
		edge_type=next,
		label=Next];
	1264	[contract_name=SimpleDAO,
		function_fullname="withdraw(uint256)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="simple_dao.sol"];
	1265	[contract_name=SimpleDAO,
		function_fullname="withdraw(uint256)",
		label="Node Type: IF

EXPRESSION:
credit[msg.sender] >= amount

IRs:
REF_1(uint256) -> credit[msg.sender]
TMP_0(bool) = REF_1 >= amount
\
CONDITION TMP_0",
		node_expression="credit[msg.sender] >= amount",
		node_irs="REF_1(uint256) -> credit[msg.sender]
TMP_0(bool) = REF_1 >= amount
CONDITION TMP_0",
		node_type=IF,
		source_file="simple_dao.sol"];
	1264 -> 1265	[key=0,
		edge_type=next,
		label=Next];
	1266	[contract_name=SimpleDAO,
		function_fullname="withdraw(uint256)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
res = msg.sender.call.value(amount)()

IRs:
TMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, \
function:call, arguments:[] value:amount 
res(bool) := TMP_2(bool)",
		node_expression="res = msg.sender.call.value(amount)()",
		node_irs="TMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:amount 
res(bool) := TMP_2(bool)",
		node_type="NEW VARIABLE",
		source_file="simple_dao.sol"];
	1265 -> 1266	[key=0,
		edge_type=if_true,
		label=True];
	1268	[contract_name=SimpleDAO,
		function_fullname="withdraw(uint256)",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF,
		source_file="simple_dao.sol"];
	1265 -> 1268	[key=0,
		edge_type=if_false,
		label=False];
	1267	[contract_name=SimpleDAO,
		function_fullname="withdraw(uint256)",
		label="Node Type: EXPRESSION

EXPRESSION:
credit[msg.sender] -= amount

IRs:
REF_4(uint256) -> credit[msg.sender]
REF_4(-> credit) = REF_\
4 - amount",
		node_expression="credit[msg.sender] -= amount",
		node_irs="REF_4(uint256) -> credit[msg.sender]
REF_4(-> credit) = REF_4 - amount",
		node_type=EXPRESSION,
		source_file="simple_dao.sol"];
	1266 -> 1267	[key=0,
		edge_type=next,
		label=Next];
	1267 -> 1268	[key=0,
		edge_type=next,
		label=Next];
	1269	[contract_name=SimpleDAO,
		function_fullname="withdraw(uint256)",
		label="simple_dao.sol_SimpleDAO_withdraw(uint256)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="simple_dao.sol"];
	1269 -> 1264	[key=0,
		edge_type=next,
		label=Next];
	1270	[contract_name=SimpleDAO,
		function_fullname="queryCredit(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="simple_dao.sol"];
	1271	[contract_name=SimpleDAO,
		function_fullname="queryCredit(address)",
		label="Node Type: RETURN

EXPRESSION:
credit[to]

IRs:
REF_5(uint256) -> credit[to]
RETURN REF_5",
		node_expression="credit[to]",
		node_irs="REF_5(uint256) -> credit[to]
RETURN REF_5",
		node_type=RETURN,
		source_file="simple_dao.sol"];
	1270 -> 1271	[key=0,
		edge_type=next,
		label=Next];
	1272	[contract_name=SimpleDAO,
		function_fullname="queryCredit(address)",
		label="simple_dao.sol_SimpleDAO_queryCredit(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="simple_dao.sol"];
	1272 -> 1270	[key=0,
		edge_type=next,
		label=Next];
	1273	[contract_name=Reentrancy_bonus,
		function_fullname="withdrawReward(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrancy_bonus.sol"];
	1274	[contract_name=Reentrancy_bonus,
		function_fullname="withdrawReward(address)",
		label="Node Type: NEW VARIABLE

EXPRESSION:
amountToWithdraw = rewardsForA[recipient]

IRs:
REF_0(uint256) -> rewardsForA[recipient]
amountToWithdraw(\
uint256) := REF_0(uint256)",
		node_expression="amountToWithdraw = rewardsForA[recipient]",
		node_irs="REF_0(uint256) -> rewardsForA[recipient]
amountToWithdraw(uint256) := REF_0(uint256)",
		node_type="NEW VARIABLE",
		source_file="reentrancy_bonus.sol"];
	1273 -> 1274	[key=0,
		edge_type=next,
		label=Next];
	1275	[contract_name=Reentrancy_bonus,
		function_fullname="withdrawReward(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
rewardsForA[recipient] = 0

IRs:
REF_1(uint256) -> rewardsForA[recipient]
REF_1 (->rewardsForA) := \
0(uint256)",
		node_expression="rewardsForA[recipient] = 0",
		node_irs="REF_1(uint256) -> rewardsForA[recipient]
REF_1 (->rewardsForA) := 0(uint256)",
		node_type=EXPRESSION,
		source_file="reentrancy_bonus.sol"];
	1274 -> 1275	[key=0,
		edge_type=next,
		label=Next];
	1276	[contract_name=Reentrancy_bonus,
		function_fullname="withdrawReward(address)",
		label="Node Type: NEW VARIABLE
",
		node_expression=None,
		node_irs=None,
		node_type="NEW VARIABLE",
		source_file="reentrancy_bonus.sol"];
	1275 -> 1276	[key=0,
		edge_type=next,
		label=Next];
	1277	[contract_name=Reentrancy_bonus,
		function_fullname="withdrawReward(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
(success) = recipient.call.value(amountToWithdraw)()

IRs:
TMP_1(bool) = LOW_LEVEL_CALL, dest:\
recipient, function:call, arguments:[''] value:amountToWithdraw 
success(bool) := TMP_1(bool)",
		node_expression="(success) = recipient.call.value(amountToWithdraw)()",
		node_irs="TMP_1(bool) = LOW_LEVEL_CALL, dest:recipient, function:call, arguments:[''] value:amountToWithdraw 
success(bool) := TMP_1(bool)",
		node_type=EXPRESSION,
		source_file="reentrancy_bonus.sol"];
	1276 -> 1277	[key=0,
		edge_type=next,
		label=Next];
	1278	[contract_name=Reentrancy_bonus,
		function_fullname="withdrawReward(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(success)

IRs:
TMP_2(None) = SOLIDITY_CALL require(bool)(success)",
		node_expression="require(bool)(success)",
		node_irs="TMP_2(None) = SOLIDITY_CALL require(bool)(success)",
		node_type=EXPRESSION,
		source_file="reentrancy_bonus.sol"];
	1277 -> 1278	[key=0,
		edge_type=next,
		label=Next];
	1279	[contract_name=Reentrancy_bonus,
		function_fullname="withdrawReward(address)",
		label="reentrancy_bonus.sol_Reentrancy_bonus_withdrawReward(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrancy_bonus.sol"];
	1279 -> 1273	[key=0,
		edge_type=next,
		label=Next];
	1280	[contract_name=Reentrancy_bonus,
		function_fullname="getFirstWithdrawalBonus(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT,
		source_file="reentrancy_bonus.sol"];
	1281	[contract_name=Reentrancy_bonus,
		function_fullname="getFirstWithdrawalBonus(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(! claimedBonus[recipient])

IRs:
REF_4(bool) -> claimedBonus[recipient]
TMP_3 = ! \
REF_4 
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)",
		node_expression="require(bool)(! claimedBonus[recipient])",
		node_irs="REF_4(bool) -> claimedBonus[recipient]
TMP_3 = ! REF_4 
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)",
		node_type=EXPRESSION,
		source_file="reentrancy_bonus.sol"];
	1280 -> 1281	[key=0,
		edge_type=next,
		label=Next];
	1282	[contract_name=Reentrancy_bonus,
		function_fullname="getFirstWithdrawalBonus(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
rewardsForA[recipient] += 100

IRs:
REF_5(uint256) -> rewardsForA[recipient]
REF_5(-> rewardsForA) = \
REF_5 + 100",
		node_expression="rewardsForA[recipient] += 100",
		node_irs="REF_5(uint256) -> rewardsForA[recipient]
REF_5(-> rewardsForA) = REF_5 + 100",
		node_type=EXPRESSION,
		source_file="reentrancy_bonus.sol"];
	1281 -> 1282	[key=0,
		edge_type=next,
		label=Next];
	1283	[contract_name=Reentrancy_bonus,
		function_fullname="getFirstWithdrawalBonus(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
withdrawReward(recipient)

IRs:
INTERNAL_CALL, Reentrancy_bonus.withdrawReward(address)(recipient)",
		node_expression="withdrawReward(recipient)",
		node_irs="INTERNAL_CALL, Reentrancy_bonus.withdrawReward(address)(recipient)",
		node_type=EXPRESSION,
		source_file="reentrancy_bonus.sol"];
	1282 -> 1283	[key=0,
		edge_type=next,
		label=Next];
	1284	[contract_name=Reentrancy_bonus,
		function_fullname="getFirstWithdrawalBonus(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
claimedBonus[recipient] = true

IRs:
REF_6(bool) -> claimedBonus[recipient]
REF_6 (->claimedBonus) := \
True(bool)",
		node_expression="claimedBonus[recipient] = true",
		node_irs="REF_6(bool) -> claimedBonus[recipient]
REF_6 (->claimedBonus) := True(bool)",
		node_type=EXPRESSION,
		source_file="reentrancy_bonus.sol"];
	1283 -> 1284	[key=0,
		edge_type=next,
		label=Next];
	1285	[contract_name=Reentrancy_bonus,
		function_fullname="getFirstWithdrawalBonus(address)",
		label="reentrancy_bonus.sol_Reentrancy_bonus_getFirstWithdrawalBonus(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME,
		source_file="reentrancy_bonus.sol"];
	1285 -> 1280	[key=0,
		edge_type=next,
		label=Next];
}
