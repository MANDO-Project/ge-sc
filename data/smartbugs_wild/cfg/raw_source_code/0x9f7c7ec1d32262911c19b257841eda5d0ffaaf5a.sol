{"ERC20.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * Open Zeppelin ERC20 implementation. https://github.com/OpenZeppelin/openzeppelin-solidity/tree/master/contracts/token/ERC20\n */\n\n/**\n * @dev Implementation of the `IERC20` interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using `_mint`.\n * For a generic mechanism see `ERC20Mintable`.\n *\n * *For a detailed writeup see our guide [How to implement supply\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See `IERC20.approve`.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address =\u003e uint256) private _balances;\n\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destoys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller\u0027s allowance.\n     *\n     * See `_burn` and `_approve`.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}"},"IERC20.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * Open Zeppelin ERC20 implementation. https://github.com/OpenZeppelin/openzeppelin-solidity/tree/master/contracts/token/ERC20\n */\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * \u003e Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * Open Zeppelin SafeMath implementation. https://github.com/OpenZeppelin/openzeppelin-solidity/tree/master/contracts/math\n */\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}"},"SmartInvoice.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\n\ncontract SmartInvoice {\n    enum Status { UNCOMMITTED, COMMITTED, SETTLED }\n    function getStatusString(Status status)\n    public\n    pure\n    returns (string memory)\n    {\n        if (Status.UNCOMMITTED == status) {\n            return \"UNCOMMITTED\";\n        }\n        if (Status.COMMITTED == status) {\n            return \"COMMITTED\";\n        }\n        if (Status.SETTLED == status) {\n            return \"SETTLED\";\n        }\n        return \"ERROR\";\n    }\n\n    uint256 public amount;\n    uint256 public dueDate;\n    IERC20 public assetToken;\n    address public beneficiary;\n    address public payer;\n    string public referenceHash;\n\n    Status  public status;\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor(uint256 _amount,\n                uint256 _dueDate,\n                IERC20 _assetToken,\n                address _beneficiary,\n                address _payer,\n                string memory _referenceHash) public {\n        require(_beneficiary != address(0), \"beneficiary cannot be 0x0\");\n        require(_payer != address(0), \"payer cannot be 0x0\");\n        amount = _amount;\n        dueDate = _dueDate;\n        assetToken = _assetToken;\n        beneficiary = _beneficiary;\n        payer = _payer;\n        referenceHash = _referenceHash;\n\n        status = Status.UNCOMMITTED;\n    }\n\n    function changeBeneficiary(address _newBeneficiary) public returns (bool) {\n        require(msg.sender == beneficiary, \"caller not current beneficiary\");\n        require(_newBeneficiary != address(0), \"new beneficiary cannot be 0x0\");\n        require(status != Status.SETTLED, \"can not change beneficiary after settlement\");\n        beneficiary = _newBeneficiary;\n        return true;\n    }\n\n    function commit() public returns (bool) {\n        require(msg.sender == payer, \"only payer can commit to settle\");\n        require(status == Status.UNCOMMITTED, \"can only commit while status in UNCOMMITTED\");\n        status = Status.COMMITTED;\n        return true;\n    }\n\n    function settle() public returns (bool) {\n        require(msg.sender == payer, \"only payer can settle\");\n        require(status != Status.SETTLED, \"already settled\");\n        require(now \u003e= dueDate, \"can only settle after due date\");\n        require(assetToken.transferFrom(payer, beneficiary, amount), \"could not complete transfer\");\n        status = Status.SETTLED;\n        return true;\n    }\n\n}\n\n"},"SmartInvoiceToken.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./ERC20.sol\";\nimport \"./SmartInvoice.sol\";\n\n/**\n * @title SmartInvoiceToken\n */\ncontract SmartInvoiceToken is ERC20 {\n\n    SmartInvoice public smartInvoice;\n\n    constructor(uint256 _amount,\n                uint256 _dueDate,\n                IERC20 _assetToken,\n                address _beneficiary,\n                address _payer,\n                string memory _referenceHash) public {\n        smartInvoice = new SmartInvoice(_amount, _dueDate, _assetToken, address(this), _payer, _referenceHash);\n        _mint(_beneficiary, smartInvoice.amount());\n    }\n\n    function canRedeem() public view returns (bool) {\n        return smartInvoice.status() == SmartInvoice.Status.SETTLED;\n    }\n\n    function redeem(uint256 amount) public returns (bool) {\n        require(canRedeem(), \"Can only redeem after settlement\");\n        require(smartInvoice.assetToken().transfer(msg.sender, amount), \"smartInvoice uses different asset token\");\n        //note the internal _burn function will fail if not enough tokens to burn\n        _burn(msg.sender, amount);\n        return true;\n    }\n\n}\n"},"SmartInvoiceWallet.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"./SmartInvoice.sol\";\nimport \"./SmartInvoiceToken.sol\";\n\ncontract SmartInvoiceWallet {\n  using SafeMath for uint256;\n\n  address public owner;\n  IERC20 public assetToken;\n\n  //internal book keeping. Needed so that we only pay invoices we know we explicitly committed to pay\n  mapping(address =\u003e SmartInvoice.Status) private _smartInvoiceStatus;\n\n  modifier isOwner() {\n    require(msg.sender == owner, \"not owner\");\n    _;\n  }\n\n  constructor(address _owner, IERC20 _assetToken) public {\n    require(_owner != address(0), \"owner can not be 0x0\");\n    require(address(_assetToken) != address(0), \"asset token can not be 0x0\");\n    owner = _owner;\n    assetToken = _assetToken;\n  }\n\n  function () external payable {\n    require(false, \"Eth transfers not allowed\");\n  }\n\n  function balance() public view returns (uint256) {\n    return this.assetToken().balanceOf(address(this));\n  }\n\n  function transfer(address to, uint256 value) external isOwner returns (bool) {\n    return this.assetToken().transfer(to, value);\n  }\n\n  function invoiceTokenTransfer(SmartInvoiceToken smartInvoiceToken, address to, uint256 value) external isOwner  returns (bool) {\n    return smartInvoiceToken.transfer(to, value);\n  }\n\n  function invoiceTokenBalance(SmartInvoiceToken smartInvoiceToken) public view returns (uint256) {\n    require(smartInvoiceToken.smartInvoice().assetToken() == this.assetToken(), \"smartInvoice uses different asset token\");\n\n    return smartInvoiceToken.balanceOf(address(this));\n  }\n\n  function invoiceTokenBalanceSum(SmartInvoiceToken[] memory smartInvoiceTokens) public view returns (uint256) {\n    uint256 total = 0;\n    for (uint32 index = 0; index \u003c smartInvoiceTokens.length; index++) {\n      require(smartInvoiceTokens[index].smartInvoice().assetToken() == this.assetToken(), \"smartInvoice uses different asset token\");\n      total = total.add(smartInvoiceTokens[index].balanceOf(address(this)));\n    }\n    return total;\n  }\n\n  //Note: owner (or their advocate) is expected to have audited what they commit to,\n  // including confidence that the terms are guaranteed not to change. i.e. the smartInvoice is trusted\n  function commit(SmartInvoice smartInvoice) external isOwner  returns (bool) {\n    require(smartInvoice.payer() == address(this), \"not smart invoice payer\");\n    require(smartInvoice.status() == SmartInvoice.Status.UNCOMMITTED, \"smart invoice already committed\");\n    require(smartInvoice.assetToken() == this.assetToken(), \"smartInvoice uses different asset token\");\n    require(smartInvoice.commit(), \"could not commit\");\n    require(smartInvoice.status() == SmartInvoice.Status.COMMITTED, \"commit did not update status\");\n    _smartInvoiceStatus[address(smartInvoice)] = SmartInvoice.Status.COMMITTED;\n    return true;\n  }\n\n  function hasValidCommit(SmartInvoice smartInvoice) public view returns (bool) {\n    return smartInvoice.payer() == address(this)\n        \u0026\u0026 smartInvoice.status() == SmartInvoice.Status.COMMITTED\n        \u0026\u0026 _smartInvoiceStatus[address(smartInvoice)] == SmartInvoice.Status.COMMITTED;\n  }\n\n  function canSettleSmartInvoice(SmartInvoice smartInvoice) public view returns (bool) {\n    return hasValidCommit(smartInvoice)\n        \u0026\u0026 now \u003e= smartInvoice.dueDate();\n  }\n\n  function settle(SmartInvoice smartInvoice) external returns (bool) {\n    require(canSettleSmartInvoice(smartInvoice), \"settle not valid\");\n    require(assetToken.approve(address(smartInvoice), smartInvoice.amount()), \"approve failed\");\n    require(smartInvoice.settle(), \"settle smart invoice failed\");\n    require(smartInvoice.status() == SmartInvoice.Status.SETTLED, \"settle did not update status\");\n    _smartInvoiceStatus[address(smartInvoice)] = SmartInvoice.Status.SETTLED;\n    return true;\n  }\n\n  function redeem(SmartInvoiceToken smartInvoiceToken) external isOwner returns (bool) {\n    require(smartInvoiceToken.canRedeem(), \"redeem not valid\");\n    require(smartInvoiceToken.smartInvoice().assetToken() == this.assetToken(), \"smartInvoice uses different asset token\");\n    uint256 amount = this.invoiceTokenBalance(smartInvoiceToken);\n    require(smartInvoiceToken.redeem(amount), \"redeem smart invoice failed\");\n    return true;\n  }\n}\n\n"}}