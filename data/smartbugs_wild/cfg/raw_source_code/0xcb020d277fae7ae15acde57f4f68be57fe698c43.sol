{"WisdomMapping - 副本.sol":{"content":"pragma solidity ^0.4.24;\n \ncontract owned {\n    address public owner;\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner {\n        require(msg.sender == owner, \"\");\n        _;\n    }\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}\n\ncontract WisdomMapping is owned {\n    struct User {\n        string newAddr;\n        bool bUpdate;\n    }\n\n    struct isExist{\n    \tbool exist;\n    }\n\n    mapping (address =\u003e User) private wdc_mapping;\n    mapping (string =\u003e isExist) private main_address;\n    bool isFrozen;\n    address[] addarray; \n    uint[] lengths;\n\n\n\n    constructor() public {\n        isFrozen = false;\n    }\n\n    //获取长度\n    function getlength() public view returns (uint len){\n        return addarray.length;\n    }\n\n    //获取所有eth地址\n    function getethAddress(uint les) public view returns (address ethAddr){\n        return addarray[les];\n    }\n\n    //主网地址是否添加\n    function mainisExist(string newAddr) public view returns (bool exist){\n        return main_address[newAddr].exist;\n    }\n\n    function register(string newAddr) public  {\n\trequire(isFrozen == false);\n\trequire(wdc_mapping[msg.sender].bUpdate == false);\n\trequire(main_address[newAddr].exist == false);\n\twdc_mapping[msg.sender].newAddr = newAddr;\n\twdc_mapping[msg.sender].bUpdate = true;\n\taddarray.push(msg.sender);\n\tmain_address[newAddr].exist = true;\n    }\n\n\n    function freeze(bool bFreeze) public onlyOwner {\n        isFrozen = bFreeze;\n    }\n\n    //查询合约是否冻结\n    function isfreeze() public view returns (bool bFreeze) {\n\treturn isFrozen;\n    }\n\n   //查询映射记录\n    function getUserInfo(address ethAddr) public view returns(string) {\n        return (wdc_mapping[ethAddr].newAddr);\n    }\n\n    //查询是否有映射记录\n    function ethisflag(address ethAddr) public view returns (bool bUpdate){\n        return wdc_mapping[ethAddr].bUpdate;\n    }\n\n\n //查询数据\n    function selectOne(address ethAddr) public view returns (string){\n        return (wdc_mapping[ethAddr].newAddr);\n    }\n}\n"},"WisdomMapping.sol":{"content":"pragma solidity ^0.4.24;\n \ncontract owned {\n    address public owner;\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner {\n        require(msg.sender == owner, \"\");\n        _;\n    }\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}\n\ncontract WisdomMapping is owned {\n    struct User {\n        string newAddr;\n        bool bUpdate;\n    }\n\n    struct isExist{\n    \tbool exist;\n    }\n\n    mapping (address =\u003e User) private wdc_mapping;\n    mapping (string =\u003e isExist) private main_address;\n    bool isFrozen;\n    address[] addarray; \n    uint[] lengths;\n\n\n\n    constructor() public {\n        isFrozen = false;\n    }\n\n    //获取长度\n    function getlength() public view returns (uint len){\n        return addarray.length;\n    }\n\n    //获取所有eth地址\n    function getethAddress(uint les) public view returns (address ethAddr){\n        return addarray[les];\n    }\n\n    //主网地址是否添加\n    function mainisExist(string newAddr) public view returns (bool exist){\n        return main_address[newAddr].exist;\n    }\n\n    function register(string newAddr) public  {\n\trequire(isFrozen == false);\n\trequire(wdc_mapping[msg.sender].bUpdate == false);\n\trequire(main_address[newAddr].exist == false);\n\twdc_mapping[msg.sender].newAddr = newAddr;\n\twdc_mapping[msg.sender].bUpdate = true;\n\taddarray.push(msg.sender);\n\tmain_address[newAddr].exist = true;\n    }\n\n\n    function freeze(bool bFreeze) public onlyOwner {\n        isFrozen = bFreeze;\n    }\n\n    //查询合约是否冻结\n    function isfreeze() public view returns (bool bFreeze) {\n\treturn isFrozen;\n    }\n\n   //查询映射记录\n    function getUserInfo(address ethAddr) public view returns(string) {\n        return (wdc_mapping[ethAddr].newAddr);\n    }\n\n    //查询是否有映射记录\n    function ethisflag(address ethAddr) public view returns (bool bUpdate){\n        return wdc_mapping[ethAddr].bUpdate;\n    }\n\n\n //查询数据\n    function selectOne(address ethAddr) public view returns (string){\n        return (wdc_mapping[ethAddr].newAddr);\n    }\n}\n"}}