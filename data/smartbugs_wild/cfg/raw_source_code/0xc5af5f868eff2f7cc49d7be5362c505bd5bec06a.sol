{"BaseCommunityFactory.sol":{"content":"pragma solidity \u003e=0.5.3 \u003c 0.6.0;\r\n\r\n/// @author Ryan @ Protea \r\n/// @title Community Factory interface for later expansion \r\ncontract BaseCommunityFactory {\r\n    struct Community {\r\n        string name;\r\n        address creator;\r\n        address tokenManagerAddress;\r\n        address membershipManagerAddress;\r\n        address[] utilities; \r\n    }\r\n\r\n    mapping(uint256 =\u003e Community) internal communities_;\r\n    uint256 internal numberOfCommunities_ = 0;\r\n\r\n    uint256 internal publishedBlocknumber_;\r\n    address internal daiAddress_;\r\n    address internal proteaAccount_;\r\n    address internal admin_;\r\n    address internal tokenManagerFactory_;\r\n    address internal membershipManagerFactory_;\r\n\r\n    event FactoryRegistered(address oldFactory, address newFactory);\r\n\r\n    event CommunityCreated(\r\n        address indexed publisher,\r\n        uint256 index, \r\n        address indexed tokenManager, \r\n        address indexed membershipManager, \r\n        address[] utilities\r\n    );\r\n\r\n    /// Constructor of V1 factory\r\n    /// @param _daiTokenAddress         Address of the DAI token account\r\n    /// @param _proteaAccount           Address of the Protea DAI account\r\n    /// @notice                         Also sets a super admin for changing factories at a later stage, unused at present\r\n    /// @author Ryan                \r\n    constructor (address _daiTokenAddress, address _proteaAccount) public {\r\n        admin_ = msg.sender;\r\n        daiAddress_ = _daiTokenAddress;\r\n        proteaAccount_ = _proteaAccount;\r\n        publishedBlocknumber_ = block.number;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin_, \"Not authorised\");\r\n        _;\r\n    }\r\n\r\n    /// Allows the creation of a community\r\n    /// @param _communityName           :string Name of the community\r\n    /// @param _communitySymbol         :string Symbol of the community token\r\n    /// @param _communityManager        :address The address of the super admin\r\n    /// @param _gradientDemoninator     :uint256 The gradient modifier in the curve, not required in V1\r\n    /// @param _contributionRate        :uint256 Percentage of incoming DAI to be diverted to the community account, from 0 to 100\r\n    /// @return uint256                 Index of the deployed ecosystem\r\n    /// @dev                            Also sets a super admin for changing factories at a later stage, unused at present\r\n    /// @author Ryan\r\n    function createCommunity(\r\n        string calldata _communityName,\r\n        string calldata _communitySymbol,\r\n        address _communityManager,\r\n        uint256 _gradientDemoninator,\r\n        uint256 _contributionRate\r\n    )\r\n        external\r\n        returns(uint256);\r\n\r\n    /// @dev                            By passing through a list, this allows greater flexibility of the interface for different factories\r\n    /// @param _factories               :address[]  List of factories\r\n    /// @notice                         Introspection or interface confirmation should be used at later stages\r\n    function initialize(address[] calldata _factories) external;\r\n\r\n    function setTokenManagerFactory(address _newFactory) external;\r\n\r\n    function setMembershipManagerFactory(address _newFactory) external;\r\n\r\n    /// Fetching community data\r\n    /// @param _index                   :uint256 Index of the community\r\n    /// @dev                            Fetches all data and contract addresses of deployed communities by index\r\n    /// @return Community               Returns a Community struct matching the provided index\r\n    /// @author Ryan\r\n    function getCommunity(uint256 _index)\r\n        external\r\n        view\r\n        returns(\r\n            string memory,\r\n            address,\r\n            address,\r\n            address,\r\n            address[] memory\r\n        );\r\n\r\n    function getFactories() external view returns (address[] memory);\r\n\r\n    function publishedBlocknumber() external view returns(uint256) {\r\n        return publishedBlocknumber_;\r\n    }\r\n}"},"CommunityFactoryV1.sol":{"content":"pragma solidity \u003e=0.5.3 \u003c 0.6.0;\r\n\r\nimport { ITokenManagerFactory } from \"./ITokenManagerFactory.sol\";\r\nimport { IMembershipFactory } from \"./IMembershipFactory.sol\";\r\nimport { IMembershipManager } from \"./IMembershipManager.sol\";\r\nimport { IEventManagerFactory } from \"./IEventManagerFactory.sol\";\r\nimport { BaseCommunityFactory } from \"./BaseCommunityFactory.sol\";\r\n\r\n/// @author Ryan @ Protea \r\n/// @title V1 Community ecosystem factory\r\ncontract CommunityFactoryV1 is BaseCommunityFactory{\r\n    address internal eventManagerFactory_;\r\n\r\n    /// Constructor of V1 factory\r\n    /// @param _daiTokenAddress         Address of the DAI token account\r\n    /// @param _proteaAccount           Address of the Protea DAI account\r\n    /// @notice                         Also sets a super admin for changing factories at a later stage, unused at present\r\n    /// @author Ryan                \r\n    constructor (address _daiTokenAddress, address _proteaAccount) public BaseCommunityFactory(_daiTokenAddress, _proteaAccount) {\r\n    }\r\n\r\n    /// @dev                            By passing through a list, this allows greater flexibility of the interface for different factories\r\n    /// @param _factories               :address[]  List of factories\r\n    /// @notice                         Introspection or interface confirmation should be used at later stages\r\n    function initialize(address[] calldata _factories) external onlyAdmin(){\r\n        require(tokenManagerFactory_ == address(0), \"Already initialised\");\r\n        tokenManagerFactory_ = _factories[0];\r\n        membershipManagerFactory_ = _factories[1];\r\n        eventManagerFactory_ = _factories[2];\r\n\r\n        emit FactoryRegistered(address(0), tokenManagerFactory_);\r\n        emit FactoryRegistered(address(0), membershipManagerFactory_);\r\n        emit FactoryRegistered(address(0), eventManagerFactory_);\r\n    }\r\n\r\n    function setTokenManagerFactory(address _newFactory) external onlyAdmin() {\r\n        address oldFactory = tokenManagerFactory_;\r\n        tokenManagerFactory_ = _newFactory;\r\n        emit FactoryRegistered(oldFactory, tokenManagerFactory_);\r\n    }\r\n\r\n    function setMembershipManagerFactory(address _newFactory) external onlyAdmin() {\r\n        address oldFactory = membershipManagerFactory_;\r\n        membershipManagerFactory_ = _newFactory;\r\n        emit FactoryRegistered(oldFactory, membershipManagerFactory_);\r\n    }\r\n\r\n    function setEventManagerFactory(address _newFactory) external onlyAdmin() {\r\n        address oldFactory = eventManagerFactory_;\r\n        eventManagerFactory_ = _newFactory;\r\n        emit FactoryRegistered(oldFactory, eventManagerFactory_);\r\n    }\r\n\r\n    /// Allows the creation of a community\r\n    /// @param _communityName           :string Name of the community\r\n    /// @param _communitySymbol         :string Symbol of the community token\r\n    /// @param _communityManager        :address The address of the super admin\r\n    /// @param _gradientDemoninator     :uint256 The gradient modifier in the curve, not required in V1\r\n    /// @param _contributionRate        :uint256 Percentage of incoming DAI to be diverted to the community account, from 0 to 100\r\n    /// @return uint256                 Index of the deployed ecosystem\r\n    /// @dev                            Also sets a super admin for changing factories at a later stage, unused at present\r\n    // Rough gas usage 5,169,665 \r\n    /// @author Ryan\r\n    function createCommunity(\r\n        string calldata _communityName,\r\n        string calldata _communitySymbol,\r\n        address _communityManager,\r\n        uint256 _gradientDemoninator,\r\n        uint256 _contributionRate\r\n    )\r\n        external\r\n        returns(uint256)\r\n    {\r\n        address membershipManagerAddress = IMembershipFactory(membershipManagerFactory_).deployMembershipManager(_communityManager);\r\n\r\n        address tokenManagerAddress = ITokenManagerFactory(tokenManagerFactory_).deployMarket(\r\n            _communityName,\r\n            _communitySymbol,\r\n            daiAddress_,\r\n            proteaAccount_,\r\n            _communityManager,\r\n            _contributionRate,\r\n            membershipManagerAddress\r\n        );\r\n\r\n        IMembershipFactory(membershipManagerFactory_).initialize(tokenManagerAddress, membershipManagerAddress);\r\n\r\n        address eventManagerAddress = IEventManagerFactory(eventManagerFactory_).deployEventManager(\r\n            tokenManagerAddress,\r\n            membershipManagerAddress,\r\n            _communityManager\r\n        );\r\n\r\n        uint256 index = numberOfCommunities_;\r\n        numberOfCommunities_ = numberOfCommunities_ + 1;\r\n        \r\n        communities_[index].name = _communityName;\r\n        communities_[index].creator = msg.sender;\r\n        communities_[index].tokenManagerAddress = tokenManagerAddress;\r\n        communities_[index].membershipManagerAddress = membershipManagerAddress;\r\n        communities_[index].utilities.push(eventManagerAddress);\r\n\r\n        emit CommunityCreated(\r\n            msg.sender,\r\n            index, \r\n            tokenManagerAddress, \r\n            membershipManagerAddress, \r\n            communities_[index].utilities\r\n        );\r\n\r\n        return index;\r\n    }\r\n\r\n    /// Fetching community data\r\n    /// @param _index                   :uint256 Index of the community\r\n    /// @dev                            Fetches all data and contract addresses of deployed communities by index\r\n    /// @return Community               Returns a Community struct matching the provided index\r\n    /// @author Ryan\r\n    function getCommunity(uint256 _index)\r\n        external\r\n        view\r\n        returns(\r\n            string memory,\r\n            address,\r\n            address,\r\n            address,\r\n            address[] memory\r\n        )\r\n    {\r\n        return (\r\n            communities_[_index].name,\r\n            communities_[_index].creator,\r\n            communities_[_index].membershipManagerAddress,\r\n            communities_[_index].tokenManagerAddress,\r\n            communities_[_index].utilities\r\n        );\r\n    }\r\n\r\n    function getFactories() external view returns (address[] memory) {\r\n        address[] memory factories = new address[](3);\r\n        factories[0] = tokenManagerFactory_;\r\n        factories[1] = membershipManagerFactory_;\r\n        factories[2] = eventManagerFactory_;\r\n\r\n        return factories;\r\n    }\r\n}"},"IEventManagerFactory.sol":{"content":"pragma solidity \u003e=0.5.3 \u003c 0.6.0;\r\n\r\ninterface IEventManagerFactory{\r\n    function deployEventManager(address _tokenManager, address _membershipManager, address _communityCreator) external returns (address);\r\n}"},"IMembershipFactory.sol":{"content":"pragma solidity \u003e=0.5.3 \u003c 0.6.0;\r\n\r\ninterface IMembershipFactory{\r\n    // TODO: comments\r\n    function deployMembershipManager(address _communityManager) external returns (address);\r\n\r\n    function initialize(address _tokenManager, address _target) external;\r\n\r\n}"},"IMembershipManager.sol":{"content":"pragma solidity \u003e=0.5.3 \u003c 0.6.0;\r\n\r\n/// @author Ryan @ Protea \r\n/// @title IMembershipManager\r\ninterface IMembershipManager {\r\n    struct RegisteredUtility{\r\n        bool active;\r\n        mapping(uint256 =\u003e uint256) lockedStakePool; // Total Stake withheld by the utility\r\n        mapping(uint256 =\u003e mapping(address =\u003e uint256)) contributions; // Traking individual token values sent in\r\n    }\r\n\r\n    struct Membership{\r\n        uint256 currentDate;\r\n        uint256 availableStake;\r\n        uint256 reputation;\r\n    }\r\n\r\n    event UtilityAdded(address issuer);\r\n    event UtilityRemoved(address issuer);\r\n    event ReputationRewardSet(address indexed issuer, uint8 id, uint256 amount);\r\n\r\n    event StakeLocked(address indexed member, address indexed utility, uint256 tokenAmount);\r\n    event StakeUnlocked(address indexed member, address indexed utility, uint256 tokenAmount);\r\n\r\n    event MembershipStaked(address indexed member, uint256 tokensStaked);\r\n   \r\n    function initialize(address _tokenManager) external returns(bool);\r\n\r\n    function addUtility(address _utility) external;\r\n\r\n    function removeUtility(address _utility) external;\r\n\r\n    function addAdmin(address _newAdmin) external;\r\n\r\n    function addSystemAdmin(address _newAdmin) external;\r\n\r\n    function removeAdmin(address _newAdmin) external;\r\n\r\n    function removeSystemAdmin(address _newAdmin) external;\r\n\r\n    function setReputationRewardEvent(address _utility, uint8 _id, uint256 _rewardAmount) external;\r\n\r\n    function issueReputationReward(address _member, uint8 _rewardId) external returns (bool);\r\n  \r\n    function stakeMembership(uint256 _daiValue, address _member) external returns(bool);\r\n\r\n    function manualTransfer(uint256 _tokenAmount, uint256 _index, address _member) external returns (bool);\r\n\r\n    function withdrawMembership(uint256 _daiValue, address _member) external returns(bool);\r\n\r\n    function lockCommitment(address _member, uint256 _index, uint256 _daiValue) external returns (bool);\r\n\r\n    function unlockCommitment(address _member, uint256 _index, uint8 _reputationEvent) external returns (bool);\r\n\r\n    function reputationOf(address _account) external view returns(uint256);\r\n\r\n    function getMembershipStatus(address _member) external view returns(uint256, uint256, uint256);\r\n\r\n    function getUtilityStake(address _utility, uint256 _index) external view returns(uint256);\r\n    \r\n    function getMemberUtilityStake(address _utility, address _member, uint256 _index) external view returns(uint256);\r\n\r\n    function getReputationRewardEvent(address _utility, uint8 _id) external view returns(uint256);\r\n\r\n    function tokenManager() external view returns(address);\r\n}"},"ITokenManagerFactory.sol":{"content":"pragma solidity \u003e=0.5.3 \u003c 0.6.0;\r\n\r\ninterface ITokenManagerFactory{\r\n    function deployMarket(\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        address _reserveToken,\r\n        address _proteaAccount,\r\n        address _publisher,\r\n        uint256 _contributionRate,\r\n        address _membershipManager\r\n    ) external returns (address);\r\n}"}}