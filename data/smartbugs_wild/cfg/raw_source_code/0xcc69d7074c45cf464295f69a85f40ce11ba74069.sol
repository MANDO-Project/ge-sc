{"Migrations.sol":{"content":"pragma solidity ^0.5.7;\n\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\n\n  modifier restricted() {\n    if (msg.sender == owner) _;\n  }\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n\n  function upgrade(address new_address) public restricted {\n    Migrations upgraded = Migrations(new_address);\n    upgraded.setCompleted(last_completed_migration);\n  }\n}\n"},"RNBW5.sol":{"content":"pragma solidity ^0.5.7;\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c \u003e= a);\n    }\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\n        require(b \u003c= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n        require(b \u003e 0);\n        c = a / b;\n    }\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address payable token, bytes memory data) public;\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address payable public _owner;\n    address payable private _newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == _owner);\n        _;\n    }\n\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        _newOwner = newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == _newOwner);\n        emit OwnershipTransferred(_owner, _newOwner);\n        _owner = _newOwner;\n        _newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n// token transfers\n// ----------------------------------------------------------------------------\ncontract RNBW5 is ERC20Interface, Owned, SafeMath {\n\n    string public symbol;\n    string public name;\n    string public description;\n    uint8 public decimals;\n    uint private _startDate;\n    uint private _endDate;\n    uint private _bonusOneEnds;\n    uint private _bonusTwoEnds;\n    uint private _bonusThreeEnds;\n    uint private _bonusFourEnds;\n    uint private _bonusFiveEnds;\n    \n    uint256 private _softCap;\n    uint256 private _hardCap;\n    uint256 private _totalSupply;\n\n    mapping(address =\u003e uint256) _balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) _allowed;\n    mapping(address =\u003e bool) _freezeState;\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor(\n        address payable minter) public {\n\n        _owner = minter;\n        \n        name   = \"RNBW5 Token\";\n        description = \"\";\n        symbol = \"RNBW5\";\n        decimals = 18;\n        _softCap =   22222000 * 1000000000000000000; //18 decimals\n        _hardCap = 1481481000 * 1000000000000000000; //18 decimals\n        \n        _startDate = now;        \n        _bonusOneEnds   = now + 4 weeks;\n        _bonusTwoEnds   = now + 8 weeks;\n        _bonusThreeEnds = now + 12 weeks;\n        _bonusFourEnds  = now + 16 weeks;\n        _bonusFiveEnds  = now + 20 weeks;\n        _endDate = now + 24 weeks;\n    }\n\n    modifier IcoSuccessful {\n        require(now \u003e= _endDate);\n        require(_totalSupply \u003e= _softCap);\n        _;\n    }\n    modifier IcoRunning {\n        require(now \u003c= _endDate);\n        require(_totalSupply \u003c= _hardCap);\n        _;\n    }\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint) {\n        return _totalSupply - _balances[address(0)];\n    }\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return _balances[tokenOwner];\n    }\n    \n    function isFreezed(address tokenOwner) public view returns (bool freezed) {\n        return _freezeState[tokenOwner];\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner\u0027s account to `to` account\n    // - Owner\u0027s account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint256 tokens) public IcoSuccessful returns (bool success) {\n        require(_freezeState[msg.sender] == false);\n        \n        _balances[msg.sender] = safeSub(_balances[msg.sender], tokens);\n        _balances[to] = safeAdd(_balances[to], tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner\u0027s account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public IcoSuccessful returns (bool success) {\n        require( _freezeState[spender] == false);\n        _allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public IcoSuccessful returns (bool success) {\n        require( _freezeState[from] == false \u0026\u0026 _freezeState[to] == false);\n        \n        _balances[from] = safeSub(_balances[from], tokens);\n        _allowed[from][msg.sender] = safeSub(_allowed[from][msg.sender], tokens);\n        _balances[to] = safeAdd(_balances[to], tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender\u0027s account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        require(_freezeState[spender] == false);\n        return _allowed[tokenOwner][spender];\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner\u0027s account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes memory data) public IcoSuccessful returns (bool success) {\n        require(_freezeState[spender] == false);\n        _allowed[msg.sender][spender] = tokens;\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, _owner, data);\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // 1 rnbw Tokens per 1 finney\n    // ------------------------------------------------------------------------\n    function purchase() public IcoRunning payable {\n    \n        require(now \u003e= _startDate \u0026\u0026 now \u003c= _endDate);\n        require(msg.value \u003e= 500 finney);\n        \n        uint256 weiValue = msg.value;\n        uint256 tokens = safeMul(weiValue, 1000);// 1 finney = 1000000000000000 wei\n        uint256 ownerTokens = safeMul( safeDiv(tokens, 10), 3);\n        \n        if (now \u003c= _bonusOneEnds) {\n            tokens = safeMul( safeDiv(tokens, 10) , 15 );\n        }\n        if (now \u003c= _bonusTwoEnds \u0026\u0026 now \u003e _bonusOneEnds) {\n            tokens = safeMul( safeDiv(tokens, 10) , 14 );\n        }\n        if (now \u003c= _bonusThreeEnds \u0026\u0026 now \u003e _bonusTwoEnds) {\n            tokens = safeMul( safeDiv(tokens, 10) , 13 );\n        }\n        if (now \u003c= _bonusFourEnds \u0026\u0026 now \u003e _bonusThreeEnds) {\n            tokens = safeMul( safeDiv(tokens, 10) , 12 );\n        }\n        if (now \u003c= _bonusFiveEnds \u0026\u0026 now \u003e _bonusFourEnds) {\n            tokens = safeMul( safeDiv(tokens, 10) , 11 );\n        }       \n        _freezeState[msg.sender] = false;\n        \n        _balances[msg.sender] = safeAdd(_balances[msg.sender], tokens);        \n        _totalSupply = safeAdd(_totalSupply, tokens);        \n        emit Transfer(address(0), msg.sender, tokens);\n        \n        _balances[_owner] = safeAdd(_balances[_owner], ownerTokens);\n        _totalSupply = safeAdd(ownerTokens, tokens);\n        emit Transfer(address(0), _owner, ownerTokens);\n    }\n    \n    function () payable external {\n        purchase();\n    }\n\n    function withdraw() public onlyOwner returns (bool success) {\n        _owner.transfer(address(this).balance);\n        return true;\n    }\n\n    function freeze(address account) public onlyOwner returns (bool success) {\n        require(account != _owner \u0026\u0026 account != address(0));\n        _freezeState[account] = true;\n        return true;\n    }\n    \n    function unfreeze(address account) public onlyOwner returns (bool success) {\n        require(account != _owner \u0026\u0026 account != address(0));\n        _freezeState[account] = false;\n        return true;\n    }\n   \n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(_owner, tokens);\n    }\n}\n"}}