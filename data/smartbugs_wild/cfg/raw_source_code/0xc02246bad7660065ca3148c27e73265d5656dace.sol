{"WebsensorsDoracle.sol":{"content":"pragma solidity ^0.5.1;\n\nimport \"WebsensorsDoracleInterface.sol\";\n\n// Do not use in production environments.\n\ncontract WebsensorsDoracle is WebsensorsDoracleInterface {\n\n    \n\n    address public owner;\n    uint256 public last_sensor_id;\n    uint8 public last_sensor_status;\n    mapping(uint256 =\u003e uint8) public sensors_status;\n    address public oracle1;\n    address public oracle2;\n    address public oracle3;\n    bytes32 public id_iexec;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function receiveResult(bytes32 id, bytes calldata b) external {\n        require(oracle1==msg.sender || oracle2==msg.sender || oracle3==msg.sender,\"The message sender is not an authorized oracle.\");\n        require(b.length \u003c= 64,\u0027Result is too long.\u0027);\n    \n        last_sensor_id = 0;\n\n        uint x = uint8(b[1]); uint r = x/16; uint s = x%16; uint c = r*10+s;\n        last_sensor_id += c*1000000;\n            \n            \n        x = uint8(b[2]); r = x/16; s = x%16; c = r*10+s;\n        last_sensor_id += c*10000;\n            \n        x = uint8(b[3]); r = x/16; s = x%16; c = r*10+s;\n        last_sensor_id += c*100;\n            \n        x = uint8(b[4]); r = x/16; s = x%16; c = r*10+s;\n        last_sensor_id += c;\n        \n        last_sensor_status = uint8(b[5]);\n        sensors_status[last_sensor_id] = last_sensor_status;\n        \n        id_iexec = id;\n    }\n    \n    function setOracle1(address _oracle1) public{\n        require(msg.sender==owner,\"The message sender is not the owner.\");\n        oracle1 = _oracle1;\n    }\n    \n    function setOracle2(address _oracle2) public{\n        require(msg.sender==owner,\"The message sender is not the owner.\");\n        oracle2 = _oracle2;\n    }\n    \n    function setOracle3(address _oracle3) public{\n        require(msg.sender==owner,\"The message sender is not the owner.\");\n        oracle3 = _oracle3;\n    }\n\n  \n}"},"WebsensorsDoracleInterface.sol":{"content":"pragma solidity ^0.5.1;\n\n\ninterface WebsensorsDoracleInterface {\n    function receiveResult(bytes32 id, bytes calldata result) external;\n    /*  \n      receiveResult MUST revert if the msg.sender is not an oracle authorized to provide the result for that id\n      receiveResult MAY revert if receiveResult has been called with the same id before. \n      receiveResult MAY revert if the id or result cannot be handled by the handler.\n    */\n}"}}