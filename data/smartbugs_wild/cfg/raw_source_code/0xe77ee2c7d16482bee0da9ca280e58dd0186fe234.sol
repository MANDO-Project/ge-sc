{"borToken.sol":{"content":"pragma solidity ^0.4.20;\r\n\r\nimport \u0027./owned.sol\u0027;\r\nimport \u0027./erc20.sol\u0027;\r\n\r\ncontract BorToken is ERC20,Owned {\r\n    \r\n    mapping(address =\u003e bool) public frozenAccount;\r\n    \r\n    event AddSupply(uint amount);\r\n    event FrozenFunds(address target,bool frozen);\r\n    event Burn(address target,uint amount);\r\n    \r\n    \r\n    function mine(address _target,uint _amount) public onlyOwner {\r\n        require(_amount \u003e 0);\r\n        totalSupply += _amount;\r\n        balanceOf[_target] += _amount;\r\n        \r\n        emit AddSupply(_amount);\r\n        emit Transfer(0,_target,_amount);\r\n    }\r\n    \r\n    \r\n    function freezeAccount(address _target,bool _freeze) public onlyOwner {\r\n        frozenAccount[_target]=_freeze;\r\n        emit FrozenFunds(_target,_freeze);\r\n    }\r\n    \r\n    function burn(address _from,uint256 _value) public onlyOwner returns (bool success) {\r\n        require(_value \u003e 0);\r\n        require(balanceOf[_from] \u003e= _value);\r\n        \r\n        totalSupply -= _value;\r\n        balanceOf[_from] -= _value;\r\n        \r\n        emit Burn(_from,_value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function transfer(address _to,uint256 _value) public returns (bool success){\r\n        success= _transfer(msg.sender,_to,_value);\r\n    }\r\n    \r\n    function transferFrom(address _from,address _to,uint256 _value) public returns (bool success){\r\n        require(allowed[_from][msg.sender] \u003e= _value);\r\n        success= _transfer(_from,_to,_value);\r\n        allowed[_from][msg.sender] -= _value;\r\n    }\r\n    \r\n    function _transfer(address _from,address _to,uint256 _value) internal returns (bool success){\r\n        require(_value \u003e 0);\r\n        require(_to!=address(0));\r\n        require(!frozenAccount[_from]);\r\n        \r\n        require(balanceOf[_from] \u003e= _value);\r\n        require(balanceOf[_to] + _value \u003e= balanceOf[_to]);\r\n        \r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        \r\n        emit Transfer(_from,_to,_value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n}"},"erc20.sol":{"content":"pragma solidity ^0.4.20;\r\n\r\nimport \u0027./erc20Interface.sol\u0027;\r\n\r\ncontract ERC20 is ERC20Interface{\r\n    \r\n    mapping(address =\u003e uint256) public balanceOf;\r\n    mapping(address =\u003e mapping(address=\u003euint256)) allowed;\r\n    \r\n    constructor() public {\r\n        name=\"BorCoin\";\r\n        symbol=\"BORC\";\r\n        decimals=6;\r\n        totalSupply=100000000000000;\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n    \r\n    function transfer(address _to,uint256 _value) public returns (bool success){\r\n        require(_to!=address(0));\r\n        require(balanceOf[msg.sender] \u003e= _value);\r\n        require(balanceOf[_to] + _value \u003e= balanceOf[_to]);\r\n        \r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        \r\n        emit Transfer(msg.sender,_to,_value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from,address _to,uint256 _value) public returns (bool success){\r\n        require(_to!=address(0));\r\n        require(allowed[_from][msg.sender] \u003e= _value);\r\n        require(balanceOf[_from] \u003e= _value);\r\n        require(balanceOf[_to] + _value \u003e= balanceOf[_to]);\r\n        \r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        \r\n        allowed[_from][msg.sender] -=_value;\r\n        \r\n        emit Transfer(_from,_to,_value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender,uint256 _value) public returns (bool success){\r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender,_spender,_value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner,address _spender) view public returns(uint256 remaining){\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n}"},"erc20Interface.sol":{"content":"pragma solidity ^0.4.20;\r\n\r\ncontract ERC20Interface{\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n    \r\n    function transfer(address _to,uint256 _value) returns (bool success);\r\n    function transferFrom(address _from,address _to,uint256 _value) returns (bool success);\r\n    \r\n    function approve(address _spender,uint256 _value) returns (bool success);\r\n    function allowance(address _owner,address _spender) view returns(uint256 remaining);\r\n    \r\n    event Transfer(address indexed _from,address indexed _to,uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender,uint256 _value);\r\n}"},"owned.sol":{"content":"pragma solidity ^0.4.20;\r\n\r\ncontract Owned{\r\n    address public owned;\r\n    \r\n    constructor () public {\r\n        owned = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owned);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnerShip(address newOwer) public onlyOwner {\r\n        owned = newOwer;\r\n    }\r\n}"}}