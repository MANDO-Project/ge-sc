{"Phase.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\n\r\n    // Phaselabs ERC20+ contract.\r\n\r\ncontract Phase {\r\n\r\n    using SafeMath for uint;\r\n\r\n    address private Phaselabs;\r\n    string public symbol;\r\n    string public  name;\r\n    uint public decimals;\r\n    uint _totalSupply;\r\n\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    constructor() public {\r\n        symbol = \"psx\";\r\n        name = \"PHASE\";\r\n        decimals = 18;\r\n        Phaselabs = msg.sender;\r\n        _totalSupply = 1000000000 * 10**uint(decimals);\r\n        _balances[Phaselabs] = _totalSupply;\r\n        emit Transfer(address(0), Phaselabs, _totalSupply);\r\n    }\r\n    \r\n    \r\n    // Returns total token supply.    \r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n\r\n    // Returns the balance of the specified address.\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n    \r\n\r\n    // Returns the amount of tokens that an owner allowed to a spender.\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n\r\n    // Increase the amount of tokens that an owner allowed to a spender.\r\n\r\n    function increaseAllowance(address spender, uint256 addValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addValue));\r\n        return true;\r\n    }\r\n    \r\n\r\n    // Decrease the amount of tokens that an owner allowed to a spender.\r\n\r\n    function decreaseAllowance(address spender, uint256 subValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subValue));\r\n        return true;\r\n    }\r\n    \r\n\r\n    // Transfer token function.\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n\r\n    // Allow someone to spend some tokens in your behalf.\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(msg.sender != spender);\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n\r\n    // Function for attempts to send tokens that are approved from an owner to a spender.\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n\r\n    // Contract will accept ether.\r\n    \r\n    function () external payable {\r\n    }\r\n    \r\n\r\n    // Withdraw ether.\r\n    \r\n    function WithdrawEther(uint256 amount) public{\r\n\t\trequire(msg.sender == Phaselabs);\r\n\t\tmsg.sender.transfer(amount);\r\n\t}\r\n\t\r\n\r\n    // Safety checks for token transfer.\t\r\n\t\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(to != address(this));\r\n        require(value != 0);\r\n        _balances[to] = _balances[to].add(value);\r\n        _balances[from] = _balances[from].sub(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    // Safety checks for the approve function.\r\n    \r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}"}}