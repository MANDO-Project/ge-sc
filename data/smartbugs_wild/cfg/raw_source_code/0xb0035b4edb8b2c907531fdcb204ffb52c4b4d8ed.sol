{"ERC20.sol":{"content":"\npragma solidity ^0.5.7;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn\u0027t required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address =\u003e uint256) private _balances;\n\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(value== 0 || _allowed[msg.sender][spender] == 0);\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses\u0027 tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender\u0027s allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n"},"ERC20Burnable.sol":{"content":"pragma solidity ^0.5.7;\n\nimport \"./ERC20.sol\";\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance.\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n"},"ERC20Detailed.sol":{"content":"pragma solidity ^0.5.7;\n\nimport \"./IERC20.sol\";\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n"},"IERC20.sol":{"content":"pragma solidity ^0.5.7;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.5.7;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n"},"Token.sol":{"content":"pragma solidity ^0.5.7;\n\nimport \"./ERC20.sol\";\nimport \"./ERC20Detailed.sol\";\nimport \"./ERC20Burnable.sol\";\n\n \ncontract Token is ERC20, ERC20Detailed, ERC20Burnable {\n    uint8 public constant DECIMALS = 18;\n    // uint256 public constant INIT_SUPPLY = 10000000000 * (10 ** uint256(DECIMALS));\n     \n    // address private constant ADDR_TOKEN_SWAP = address(0x1234);\n    // address private constant ADDR_OPERATION = address(0x1234);\n    // address private constant ADDR_REWARD = address(0x1234);\n    // address private constant ADDR_TEAM = address(0x1234);\n    // address private constant ADDR_PARTNER = address(0x1234);\n    \n    // 2019.06.01 ~ 2021.12.01.\n    uint[31] private TIME_TABLE = [ 1559347200,\n        1561939200, 1564617600, 1567296000, 1569888000, 1572566400, 1575158400, \n        1577836800, 1580515200, 1583020800, 1585699200, 1588291200, 1590969600, \n        1593561600, 1596240000, 1598918400, 1601510400, 1604188800, 1606780800,\n        1609459200, 1612137600, 1614556800, 1617235200, 1619827200, 1622505600, \n        1625097600, 1627776000, 1630454400, 1633046400, 1635724800, 1638316800];\n        \n    \n    // event Mint(address indexed to, uint256 amount);\n    // event FininshedMint();\n\n    struct TimeMint {\n        address beneficiary;\n        uint256 releaseTime;\n        uint256 value;\n    }\n    \n    TimeMint[] timeMintList;\n\n    address owner;\n    bool mintingAvail = true;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier canMint() {\n        require(mintingAvail);\n        _;\n    }\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor () public ERC20Detailed(\"HAMA token\", \"HAMA\", DECIMALS) {\n        \n        // All tokens will provide by insertTimeMintTimeTable\n        // _mint(msg.sender, INITIAL_SUPPLY);\n        owner = msg.sender;\n        // _initMintScheuld();\n    }\n    \n    /**\n     * @dev Initialize supplying tokens. But This code occuers an error: out of gas\n     */\n    // function _initMintScheuld() internal{\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[0], 1500000000);\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[2], 200000000);\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[3], 100000000);\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[4], 300000000);\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[5], 100000000);\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[6], 300000000);\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[7], 100000000);\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[8], 300000000);\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[9], 100000000);\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[10], 300000000);\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[11], 100000000);\n        // insertTimeMint(ADDR_TOKEN_SWAP, TIME_TABLE[12], 100000000);\n        \n        // for (uint i=0; i\u003c10; i+=3) {\n        //     insertTimeMint(ADDR_OPERATION, TIME_TABLE[i], 375000000);\n        // }\n        \n        // insertTimeMint(ADDR_REWARD, TIME_TABLE[0], 3000000000);\n        \n        // for (uint i=7; i\u003c25; i++) {\n        //     insertTimeMint(ADDR_TEAM, TIME_TABLE[i], 38920000);\n        // }\n        \n        // for (uint i=0; i\u003c25; i+=3) {\n        //     insertTimeMint(ADDR_PARTNER, TIME_TABLE[i], 162500000);\n        // }\n    // }\n\n    /**\n     * @dev Getting the number of release tokens schedules.\n     */\n    function getTimeTimeLength() view public returns(uint256) {\n        return timeMintList.length;\n    }\n\n    /**\n     * @dev Getting the number of release tokens schedules.\n     */\n    function getTimeTimeMint(uint index) view public returns(address, uint256, uint256) {\n        return (timeMintList[index].beneficiary, timeMintList[index].releaseTime, timeMintList[index].value);\n    }\n\n    /**\n     * @dev Insert a minting tokens schedule. This method use index of TimeTable instead of timestamp.\n     */\n    function insertTimeMintTimeTable(address _beneficiary, uint256 index, uint256 _value) onlyOwner canMint public returns (bool){\n        require(_beneficiary != address(0));\n        require(index \u003e= 0 \u0026\u0026 index \u003c TIME_TABLE.length, \"insertTimeMint: index out of range\");\n        return insertTimeMint(_beneficiary, TIME_TABLE[index], _value);\n    }\n    \n    /**\n     * @dev Insert a minting tokens schedule.\n     */\n    function insertTimeMint(address _beneficiary, uint256 _releaseTime, uint256 _value) onlyOwner canMint public returns (bool){\n        require(_beneficiary != address(0));\n        require(_releaseTime \u003e block.timestamp, \"TokenTimelock: release time is before current time\");\n        TimeMint memory item = TimeMint({\n            beneficiary: _beneficiary,\n            releaseTime: _releaseTime,\n            value: _value\n        });\n        timeMintList.push(item);\n        return true;\n    }\n    \n    /**\n     * @dev Remove a minting tokens schedule with index. The timeMintList length reduce one because \"delete\" is set value to empty.\n     */\n    function removeTimeMint(uint index) onlyOwner canMint public returns (bool){\n        require(index \u003e= 0 \u0026\u0026 index \u003c timeMintList.length, \"removeTimeMint: index out of range.\");\n        timeMintList[index] = timeMintList[timeMintList.length-1];\n        delete timeMintList[timeMintList.length-1];\n        timeMintList.length--;\n        return true;\n    }\n    \n /**\n     * @dev Releasing tokens any scheduled over release Time.\n     */\n    function releaseTimeMintToken() onlyOwner canMint public returns (bool) {\n        require(timeMintList.length \u003e 0);\n        uint i = 0;\n        while (i \u003c timeMintList.length) {\n            if (block.timestamp \u003e= timeMintList[i].releaseTime) {           // 0. if True\n                if (_mintForTime(timeMintList[i])) {                        // 1. Mining according to timeMintList[i].\n                    timeMintList[i] = timeMintList[timeMintList.length-1];  // 2.  Note: timeMintList[timeMintList.length-1] is timeMintList[i] NOW !!\n                    delete timeMintList[timeMintList.length-1];\n                    timeMintList.length--;\n                    continue;   // To solve the problem.\n                }\n            }\n            i++;    // 3. BUT we skipped the check of timeMintList[i](i.e. timeMintList[timeMintList.length-1]) with `i++`, \n        }\n    }\n    \n    function _mintForTime(TimeMint memory item) onlyOwner canMint private returns (bool) {\n        require(block.timestamp \u003e= item.releaseTime, \"TokenTimelock: current time is before release time\");\n        _mint(item.beneficiary, item.value);\n        // emit Mint(item.beneficiary, item.value);\n        return true;\n    }\n    \n    /**\n     * @dev block mint function.\n     */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingAvail = false;\n        // emit FininshedMint();\n        return true;\n    }\n\n}"}}