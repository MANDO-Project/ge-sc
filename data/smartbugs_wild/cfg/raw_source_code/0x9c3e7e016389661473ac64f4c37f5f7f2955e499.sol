{"Address.sol":{"content":"pragma solidity ^0.5.2;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n}\n"},"DividendDistributingToken.sol":{"content":"pragma solidity 0.5.7;\n\nimport \"./SafeMath.sol\";\nimport \"./ERC20.sol\";\n\nimport \"./LoanEscrow.sol\";\n\n/**\n * @title DividendDistributingToken\n * @dev An ERC20-compliant token that distributes any Dai it receives to its token holders proportionate to their share.\n *\n * Implementation based on: https://blog.pennyether.com/posts/realtime-dividend-token.html#the-token\n *\n * The user is responsible for when they transact tokens (transacting before a dividend payout is probably not ideal).\n *\n * `TokenizedProperty` inherits from `this` and is the front-facing contract representing the rights / ownership to a property.\n *\n * NOTE: if the owner(s) of a `TokenizedProperty` wish to update `LoanEscrow` behavior (i.e. changing the ERC20 token funds are raised in, or changing loan behavior),\n * some options are: (a) `untokenize` and re-deploy the updated `TokenizedProperty`, or (b) deploy an independent contract acting as the updated dividend distribution vehicle.\n */\ncontract DividendDistributingToken is ERC20, LoanEscrow {\n  using SafeMath for uint256;\n\n  uint256 public constant POINTS_PER_DAI = uint256(10) ** 32;\n\n  uint256 public pointsPerToken = 0;\n  mapping(address =\u003e uint256) public credits;\n  mapping(address =\u003e uint256) public lastPointsPerToken;\n\n  event DividendsCollected(address indexed collector, uint256 amount);\n  event DividendsDeposited(address indexed depositor, uint256 amount);\n\n  function collectOwedDividends(address _account) public {\n    creditAccount(_account);\n\n    uint256 _dai = credits[_account].div(POINTS_PER_DAI);\n    credits[_account] = 0;\n\n    pull(_account, _dai, false);\n    emit DividendsCollected(_account, _dai);\n  }\n\n  function depositDividends() public {  // dividends\n    uint256 amount = dai.allowance(msg.sender, address(this));\n\n    uint256 fee = amount.div(100);\n    dai.safeTransferFrom(msg.sender, blockimmo(), fee);\n\n    deposit(msg.sender, amount.sub(fee));\n\n    // partially tokenized properties store the \"non-tokenized\" part in `this` contract, dividends not disrupted\n    uint256 issued = totalSupply().sub(unissued());\n    pointsPerToken = pointsPerToken.add(amount.sub(fee).mul(POINTS_PER_DAI).div(issued));\n\n    emit DividendsDeposited(msg.sender, amount);\n  }\n\n  function unissued() public view returns (uint256) {\n    return balanceOf(address(this));\n  }\n\n  function creditAccount(address _account) internal {\n    uint256 amount = balanceOf(_account).mul(pointsPerToken.sub(lastPointsPerToken[_account]));\n\n    uint256 _credits = credits[_account].add(amount);\n    if (credits[_account] != _credits)\n      credits[_account] = _credits;\n\n    if (lastPointsPerToken[_account] != pointsPerToken)\n      lastPointsPerToken[_account] = pointsPerToken;\n  }\n}\n"},"ERC20.sol":{"content":"pragma solidity ^0.5.2;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn\u0027t required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address =\u003e uint256) private _balances;\n\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses\u0027 tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender\u0027s allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n"},"ERC20Detailed.sol":{"content":"pragma solidity ^0.5.2;\n\nimport \"./IERC20.sol\";\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n"},"IERC20.sol":{"content":"pragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"LoanEscrow.sol":{"content":"pragma solidity 0.5.7;\n\nimport \"./Pausable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./SafeERC20.sol\";\n\ncontract MoneyMarketInterface {\n  function getSupplyBalance(address account, address asset) public view returns (uint);\n  function supply(address asset, uint amount) public returns (uint);\n  function withdraw(address asset, uint requestedAmount) public returns (uint);\n}\n\ncontract LoanEscrow is Pausable {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  // configurable to any ERC20 (i.e. xCHF)\n  IERC20 public dai = IERC20(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);  // 0x9Ad61E35f8309aF944136283157FABCc5AD371E5  // 0xB4272071eCAdd69d933AdcD19cA99fe80664fc08\n  MoneyMarketInterface public moneyMarket = MoneyMarketInterface(0x3FDA67f7583380E67ef93072294a7fAc882FD7E7);  // 0x6732c278C58FC90542cce498981844A073D693d7\n\n  event Deposited(address indexed from, uint256 daiAmount);\n  event InterestWithdrawn(address indexed to, uint256 daiAmount);\n  event Pulled(address indexed to, uint256 daiAmount);\n\n  mapping(address =\u003e uint256) public deposits;\n  mapping(address =\u003e uint256) public pulls;\n  uint256 public deposited;\n  uint256 public pulled;\n\n  modifier onlyBlockimmo() {\n    require(msg.sender == blockimmo(), \"onlyBlockimmo\");\n    _;\n  }\n\n  function blockimmo() public view returns (address);\n\n  function withdrawInterest() public onlyBlockimmo {\n    uint256 amountInterest = moneyMarket.getSupplyBalance(address(this), address(dai)).add(dai.balanceOf(address(this))).add(pulled).sub(deposited);\n    require(amountInterest \u003e 0, \"no interest\");\n\n    uint256 errorCode = (amountInterest \u003e dai.balanceOf(address(this))) ? moneyMarket.withdraw(address(dai), amountInterest.sub(dai.balanceOf(address(this)))) : 0;\n    require(errorCode == 0, \"withdraw failed\");\n\n    dai.safeTransfer(msg.sender, amountInterest);\n    emit InterestWithdrawn(msg.sender, amountInterest);\n  }\n\n  function withdrawMoneyMarket(uint256 _amountDai) public onlyBlockimmo {\n    uint256 errorCode = moneyMarket.withdraw(address(dai), _amountDai);\n    require(errorCode == 0, \"withdraw failed\");\n  }\n\n  function deposit(address _from, uint256 _amountDai) internal {\n    require(_from != address(0) \u0026\u0026 _amountDai \u003e 0, \"invalid parameter(s)\");\n\n    dai.safeTransferFrom(msg.sender, address(this), _amountDai);\n\n    if (!paused()) {\n      dai.safeApprove(address(moneyMarket), _amountDai);\n\n      uint256 errorCode = moneyMarket.supply(address(dai), _amountDai);\n      require(errorCode == 0, \"supply failed\");\n      require(dai.allowance(address(this), address(moneyMarket)) == 0, \"allowance not fully consumed by moneyMarket\");\n    }\n\n    deposits[_from] = deposits[_from].add(_amountDai);\n    deposited = deposited.add(_amountDai);\n    emit Deposited(_from, _amountDai);\n  }\n\n  function pull(address _to, uint256 _amountDai, bool _refund) internal {\n    require(_to != address(0) \u0026\u0026 _amountDai \u003e 0, \"invalid parameter(s)\");\n\n    uint256 errorCode = (_amountDai \u003e dai.balanceOf(address(this))) ? moneyMarket.withdraw(address(dai), _amountDai.sub(dai.balanceOf(address(this)))) : 0;\n    require(errorCode == 0, \"withdraw failed\");\n\n    if (_refund) {\n      deposits[_to] = deposits[_to].sub(_amountDai);\n      deposited = deposited.sub(_amountDai);\n    } else {\n      pulls[_to] = pulls[_to].add(_amountDai);\n      pulled = pulled.add(_amountDai);\n    }\n\n    dai.safeTransfer(_to, _amountDai);\n    emit Pulled(_to, _amountDai);\n  }\n}\n"},"Ownable.sol":{"content":"pragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"Pausable.sol":{"content":"pragma solidity ^0.5.2;\n\nimport \"./PauserRole.sol\";\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n"},"PauserRole.sol":{"content":"pragma solidity ^0.5.2;\n\nimport \"./Roles.sol\";\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n"},"Roles.sol":{"content":"pragma solidity ^0.5.2;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address =\u003e bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account\u0027s access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n"},"SafeERC20.sol":{"content":"pragma solidity ^0.5.2;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must equal true).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        require(address(token).isContract());\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success);\n\n        if (returndata.length \u003e 0) { // Return data is optional\n            require(abi.decode(returndata, (bool)));\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n"},"TokenizedProperty.sol":{"content":"/**\n * Copyright (c) 2019 blockimmo AG license@blockimmo.ch\n * No license\n */\n\npragma solidity 0.5.7;\n\nimport \"./Ownable.sol\";\nimport \"./ERC20Detailed.sol\";\n\nimport \"./DividendDistributingToken.sol\";\n\ncontract LandRegistryInterface {\n  function getProperty(string memory _eGrid) public view returns (address property);\n}\n\ncontract LandRegistryProxyInterface {\n  function owner() public view returns (address);\n  function landRegistry() public view returns (LandRegistryInterface);\n}\n\ncontract WhitelistInterface {\n  function checkRole(address _operator, string memory _permission) public view;\n}\n\ncontract WhitelistProxyInterface {\n  function whitelist() public view returns (WhitelistInterface);\n}\n\n/**\n * @title TokenizedProperty\n * @dev An asset-backed security token (a property as identified by its E-GRID (a UUID) in the (Swiss) land registry).\n *\n * Ownership of `this` must be transferred to `ShareholderDAO` before blockimmo will verify `this` as legitimate in `LandRegistry`.\n * Until verified legitimate, transferring tokens is not possible (locked).\n *\n * Tokens can be freely listed on exchanges (especially decentralized / 0x).\n *\n * `this.owner` can make two suggestions that blockimmo will always (try) to take: `setManagementCompany` and `untokenize`.\n * `this.owner` can also transfer or rescind ownership.\n * See `ShareholderDAO` documentation for more information...\n *\n * Our legal framework requires a `TokenizedProperty` must be possible to `untokenize`.\n * Un-tokenizing is also the first step to upgrading or an outright sale of `this`.\n *\n * For both:\n *   1. `owner` emits an `UntokenizeRequest`\n *   2. blockimmo removes `this` from the `LandRegistry`\n *\n * Upgrading:\n *   3. blockimmo migrates `this` to the new `TokenizedProperty` (ie perfectly preserving `this.balances`)\n *   4. blockimmo attaches `owner` to the property (1)\n *   5. blockimmo adds the property to `LandRegistry`\n *\n * Outright sale:\n *   3. blockimmo deploys a new `TokenizedProperty` and adds it to the `LandRegistry`\n *   4. blockimmo configures and deploys a `TokenSale` for the property with `TokenSale.wallet == address(this)`\n *      (raised Ether distributed to current token holders as a dividend payout)\n *        - if the sale is unsuccessful, the new property is removed from the `LandRegistry`, and `this` is added back\n */\ncontract TokenizedProperty is DividendDistributingToken, ERC20Detailed, Ownable {\n  LandRegistryProxyInterface public registryProxy = LandRegistryProxyInterface(0xe72AD2A335AE18e6C7cdb6dAEB64b0330883CD56);  // 0x0f5Ea0A652E851678Ebf77B69484bFcD31F9459B;\n  WhitelistProxyInterface public whitelistProxy = WhitelistProxyInterface(0x7223b032180CDb06Be7a3D634B1E10032111F367);  // 0xEC8bE1A5630364292E56D01129E8ee8A9578d7D8;\n\n  uint256 public constant NUM_TOKENS = 1000000;\n\n  modifier isValid() {\n    LandRegistryInterface registry = LandRegistryInterface(registryProxy.landRegistry());\n    require(registry.getProperty(name()) == address(this), \"invalid TokenizedProperty\");\n    _;\n  }\n\n  modifier onlyBlockimmo() {\n    require(msg.sender == blockimmo(), \"onlyBlockimmo\");\n    _;\n  }\n\n  constructor(string memory _eGrid, string memory _grundstuck) public ERC20Detailed(_eGrid, _grundstuck, 18) {\n    uint256 totalSupply = NUM_TOKENS.mul(uint256(10) ** decimals());\n    _mint(msg.sender, totalSupply);\n\n    _approve(address(this), blockimmo(), ~uint256(0));  // enable blockimmo to issue `unissued` tokens in the future\n  }\n\n  function blockimmo() public view returns (address) {\n    return registryProxy.owner();\n  }\n\n  function burn(uint256 _value) public isValid {  // buyback\n    creditAccount(msg.sender);\n    _burn(msg.sender, _value);\n  }\n\n  function mint(address _to, uint256 _value) public isValid onlyBlockimmo returns (bool) {  // equity dilution\n    creditAccount(_to);\n    _mint(_to, _value);\n    return true;\n  }\n\n  function _transfer(address _from, address _to, uint256 _value) internal isValid {\n    whitelistProxy.whitelist().checkRole(_to, \"authorized\");\n\n    creditAccount(_from);  // required for dividends...\n    creditAccount(_to);\n\n    super._transfer(_from, _to, _value);\n  }\n}\n"}}