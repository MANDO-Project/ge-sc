digraph "" {
	node [label="\N"];
	Bank_wallet_0	[contract_name=Bank,
		function_fullname="wallet()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT];
	Bank_wallet_1	[contract_name=Bank,
		function_fullname="wallet()",
		label="Node Type: RETURN

EXPRESSION:
this.balance

IRs:
REF_0 -> BALANCE this
RETURN REF_0",
		node_expression="this.balance",
		node_irs="REF_0 -> BALANCE this
RETURN REF_0",
		node_type=RETURN];
	Bank_wallet_0 -> Bank_wallet_1	[key=0,
		edge_type=normal];
	"Bank_wallet_function.name"	[contract_name=Bank,
		function_fullname="wallet()",
		label="Bank_wallet()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME];
	"Bank_wallet_function.name" -> Bank_wallet_0	[key=0,
		edge_type=normal];
	Bank_recharge_0	[contract_name=Bank,
		function_fullname="recharge()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT];
	Bank_recharge_1	[contract_name=Bank,
		function_fullname="recharge()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] += msg.value

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = \
REF_1 + msg.value",
		node_expression="balances[msg.sender] += msg.value",
		node_irs="REF_1(uint256) -> balances[msg.sender]
REF_1(-> balances) = REF_1 + msg.value",
		node_type=EXPRESSION];
	Bank_recharge_0 -> Bank_recharge_1	[key=0,
		edge_type=normal];
	"Bank_recharge_function.name"	[contract_name=Bank,
		function_fullname="recharge()",
		label="Bank_recharge()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME];
	"Bank_recharge_function.name" -> Bank_recharge_0	[key=0,
		edge_type=normal];
	Bank_withdraw_0	[contract_name=Bank,
		function_fullname="withdraw()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT];
	Bank_withdraw_1	[contract_name=Bank,
		function_fullname="withdraw()",
		label="Node Type: EXPRESSION

EXPRESSION:
require(bool)(msg.sender.call.value(balances[msg.sender])())

IRs:
REF_4(uint256) -> balances[\
msg.sender]
TMP_1(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:REF_4 
TMP_2(None) = SOLIDITY_CALL \
require(bool)(TMP_1)",
		node_expression="require(bool)(msg.sender.call.value(balances[msg.sender])())",
		node_irs="REF_4(uint256) -> balances[msg.sender]
TMP_1(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:REF_4 
TMP_\
2(None) = SOLIDITY_CALL require(bool)(TMP_1)",
		node_type=EXPRESSION];
	Bank_withdraw_0 -> Bank_withdraw_1	[key=0,
		edge_type=normal];
	Bank_withdraw_2	[contract_name=Bank,
		function_fullname="withdraw()",
		label="Node Type: EXPRESSION

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_5(uint256) -> balances[msg.sender]
REF_5 (->balances) := 0(\
uint256)",
		node_expression="balances[msg.sender] = 0",
		node_irs="REF_5(uint256) -> balances[msg.sender]
REF_5 (->balances) := 0(uint256)",
		node_type=EXPRESSION];
	Bank_withdraw_1 -> Bank_withdraw_2	[key=0,
		edge_type=normal];
	"Bank_withdraw_function.name"	[contract_name=Bank,
		function_fullname="withdraw()",
		label="Bank_withdraw()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME];
	"Bank_withdraw_function.name" -> Bank_withdraw_0	[key=0,
		edge_type=normal];
	Attacker_constructor_0	[contract_name=Attacker,
		function_fullname="constructor(address)",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT];
	Attacker_constructor_1	[contract_name=Attacker,
		function_fullname="constructor(address)",
		label="Node Type: EXPRESSION

EXPRESSION:
bankAddr = _bank

IRs:
bankAddr(address) := _bank(address)",
		node_expression="bankAddr = _bank",
		node_irs="bankAddr(address) := _bank(address)",
		node_type=EXPRESSION];
	Attacker_constructor_0 -> Attacker_constructor_1	[key=0,
		edge_type=normal];
	"Attacker_constructor_function.name"	[contract_name=Attacker,
		function_fullname="constructor(address)",
		label="Attacker_constructor(address)",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME];
	"Attacker_constructor_function.name" -> Attacker_constructor_0	[key=0,
		edge_type=normal];
	Attacker_attack_0	[contract_name=Attacker,
		function_fullname="attack()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT];
	Attacker_attack_1	[contract_name=Attacker,
		function_fullname="attack()",
		label="Node Type: EXPRESSION

EXPRESSION:
attackCount = 0

IRs:
attackCount(uint256) := 0(uint256)",
		node_expression="attackCount = 0",
		node_irs="attackCount(uint256) := 0(uint256)",
		node_type=EXPRESSION];
	Attacker_attack_0 -> Attacker_attack_1	[key=0,
		edge_type=normal];
	Attacker_attack_2	[contract_name=Attacker,
		function_fullname="attack()",
		label="Node Type: NEW VARIABLE

EXPRESSION:
bank = Bank(bankAddr)

IRs:
TMP_3 = CONVERT bankAddr to Bank
bank(Bank) := TMP_3(Bank)",
		node_expression="bank = Bank(bankAddr)",
		node_irs="TMP_3 = CONVERT bankAddr to Bank
bank(Bank) := TMP_3(Bank)",
		node_type="NEW VARIABLE"];
	Attacker_attack_1 -> Attacker_attack_2	[key=0,
		edge_type=normal];
	Attacker_attack_3	[contract_name=Attacker,
		function_fullname="attack()",
		label="Node Type: EXPRESSION

EXPRESSION:
bank.recharge.value(msg.value)()

IRs:
HIGH_LEVEL_CALL, dest:bank(Bank), function:recharge, arguments:[] \
value:msg.value ",
		node_expression="bank.recharge.value(msg.value)()",
		node_irs="HIGH_LEVEL_CALL, dest:bank(Bank), function:recharge, arguments:[] value:msg.value ",
		node_type=EXPRESSION];
	Attacker_attack_2 -> Attacker_attack_3	[key=0,
		edge_type=normal];
	Attacker_attack_4	[contract_name=Attacker,
		function_fullname="attack()",
		label="Node Type: EXPRESSION

EXPRESSION:
bank.withdraw()

IRs:
HIGH_LEVEL_CALL, dest:bank(Bank), function:withdraw, arguments:[]  ",
		node_expression="bank.withdraw()",
		node_irs="HIGH_LEVEL_CALL, dest:bank(Bank), function:withdraw, arguments:[]  ",
		node_type=EXPRESSION];
	Attacker_attack_3 -> Attacker_attack_4	[key=0,
		edge_type=normal];
	"Attacker_attack_function.name"	[contract_name=Attacker,
		function_fullname="attack()",
		label="Attacker_attack()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME];
	"Attacker_attack_function.name" -> Attacker_attack_0	[key=0,
		edge_type=normal];
	Attacker_fallback_0	[contract_name=Attacker,
		function_fullname="fallback()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT];
	Attacker_fallback_1	[contract_name=Attacker,
		function_fullname="fallback()",
		label="Node Type: IF

EXPRESSION:
msg.sender == bankAddr && attackCount < 5

IRs:
TMP_7(bool) = msg.sender == bankAddr
TMP_8(bool) = attackCount < \
5
TMP_9(bool) = TMP_7 && TMP_8
CONDITION TMP_9",
		node_expression="msg.sender == bankAddr && attackCount < 5",
		node_irs="TMP_7(bool) = msg.sender == bankAddr
TMP_8(bool) = attackCount < 5
TMP_9(bool) = TMP_7 && TMP_8
CONDITION TMP_9",
		node_type=IF];
	Attacker_fallback_0 -> Attacker_fallback_1	[key=0,
		edge_type=normal];
	Attacker_fallback_2	[contract_name=Attacker,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
attackCount += 1

IRs:
attackCount(uint256) = attackCount + 1",
		node_expression="attackCount += 1",
		node_irs="attackCount(uint256) = attackCount + 1",
		node_type=EXPRESSION];
	Attacker_fallback_1 -> Attacker_fallback_2	[key=0,
		edge_type=if_true,
		label=True];
	Attacker_fallback_5	[contract_name=Attacker,
		function_fullname="fallback()",
		label="Node Type: END_IF
",
		node_expression=None,
		node_irs=None,
		node_type=END_IF];
	Attacker_fallback_1 -> Attacker_fallback_5	[key=0,
		edge_type=if_false,
		label=False];
	Attacker_fallback_3	[contract_name=Attacker,
		function_fullname="fallback()",
		label="Node Type: NEW VARIABLE

EXPRESSION:
bank = Bank(bankAddr)

IRs:
TMP_10 = CONVERT bankAddr to Bank
bank(Bank) := TMP_10(Bank)",
		node_expression="bank = Bank(bankAddr)",
		node_irs="TMP_10 = CONVERT bankAddr to Bank
bank(Bank) := TMP_10(Bank)",
		node_type="NEW VARIABLE"];
	Attacker_fallback_2 -> Attacker_fallback_3	[key=0,
		edge_type=normal];
	Attacker_fallback_4	[contract_name=Attacker,
		function_fullname="fallback()",
		label="Node Type: EXPRESSION

EXPRESSION:
bank.withdraw()

IRs:
HIGH_LEVEL_CALL, dest:bank(Bank), function:withdraw, arguments:[]  ",
		node_expression="bank.withdraw()",
		node_irs="HIGH_LEVEL_CALL, dest:bank(Bank), function:withdraw, arguments:[]  ",
		node_type=EXPRESSION];
	Attacker_fallback_3 -> Attacker_fallback_4	[key=0,
		edge_type=normal];
	Attacker_fallback_4 -> Attacker_fallback_5	[key=0,
		edge_type=normal];
	"Attacker_fallback_function.name"	[contract_name=Attacker,
		function_fullname="fallback()",
		label="Attacker_fallback()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME];
	"Attacker_fallback_function.name" -> Attacker_fallback_0	[key=0,
		edge_type=normal];
	Attacker_wallet_0	[contract_name=Attacker,
		function_fullname="wallet()",
		label="Node Type: ENTRY_POINT
",
		node_expression=None,
		node_irs=None,
		node_type=ENTRY_POINT];
	Attacker_wallet_1	[contract_name=Attacker,
		function_fullname="wallet()",
		label="Node Type: RETURN

EXPRESSION:
this.balance

IRs:
REF_10 -> BALANCE this
RETURN REF_10",
		node_expression="this.balance",
		node_irs="REF_10 -> BALANCE this
RETURN REF_10",
		node_type=RETURN];
	Attacker_wallet_0 -> Attacker_wallet_1	[key=0,
		edge_type=normal];
	"Attacker_wallet_function.name"	[contract_name=Attacker,
		function_fullname="wallet()",
		label="Attacker_wallet()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME];
	"Attacker_wallet_function.name" -> Attacker_wallet_0	[key=0,
		edge_type=normal];
	Attacker_slitherConstructorVariables_0	[contract_name=Attacker,
		function_fullname="slitherConstructorVariables()",
		label="Node Type: OTHER_ENTRYPOINT

EXPRESSION:
attackCount = 0

IRs:
attackCount(uint256) := 0(uint256)",
		node_expression="attackCount = 0",
		node_irs="attackCount(uint256) := 0(uint256)",
		node_type=OTHER_ENTRYPOINT];
	"Attacker_slitherConstructorVariables_function.name"	[contract_name=Attacker,
		function_fullname="slitherConstructorVariables()",
		label="Attacker_slitherConstructorVariables()",
		node_expression=None,
		node_irs=None,
		node_type=FUNCTION_NAME];
	"Attacker_slitherConstructorVariables_function.name" -> Attacker_slitherConstructorVariables_0	[key=0,
		edge_type=normal];
}
