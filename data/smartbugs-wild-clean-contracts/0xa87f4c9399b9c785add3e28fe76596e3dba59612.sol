{"ballot.sol":{"content":"/**\n*Submitted for verification at Etherscan.io on 2019-03-15\n*/\n\npragma solidity ^0.4.16;\n\ncontract owned {\naddress public owner;\n\nfunction owned() public {\nowner = msg.sender;\n}\n\nmodifier onlyOwner {\nrequire(msg.sender == owner);\n_;\n}\n\nfunction transferOwnership(address newOwner) onlyOwner public {\nowner = newOwner;\n}\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n// Public variables of the token\nstring public name;\nstring public symbol;\nuint8 public decimals = 18;\n// 18 decimals is the strongly suggested default, avoid changing it\nuint256 public totalSupply;\nuint256 initialSupply=500000000;\nstring tokenName=\u0027Physical State Network\u0027;\nstring tokenSymbol=\u0027PHSN\u0027;\n\n// This creates an array with all balances\nmapping (address =\u003e uint256) public balanceOf;\nmapping (address =\u003e mapping (address =\u003e uint256)) public allowance;\n\n// This generates a public event on the blockchain that will notify clients\nevent Transfer(address indexed from, address indexed to, uint256 value);\n\n// This notifies clients about the amount burnt\nevent Burn(address indexed from, uint256 value);\n\n/**\n* Constrctor function\n*\n* Initializes contract with initial supply tokens to the creator of the contract\n*/\nfunction TokenERC20(\n\n) public {\ntotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\nbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\nname = tokenName;                                   // Set the name for display purposes\nsymbol = tokenSymbol;                               // Set the symbol for display purposes\n}\n\n/**\n* Internal transfer, only can be called by this contract\n*/\nfunction _transfer(address _from, address _to, uint _value) internal {\n// Prevent transfer to 0x0 address. Use burn() instead\nrequire(_to != 0x0);\n// Check if the sender has enough\nrequire(balanceOf[_from] \u003e= _value);\n// Check for overflows\nrequire(balanceOf[_to] + _value \u003e balanceOf[_to]);\n// Save this for an assertion in the future\nuint previousBalances = balanceOf[_from] + balanceOf[_to];\n// Subtract from the sender\nbalanceOf[_from] -= _value;\n// Add the same to the recipient\nbalanceOf[_to] += _value;\nTransfer(_from, _to, _value);\n// Asserts are used to use static analysis to find bugs in your code. They should never fail\nassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n}\n\n/**\n* Transfer tokens\n*\n* Send `_value` tokens to `_to` from your account\n*\n* @param _to The address of the recipient\n* @param _value the amount to send\n*/\nfunction transfer(address _to, uint256 _value) public {\n_transfer(msg.sender, _to, _value);\n}\n\n/**\n* Transfer tokens from other address\n*\n* Send `_value` tokens to `_to` in behalf of `_from`\n*\n* @param _from The address of the sender\n* @param _to The address of the recipient\n* @param _value the amount to send\n*/\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\nrequire(_value \u003c= allowance[_from][msg.sender]);     // Check allowance\nallowance[_from][msg.sender] -= _value;\n_transfer(_from, _to, _value);\nreturn true;\n}\n\n/**\n* Set allowance for other address\n*\n* Allows `_spender` to spend no more than `_value` tokens in your behalf\n*\n* @param _spender The address authorized to spend\n* @param _value the max amount they can spend\n*/\nfunction approve(address _spender, uint256 _value) public\nreturns (bool success) {\nallowance[msg.sender][_spender] = _value;\nreturn true;\n}\n\n/**\n* Set allowance for other address and notify\n*\n* Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n*\n* @param _spender The address authorized to spend\n* @param _value the max amount they can spend\n* @param _extraData some extra information to send to the approved contract\n*/\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\npublic\nreturns (bool success) {\ntokenRecipient spender = tokenRecipient(_spender);\nif (approve(_spender, _value)) {\nspender.receiveApproval(msg.sender, _value, this, _extraData);\nreturn true;\n}\n}\n\n/**\n* Destroy tokens\n*\n* Remove `_value` tokens from the system irreversibly\n*\n* @param _value the amount of money to burn\n*/\nfunction burn(uint256 _value) public returns (bool success) {\nrequire(balanceOf[msg.sender] \u003e= _value);   // Check if the sender has enough\nbalanceOf[msg.sender] -= _value;            // Subtract from the sender\ntotalSupply -= _value;                      // Updates totalSupply\nBurn(msg.sender, _value);\nreturn true;\n}\n\n/**\n* Destroy tokens from other account\n*\n* Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n*\n* @param _from the address of the sender\n* @param _value the amount of money to burn\n*/\nfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\nrequire(balanceOf[_from] \u003e= _value);                // Check if the targeted balance is enough\nrequire(_value \u003c= allowance[_from][msg.sender]);    // Check allowance\nbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\nallowance[_from][msg.sender] -= _value;             // Subtract from the sender\u0027s allowance\ntotalSupply -= _value;                              // Update totalSupply\nBurn(_from, _value);\nreturn true;\n}\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract PHSN is owned, TokenERC20 {\n\n\nmapping (address =\u003e bool) public frozenAccount;\n\n/* This generates a public event on the blockchain that will notify clients */\nevent FrozenFunds(address target, bool frozen);\n\n/* Initializes contract with initial supply tokens to the creator of the contract */\nfunction PHSN(\n\n) TokenERC20() public {}\n\n/* Internal transfer, only can be called by this contract */\nfunction _transfer(address _from, address _to, uint _value) internal {\nrequire (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\nrequire (balanceOf[_from] \u003e= _value);               // Check if the sender has enough\nrequire (balanceOf[_to] + _value \u003e= balanceOf[_to]); // Check for overflows\nrequire(!frozenAccount[_from]);                     // Check if sender is frozen\nrequire(!frozenAccount[_to]);                       // Check if recipient is frozen\nbalanceOf[_from] -= _value;                         // Subtract from the sender\nbalanceOf[_to] += _value;                           // Add the same to the recipient\nTransfer(_from, _to, _value);\n}\n\n/// @notice Create `mintedAmount` tokens and send it to `target`\n/// @param target Address to receive the tokens\n/// @param mintedAmount the amount of tokens it will receive\nfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\nbalanceOf[target] += mintedAmount;\ntotalSupply += mintedAmount;\nTransfer(0, this, mintedAmount);\nTransfer(this, target, mintedAmount);\n}\n\n/// @notice `freeze? Prevent | Allow` `target` from sending \u0026 receiving tokens\n/// @param target Address to be frozen\n/// @param freeze either to freeze it or not\nfunction freezeAccount(address target, bool freeze) onlyOwner public {\nfrozenAccount[target] = freeze;\nFrozenFunds(target, freeze);\n}\n\n\n}\n"},"ballot1.sol":{"content":"/**\n*Submitted for verification at Etherscan.io on 2019-03-15\n*/\n\npragma solidity ^0.4.16;\n\ncontract owned {\naddress public owner;\n\nfunction owned() public {\nowner = msg.sender;\n}\n\nmodifier onlyOwner {\nrequire(msg.sender == owner);\n_;\n}\n\nfunction transferOwnership(address newOwner) onlyOwner public {\nowner = newOwner;\n}\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n// Public variables of the token\nstring public name;\nstring public symbol;\nuint8 public decimals = 18;\n// 18 decimals is the strongly suggested default, avoid changing it\nuint256 public totalSupply;\nuint256 initialSupply=500000000;\nstring tokenName=\u0027Physical State Network\u0027;\nstring tokenSymbol=\u0027PHSN\u0027;\n\n// This creates an array with all balances\nmapping (address =\u003e uint256) public balanceOf;\nmapping (address =\u003e mapping (address =\u003e uint256)) public allowance;\n\n// This generates a public event on the blockchain that will notify clients\nevent Transfer(address indexed from, address indexed to, uint256 value);\n\n// This notifies clients about the amount burnt\nevent Burn(address indexed from, uint256 value);\n\n/**\n* Constrctor function\n*\n* Initializes contract with initial supply tokens to the creator of the contract\n*/\nfunction TokenERC20(\n\n) public {\ntotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\nbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\nname = tokenName;                                   // Set the name for display purposes\nsymbol = tokenSymbol;                               // Set the symbol for display purposes\n}\n\n/**\n* Internal transfer, only can be called by this contract\n*/\nfunction _transfer(address _from, address _to, uint _value) internal {\n// Prevent transfer to 0x0 address. Use burn() instead\nrequire(_to != 0x0);\n// Check if the sender has enough\nrequire(balanceOf[_from] \u003e= _value);\n// Check for overflows\nrequire(balanceOf[_to] + _value \u003e balanceOf[_to]);\n// Save this for an assertion in the future\nuint previousBalances = balanceOf[_from] + balanceOf[_to];\n// Subtract from the sender\nbalanceOf[_from] -= _value;\n// Add the same to the recipient\nbalanceOf[_to] += _value;\nTransfer(_from, _to, _value);\n// Asserts are used to use static analysis to find bugs in your code. They should never fail\nassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n}\n\n/**\n* Transfer tokens\n*\n* Send `_value` tokens to `_to` from your account\n*\n* @param _to The address of the recipient\n* @param _value the amount to send\n*/\nfunction transfer(address _to, uint256 _value) public {\n_transfer(msg.sender, _to, _value);\n}\n\n/**\n* Transfer tokens from other address\n*\n* Send `_value` tokens to `_to` in behalf of `_from`\n*\n* @param _from The address of the sender\n* @param _to The address of the recipient\n* @param _value the amount to send\n*/\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\nrequire(_value \u003c= allowance[_from][msg.sender]);     // Check allowance\nallowance[_from][msg.sender] -= _value;\n_transfer(_from, _to, _value);\nreturn true;\n}\n\n/**\n* Set allowance for other address\n*\n* Allows `_spender` to spend no more than `_value` tokens in your behalf\n*\n* @param _spender The address authorized to spend\n* @param _value the max amount they can spend\n*/\nfunction approve(address _spender, uint256 _value) public\nreturns (bool success) {\nallowance[msg.sender][_spender] = _value;\nreturn true;\n}\n\n/**\n* Set allowance for other address and notify\n*\n* Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n*\n* @param _spender The address authorized to spend\n* @param _value the max amount they can spend\n* @param _extraData some extra information to send to the approved contract\n*/\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\npublic\nreturns (bool success) {\ntokenRecipient spender = tokenRecipient(_spender);\nif (approve(_spender, _value)) {\nspender.receiveApproval(msg.sender, _value, this, _extraData);\nreturn true;\n}\n}\n\n/**\n* Destroy tokens\n*\n* Remove `_value` tokens from the system irreversibly\n*\n* @param _value the amount of money to burn\n*/\nfunction burn(uint256 _value) public returns (bool success) {\nrequire(balanceOf[msg.sender] \u003e= _value);   // Check if the sender has enough\nbalanceOf[msg.sender] -= _value;            // Subtract from the sender\ntotalSupply -= _value;                      // Updates totalSupply\nBurn(msg.sender, _value);\nreturn true;\n}\n\n/**\n* Destroy tokens from other account\n*\n* Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n*\n* @param _from the address of the sender\n* @param _value the amount of money to burn\n*/\nfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\nrequire(balanceOf[_from] \u003e= _value);                // Check if the targeted balance is enough\nrequire(_value \u003c= allowance[_from][msg.sender]);    // Check allowance\nbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\nallowance[_from][msg.sender] -= _value;             // Subtract from the sender\u0027s allowance\ntotalSupply -= _value;                              // Update totalSupply\nBurn(_from, _value);\nreturn true;\n}\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract PHSN is owned, TokenERC20 {\n\n\nmapping (address =\u003e bool) public frozenAccount;\n\n/* This generates a public event on the blockchain that will notify clients */\nevent FrozenFunds(address target, bool frozen);\n\n/* Initializes contract with initial supply tokens to the creator of the contract */\nfunction PHSN(\n\n) TokenERC20() public {}\n\n/* Internal transfer, only can be called by this contract */\nfunction _transfer(address _from, address _to, uint _value) internal {\nrequire (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\nrequire (balanceOf[_from] \u003e= _value);               // Check if the sender has enough\nrequire (balanceOf[_to] + _value \u003e= balanceOf[_to]); // Check for overflows\nrequire(!frozenAccount[_from]);                     // Check if sender is frozen\nrequire(!frozenAccount[_to]);                       // Check if recipient is frozen\nbalanceOf[_from] -= _value;                         // Subtract from the sender\nbalanceOf[_to] += _value;                           // Add the same to the recipient\nTransfer(_from, _to, _value);\n}\n\n/// @notice Create `mintedAmount` tokens and send it to `target`\n/// @param target Address to receive the tokens\n/// @param mintedAmount the amount of tokens it will receive\nfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\nbalanceOf[target] += mintedAmount;\ntotalSupply += mintedAmount;\nTransfer(0, this, mintedAmount);\nTransfer(this, target, mintedAmount);\n}\n\n/// @notice `freeze? Prevent | Allow` `target` from sending \u0026 receiving tokens\n/// @param target Address to be frozen\n/// @param freeze either to freeze it or not\nfunction freezeAccount(address target, bool freeze) onlyOwner public {\nfrozenAccount[target] = freeze;\nFrozenFunds(target, freeze);\n}\n\n\n}\n"}}