{"ClarityToken.sol":{"content":"pragma solidity 0.4.24;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b \u003e 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b \u003c= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c \u003e= _a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n\n    mapping (address =\u003e uint256) private balances;\n\n    mapping (address =\u003e mapping (address =\u003e uint256)) private allowed;\n\n    uint256 private totalSupply_;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n    public\n    view\n    returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_value \u003c= balances[msg.sender]);\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public\n    returns (bool)\n    {\n        require(_value \u003c= balances[_from]);\n        require(_value \u003c= allowed[_from][msg.sender]);\n        require(_to != address(0));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n    public\n    returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n    public\n    returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue \u003e= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param _account The account that will receive the created tokens.\n     * @param _amount The amount that will be created.\n     */\n    function _mint(address _account, uint256 _amount) internal {\n        require(_account != 0);\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_account] = balances[_account].add(_amount);\n        emit Transfer(address(0), _account, _amount);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param _account The account whose tokens will be burnt.\n     * @param _amount The amount that will be burnt.\n     */\n    function _burn(address _account, uint256 _amount) internal {\n        require(_account != 0);\n        require(_amount \u003c= balances[_account]);\n\n        totalSupply_ = totalSupply_.sub(_amount);\n        balances[_account] = balances[_account].sub(_amount);\n        emit Transfer(_account, address(0), _amount);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender\u0027s allowance for said account. Uses the\n     * internal _burn function.\n     * @param _account The account whose tokens will be burnt.\n     * @param _amount The amount that will be burnt.\n     */\n    function _burnFrom(address _account, uint256 _amount) internal {\n        require(_amount \u003c= allowed[_account][msg.sender]);\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount);\n        _burn(_account, _amount);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        _burn(msg.sender, _value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param _from address The address which you want to send tokens from\n     * @param _value uint256 The amount of token to be burned\n     */\n    function burnFrom(address _from, uint256 _value) public {\n        _burnFrom(_from, _value);\n    }\n\n    /**\n     * @dev Overrides StandardToken._burn in order for burn and burnFrom to emit\n     * an additional Burn event.\n     */\n    function _burn(address _who, uint256 _value) internal {\n        super._burn(_who, _value);\n        emit Burn(_who, _value);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\n\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen \u003cremco@2π.com\u003e\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this Ether.\n * @notice Ether can still be sent to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n */\ncontract HasNoEther is Ownable {\n\n    /**\n    * @dev Constructor that rejects incoming Ether\n    * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n    * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n    * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n    * we could use assembly to access msg.value.\n    */\n    constructor() public payable {\n        require(msg.value == 0);\n    }\n\n    /**\n     * @dev Disallows direct send by setting a default function without the `payable` flag.\n     */\n    function() external {\n    }\n\n    /**\n     * @dev Transfer all Ether held by the contract to the owner.\n     */\n    function reclaimEther() external onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(\n        ERC20 _token,\n        address _to,\n        uint256 _value\n    )\n    internal\n    {\n        require(_token.transfer(_to, _value));\n    }\n\n    function safeTransferFrom(\n        ERC20 _token,\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    internal\n    {\n        require(_token.transferFrom(_from, _to, _value));\n    }\n\n    function safeApprove(\n        ERC20 _token,\n        address _spender,\n        uint256 _value\n    )\n    internal\n    {\n        require(_token.approve(_spender, _value));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n    using SafeERC20 for ERC20;\n\n    /**\n     * @dev Reclaim all ERC20 compatible tokens\n     * @param _token ERC20 The address of the token contract\n     */\n    function reclaimToken(ERC20 _token) external onlyOwner {\n        uint256 balance = _token.balanceOf(this);\n        _token.safeTransfer(owner, balance);\n    }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/HasNoTokens.sol\n\n/**\n * @title Contracts that should not own Tokens\n * @author Remco Bloemen \u003cremco@2π.com\u003e\n * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n * Should tokens (any ERC20 compatible) end up in the contract, it allows the\n * owner to reclaim the tokens.\n */\ncontract HasNoTokens is CanReclaimToken {\n\n    /**\n     * @dev Reject all ERC223 compatible tokens\n     * @param _from address The address that is transferring the tokens\n     * @param _value uint256 the amount of the specified token\n     * @param _data Bytes The data passed from the caller.\n     */\n    function tokenFallback(\n        address _from,\n        uint256 _value,\n        bytes _data\n    )\n    external\n    pure\n    {\n        _from;\n        _value;\n        _data;\n        revert();\n    }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/HasNoContracts.sol\n\n/**\n * @title Contracts that should not own Contracts\n * @author Remco Bloemen \u003cremco@2π.com\u003e\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n * of this contract to reclaim ownership of the contracts.\n */\ncontract HasNoContracts is Ownable {\n\n    /**\n     * @dev Reclaim ownership of Ownable contracts\n     * @param _contractAddr The address of the Ownable to be reclaimed.\n     */\n    function reclaimContract(address _contractAddr) external onlyOwner {\n        Ownable contractInst = Ownable(_contractAddr);\n        contractInst.transferOwnership(owner);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/NoOwner.sol\n\n/**\n * @title Base contract for contracts that should not own things.\n * @author Remco Bloemen \u003cremco@2π.com\u003e\n * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\n * Owned contracts. See respective base contracts for details.\n */\ncontract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n}\n\n// File: contracts/ClarityToken.sol\n\ncontract ClarityToken is StandardToken, BurnableToken, NoOwner {\n    string public constant name = \"Clarity Token\"; // solium-disable-line uppercase\n    string public constant symbol = \"CLRTY\"; // solium-disable-line uppercase\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\n\n    uint256 public constant INITIAL_SUPPLY = 240000000 * (10 ** uint256(decimals));\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor() public {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n}"},"UserPaymentAccount.sol":{"content":"pragma solidity 0.4.24;\n\nimport \"ClarityToken.sol\";\n\ncontract UserPaymentAccount {\n\n    ClarityToken clarityToken;\n    address controller;\n    address paymentTarget;\n    bool isLockedTransactions;\n    bool isLockedReplenish;\n\n    mapping(string =\u003e uint256) balances;\n    mapping(address =\u003e bool) public isOwner;\n    mapping(address =\u003e bool) public isOperator;\n\n    constructor(address _controller, address _clarityToken, address _paymentTarget, address _owner) public {\n        clarityToken = ClarityToken(_clarityToken);\n        controller = _controller;\n        isOwner[_owner] = true;\n        paymentTarget = _paymentTarget;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    function balanceOf(string _userId) public view returns (uint256 _balance) {\n        _balance = balances[_userId];\n    }\n\n    function replenish(string _toUserId, uint256 _amount) public returns (bool) {\n        require(!isLockedReplenish);\n        require(clarityToken.transferFrom(msg.sender, address(this), _amount));\n        balances[_toUserId] += _amount;\n        return true;\n    }\n\n    function move(string _fromUserId, string _toUserId, uint256 _amount) public returns (bool) {\n        require((msg.sender == controller \u0026\u0026 !isLockedTransactions) || isOwner[msg.sender]);\n        return _move(_fromUserId, _toUserId, _amount);\n    }\n\n    function _move(string _fromUserId, string _toUserId, uint256 _amount) internal returns (bool) {\n        require(balances[_fromUserId] \u003e= _amount);\n        balances[_fromUserId] -= _amount;\n        balances[_toUserId] += _amount;\n        return true;\n    }\n\n    function pay(string _fromUserId, uint256 _amount) public returns (bool) {\n        require((msg.sender == controller \u0026\u0026 !isLockedTransactions) || isOwner[msg.sender]);\n        require(balances[_fromUserId] \u003e= _amount);\n        require(clarityToken.transfer(paymentTarget, _amount));\n        balances[_fromUserId] -= _amount;\n        return true;\n    }\n\n    function takeAllTokens() public returns (bool) {\n        require(isOwner[msg.sender]);\n        require(clarityToken.transfer(paymentTarget, clarityToken.balanceOf(address(this))));\n        isLockedReplenish = true;\n        isLockedTransactions = true;\n        return true;\n    }\n\n    function addOwner(address _owner) public notNull(_owner) returns (bool) {\n        require(isOwner[msg.sender]);\n        isOwner[_owner] = true;\n        return true;\n    }\n\n    function removeOwner(address _owner) public notNull(_owner) returns (bool) {\n        require(msg.sender != _owner \u0026\u0026 isOwner[msg.sender]);\n        isOwner[_owner] = false;\n        return true;\n    }\n\n    function lockTransactions() public returns (bool) {\n        require(isOwner[msg.sender] || isOperator[msg.sender]);\n        isLockedTransactions = true;\n        return true;\n    }\n\n    function unlockTransactions() public returns (bool) {\n        require(isOwner[msg.sender] || isOperator[msg.sender]);\n        isLockedTransactions = false;\n        return true;\n    }\n\n    function lockReplenish() public returns (bool) {\n        require(isOwner[msg.sender]);\n        isLockedReplenish = true;\n        return true;\n    }\n\n    function unlockReplenish() public returns (bool) {\n        require(isOwner[msg.sender]);\n        isLockedReplenish = false;\n        return true;\n    }\n\n    function addOperator(address _operator) public notNull(_operator) returns (bool) {\n        require(isOwner[msg.sender]);\n        isOperator[_operator] = true;\n        return true;\n    }\n\n    function removeOperator(address _operator) public notNull(_operator) returns (bool) {\n        require(isOwner[msg.sender]);\n        isOperator[_operator] = false;\n        return true;\n    }\n\n    function setController(address _controller) public notNull(_controller) returns (bool) {\n        require(isOwner[msg.sender]);\n        controller = _controller;\n        return true;\n    }\n\n    function setPaymentTarget(address _paymentTarget) public notNull(_paymentTarget) returns (bool) {\n        require(isOwner[msg.sender]);\n        paymentTarget = _paymentTarget;\n        return true;\n    }\n\n}\n"}}