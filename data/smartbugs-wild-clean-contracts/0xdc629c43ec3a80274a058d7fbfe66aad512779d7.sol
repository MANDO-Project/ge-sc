{"MANAry_mainnet_V1.0.0.sol":{"content":"pragma solidity 0.5.4;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Owned.sol\";\r\n\r\n\r\ncontract MANAToken {\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  function balanceOf(address owner) public view returns (uint256);\r\n}\r\n\r\ncontract MANAry is Owned{\r\n    using SafeMath for uint256;\r\n\r\n    MANAToken token;\r\n   \r\n    constructor() public {\r\n    token = MANAToken(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942);\r\n    }\r\n    \r\n    struct tickets {address _owner; uint numOfTickets;}\r\n    mapping (address =\u003e mapping (uint =\u003e tickets)) ownerOfTickets;\r\n    \r\n    address [] playerAddress;\r\n    address [] entries;\r\n    address [] winner;\r\n    \r\n    uint public players=0;\r\n    uint public potTotal = 0;\r\n    uint public roundNumber = 0;\r\n    uint public numOfTicketsSold = 0;\r\n    uint public cap = 100;\r\n    \r\n    uint unlockTime = now + 7 days + 30 minutes;\r\n    \r\n    function buyTickets(uint amount) public payable onlyWhenTimeIsLeft{\r\n        require(amount \u003e 0);\r\n        \r\n        uint ticket = 0;\r\n        ticket = amount.div(100000000000000000000);\r\n        \r\n        require((ownerOfTickets[msg.sender][roundNumber].numOfTickets+ticket)\u003c=15);\r\n        require((numOfTicketsSold+ticket) \u003c= cap);\r\n        if((numOfTicketsSold+ticket) \u003e= cap){\r\n            unlockTime=0;\r\n        }\r\n        \r\n        if (ticket \u003e 0){\r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n        players++;\r\n        playerAddress.push(msg.sender);\r\n        potTotal = token.balanceOf(address(this));\r\n        \r\n        if (ownerOfTickets[msg.sender][roundNumber].numOfTickets == 0)\r\n        {\r\n        ownerOfTickets[msg.sender][roundNumber] = tickets(msg.sender, ticket);\r\n        for(uint i=0; ticket \u003e i; i++){\r\n            entries.push(msg.sender);\r\n            numOfTicketsSold++;\r\n        }\r\n        }\r\n        else\r\n        {\r\n        ownerOfTickets[msg.sender][roundNumber].numOfTickets += ticket;\r\n        \r\n        for(uint j=0; ticket \u003e j; j++){\r\n            entries.push(msg.sender);\r\n            numOfTicketsSold++;\r\n            \r\n        }\r\n        }\r\n        }\r\n        \r\n        else{\r\n        require(token.transferFrom(msg.sender, owner, amount));\r\n        }\r\n    }\r\n    \r\n    function distributePrize() public payable onlyWhenTimeIsUpOrAllTicketsSold{      \r\n        if (numOfTicketsSold \u003e 0){\r\n        uint randomNumber = uint(keccak256(abi.encodePacked(now, msg.sender))).mod(numOfTicketsSold);\r\n        winner.push(entries[randomNumber]);\r\n        address winnerAddress = winner[roundNumber];\r\n        uint ownerShare = potTotal.mul(5).div(100);\r\n        uint potShare = potTotal.mul(10).div(100);\r\n        uint winnerShare = potTotal.sub(ownerShare.add(potShare));\r\n        require(token.transfer(owner, ownerShare));\r\n        require(token.transfer(winnerAddress, winnerShare));\r\n        potTotal=potShare;\r\n        }\r\n \r\n        else{\r\n        winner.push(address(0));\r\n        }\r\n\r\n\t    delete entries;\r\n        roundNumber++;\r\n        numOfTicketsSold = 0;\r\n        players=0;\r\n        unlockTime= now + 7 days;\r\n    }\r\n    \r\n    function terminateContract() public payable onlyOwner{\r\n        for(uint k=0; players \u003e k; k++)\r\n        {\r\n        uint refund = ownerOfTickets[playerAddress[k]][roundNumber].numOfTickets;\r\n        require(token.transfer(playerAddress[k], refund.mul(100000000000000000000)));\r\n        }\r\n        potTotal = token.balanceOf(address(this));\r\n        require(token.transfer(owner, potTotal));\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    function getLastWinner() public view returns (address){\r\n        if(roundNumber == 0){\r\n        return winner[roundNumber];\r\n        }\r\n        else{\r\n            return winner[roundNumber.sub(1)];\r\n        }\r\n    }\r\n    \r\n    function getTicketNum(address ticketHolder) public view returns(uint) {\r\n        return ownerOfTickets[ticketHolder][roundNumber].numOfTickets;\r\n        \r\n    }\r\n    \r\n    function timeLeft() public view returns(uint) {\r\n        if (unlockTime \u003e= now) {\r\n            return unlockTime.sub(now);\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    modifier onlyWhenTimeIsUpOrAllTicketsSold{\r\n        require (unlockTime \u003c now);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWhenTimeIsLeft{\r\n        require (unlockTime \u003e now);\r\n        _;\r\n    }\r\n    \r\n}\r\n\r\n"},"Owned.sol":{"content":"pragma solidity 0.5.4;\r\n\r\ncontract Owned {\r\n\r\naddress payable  owner;\r\naddress payable newOwner;\r\n\r\n\r\nconstructor() public{\r\n    owner = msg.sender;\r\n}\r\n\r\n\r\nfunction changeOwner(address payable _newOwner) public onlyOwner {\r\n\r\n    newOwner = _newOwner;\r\n\r\n}\r\n\r\nfunction acceptOwnership() public{\r\n    if (msg.sender == newOwner) {\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\nmodifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n}\r\n}\r\n"},"SafeMath.sol":{"content":"pragma solidity 0.5.4;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n"}}