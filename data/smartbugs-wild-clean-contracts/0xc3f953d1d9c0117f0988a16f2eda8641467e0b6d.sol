{"DistrictConfig.sol":{"content":"pragma solidity ^0.4.24;\n\nimport \"./DSAuth.sol\";\n\ncontract DistrictConfig is DSAuth {\n  address public depositCollector;\n  address public memeAuctionCutCollector;\n  uint public memeAuctionCut; // Values 0-10,000 map to 0%-100%\n\n  function DistrictConfig(address _depositCollector, address _memeAuctionCutCollector, uint _memeAuctionCut) {\n    require(_depositCollector != 0x0, \"District Config deposit collector isn\u0027t 0x0\");\n    require(_memeAuctionCutCollector != 0x0, \"District Config meme auction cut collector isn\u0027t 0x0\");\n    require(_memeAuctionCut \u003c 10000, \"District Config meme auction cut should be \u003c 1000\");\n    depositCollector = _depositCollector;\n    memeAuctionCutCollector = _memeAuctionCutCollector;\n    memeAuctionCut = _memeAuctionCut;\n  }\n\n  function setDepositCollector(address _depositCollector) public auth {\n    require(_depositCollector != 0x0, \"District Config deposit collector isn\u0027t 0x0\");\n    depositCollector = _depositCollector;\n  }\n\n  function setMemeAuctionCutCollector(address _memeAuctionCutCollector) public auth {\n    require(_memeAuctionCutCollector != 0x0, \"District Config meme auction cut collector isn\u0027t 0x0\");\n    memeAuctionCutCollector = _memeAuctionCutCollector;\n  }\n\n  function setCollectors(address _collector) public auth {\n    setDepositCollector(_collector);\n    setMemeAuctionCutCollector(_collector);\n  }\n\n  function setMemeAuctionCut(uint _memeAuctionCut) public auth {\n    require(_memeAuctionCut \u003c 10000, \"District Config meme auction cut should be \u003c 1000\");\n    memeAuctionCut = _memeAuctionCut;\n  }\n}\n"},"DSAuth.sol":{"content":"// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n\npragma solidity ^0.4.13;\n\ncontract DSAuthority {\n  function canCall(\n    address src, address dst, bytes4 sig\n  ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n  event LogSetAuthority (address indexed authority);\n  event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n  DSAuthority  public  authority;\n  address      public  owner;\n\n  function DSAuth() public {\n    owner = msg.sender;\n    LogSetOwner(msg.sender);\n  }\n\n  function setOwner(address owner_)\n  public\n  auth\n  {\n    owner = owner_;\n    LogSetOwner(owner);\n  }\n\n  function setAuthority(DSAuthority authority_)\n  public\n  auth\n  {\n    authority = authority_;\n    LogSetAuthority(authority);\n  }\n\n  modifier auth {\n    require(isAuthorized(msg.sender, msg.sig));\n    _;\n  }\n\n  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n    if (src == address(this)) {\n      return true;\n    } else if (src == owner) {\n      return true;\n    } else if (authority == DSAuthority(0)) {\n      return false;\n    } else {\n      return authority.canCall(src, this, sig);\n    }\n  }\n}\n"}}